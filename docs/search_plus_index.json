{"./":{"url":"./","title":"Introduction","keywords":"","body":"简介 日常学习笔记： 高并发方向 当前进度： [ ] SpringCloud [ ] Netty [ ] Zookeeper [ ] RocktMQ [ ] kafaka [ ] SpringCloud Alibaba [ ] Dubbo [ ] Docker Ciallo all right reserved，powered by Gitbook该文章修订时间： 2021-09-21 19:29:14 "},"book/":{"url":"book/","title":"简介","keywords":"","body":"简介 日常学习笔记 Ciallo all right reserved，powered by Gitbook该文章修订时间： 2021-09-20 22:40:12 "},"book/IO/":{"url":"book/IO/","title":"IO","keywords":"","body":"IO学习 IO相关的笔记 [ ] NIO & BIO Ciallo all right reserved，powered by Gitbook该文章修订时间： 2021-09-21 18:57:36 "},"book/IO/first.html":{"url":"book/IO/first.html","title":"first","keywords":"","body":"IO 用户程序进行IO读写依赖read,write两个系统调用read系统调用: graph TB 用户程序 --调用--> A[\"系统调用: read\"] A --> 内核缓存 内核缓存 --> 应用程序的进程缓冲区 write系统调用： graph TB 用户程序 --调用--> A[\"系统调用: write\"] A --> 应用程序的进程缓冲区 应用程序的进程缓冲区 --> 内核缓存 应用程序的IO操作实际上并不是物理设备级别的读写，而是缓存的复制 read & write 两个系统调用都不负责内核缓冲区和物理设备之间的交换 所有底层的读写操作，是由操作系统内核完成的 Ciallo all right reserved，powered by Gitbook该文章修订时间： 2021-09-21 19:12:13 "},"book/SpringCloud/":{"url":"book/SpringCloud/","title":"SpringCloud","keywords":"","body":"SpringCloud 微服务学习笔记 SpringCloud版本 SpringCloud Springboot 2020.0.x aka Ilford 2.4.x, 2.5.x (Starting with 2020.0.3) Hoxton 2.2.x, 2.3.x (Starting with SR5) Greenwich 2.1.x Finchley 2.0.x Edgware 1.5.x Dalston 1.5.x Ciallo all right reserved，powered by Gitbook该文章修订时间： 2021-09-22 13:04:47 "},"book/SpringCloud/服务治理.html":{"url":"book/SpringCloud/服务治理.html","title":"服务治理","keywords":"","body":"服务治理 SpringCloud为服务治理提供了一层抽象接口，所以在SpringCloud应用中可以支持多种不同的服务治理框架：Netflix Eureka Consul Zookeeper。在SpringCloud服务治理抽象层的作用下，可以无缝切换服务治理实现，而不影响服务注册、服务发现、服务调用等逻辑。 SpringCloud Eureka SpringCloud Eureka 是 SpringCloud Netflix项目下的服务治理模块，此子项目主要提供的模块：服务发现（Eureka） 断路器（Hystrix） 智能路由（Zuul） 负载均衡（Ribbon） 服务注册中心 创建SpringBoot项目，在pom.xml引入依赖（需要注意SpringCloud版本和Springboot版本对应） org.springframework.boot spring-boot-starter-parent 2.5.4 org.springframework.cloud spring-cloud-starter-consul-discovery org.springframework.cloud spring-cloud-dependencies 2020.0.3 pom import 通过@EnableEurekaServer注解启动一个服务注册中心 @EnableEurekaServer @SpringBootApplication public class EurekaServerApplication { public static void main(String[] args) { SpringApplication.run(EurekaServerApplication.class, args); } } 在默认配置下Eureka服务中心会将自己作为客户端进行注册，所以需要禁用它的客户端注册行为，在application.yml配置文件中进行配置 server: port: 1001 //应用端口 spring: application: name: eureka-server eureka: instance: hostname: localhost client: register-with-eureka: false fetch-registry: false server: enable-self-preservation: false //关闭自我保护 启动项目后，访问 http://127.0.0.1:1001,可以看到下面画面 创建服务提供者（Provider） 创建一个SpringBoot项目，也可以在上个服务中心项目中添加module,在pom.xml中添加以下依赖 org.springframework.boot spring-boot-starter-parent 2.5.4 org.springframework.boot spring-boot-starter-web org.springframework.cloud spring-cloud-starter-netflix-eureka-client org.springframework.cloud spring-cloud-dependencies 2020.0.3 pom import 创建Controller @RestController public class DCController { @Autowired DiscoveryClient discoveryClient; //SpringCloud提供的抽象借口，依赖此接口可以随意更换服务治理实现而不修改代码 @GetMapping(\"/dc\") public String dc(){ String services = \"Services: \" + discoveryClient.getServices(); System.out.println(services); return services; } } 在应用主类上添加@EnableEurekaClient注解 @EnableEurekaClient @SpringBootApplication public class EurekaClientApplication { public static void main(String[] args) { SpringApplication.run(EurekaClientApplication.class, args); } } 做完这些后，还需要配置application.yml文件 spring: application: name: eureka-client server: port: 8001 eureka: client: service-url: defaultZone: http://127.0.0.1:1001/eureka/ 启动该项目后，在此进入 http://127.0.0.1:1001，可以看到创建的服务成功进行了注册 Ciallo all right reserved，powered by Gitbook该文章修订时间： 2021-09-22 14:01:52 "}}