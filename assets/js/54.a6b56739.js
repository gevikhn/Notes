(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{512:function(v,e,_){"use strict";_.r(e);var a=_(29),r=Object(a.a)({},(function(){var v=this,e=v.$createElement,_=v._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("[toc]")]),v._v(" "),_("h1",{attrs:{id:"面试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[v._v("#")]),v._v(" 面试题")]),v._v(" "),_("h2",{attrs:{id:"一、java-基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、java-基础"}},[v._v("#")]),v._v(" 一、Java 基础")]),v._v(" "),_("details",[_("summary",[v._v("1.JDK 和 JRE 有什么区别？")]),v._v(" "),_("pre",[v._v("\tJDK: JAVA开发者工具包\n\tJRE: JAVA运行环境\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("2.== 和 equals 的区别是什么？")]),v._v(" "),_("pre",[v._v("\t"),_("code",[v._v("==")]),v._v("为比较运算符，在基础数据类型中，"),_("code",[v._v("==")]),v._v("直接比较值，在引用类型中，"),_("code",[v._v("==")]),v._v(" 比较的是对象的地址，"),_("code",[v._v("equals")]),v._v("是Object类中的方法，使用时依赖类的具体实现\n\t在比较int和Integer时，会出现一些其他状况,由于"),_("code",[v._v("IntegerCache")]),v._v("的存在，在比较 "),_("code",[v._v("Integer a = 5")]),v._v(" 与 "),_("code",[v._v("Integer b = 5")]),v._v("时 "),_("code",[v._v("a == b,a.equals(b))")]),v._v("的结果都为true,是因为"),_("code",[v._v("IntegerCache")]),v._v("缓存了 -128 ~ 127 范围内的数，a 和 b指向 IntegerCache中的同一块地址\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？")]),v._v(" "),_("pre",[v._v("\thashCode()相同时，equals()不一定相同，存在撞hash的可能\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("4.final 在 java 中有什么作用？")]),v._v(" "),_("pre",[v._v("\tfinal可以修饰 类、方法、变量；\n\tfinal修饰类时，类不可被继承；\n\tfinal修饰方法时，方法不可以被重写\n\tfinal修饰属性时，属性为常量，初始化后不可更改\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("5.java 中的 Math.round(-1.5) 等于多少？")]),v._v(" "),_("pre",[v._v("\tMath.round()中 首先给原来的数 +0.5,然后向下取整\n\t如-1.5，-1.5+0.5 = -1.0，向下取整后为-1.0\n\t-1.6，-1.6+0.5= -1.1， 向下取整后为-2.0\n\t1.5， 1.5+0.5 = 2.0，向下取整为2.0\n\t1.4， 1.4+0.5 = 1.9，向下取整为1.0\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("6.String 属于基础的数据类型吗？")]),v._v(" "),_("pre",[v._v("\tString是引用类型，不属于基本类型\n\t基础类型：byte,boolean,short,int,long,float,double,char\n\t对应的包装类：Byte,Boolean,Short,Integer,Long,Float,Double,Character\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("7.java 中操作字符串都有哪些类？它们之间有什么区别？")]),v._v(" "),_("pre",[v._v("\t有String,StringBuffer,StringBuilder三种\n\tString为不可变的，每次进行更改都需要重新分配内存，StringBuffer与StringBuilder则不需要\n\tStringBuffer为线程安全的，StringBuilder是线程不安全的\n\t")])]),v._v(" "),_("details",[_("summary",[v._v('8.String str="i"与 String str=new String(“i”)一样吗？')]),v._v(" "),_("pre",[v._v('\t不一样，String str="i" i存在常量池中，str指向其地址，而String str=new String(“i”)则重新分配了内存\n\t')])]),v._v(" "),_("details",[_("summary",[v._v("9.如何将字符串反转？")]),v._v(" "),_("pre",[v._v("\t1. 使用StringBuffer和StringBuilder的reverse()\n\t2. 通过charat()进行交换\n\t3. 通过collects类中的reversse()\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("10.String 类的常用方法都有那些？")]),v._v(" "),_("pre",[v._v("\t1. toString()\n\t2. charAt()\n\t3. indexOf()\n\t4. length()\n\t5. replace()\n\t6. replaceAll()\n\t7. lastIndexOf()\n\t8. split()\n\t9. substring()\n\t9. equals()\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("11.抽象类必须要有抽象方法吗？")]),v._v(" "),_("pre",[v._v("\t不需要，但是有抽象方法的一定是抽象类\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("12.普通类和抽象类有哪些区别？")]),v._v(" "),_("pre",[v._v("\t抽象类不可以被实例化\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("13.抽象类能使用 final 修饰吗？")]),v._v(" "),_("pre",[v._v("\t不能，抽象类需要被子类实现，不能用final修饰\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("14.接口和抽象类有什么区别？")]),v._v(" "),_("pre",[v._v("\t接口中的变量为public static 类变量，抽象类中的变量可以是普通成员变量\n\t接口可以被实现多个，抽象类只能被继承一个\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("15.java 中 IO 流分为几种？")]),v._v(" "),_("pre",[v._v("\t字节流：InputStream,OutputStream\n\t字符流：Writer,Reader\n\t")])]),v._v(" "),_("details",[_("summary",[v._v("16.BIO、NIO、AIO 有什么区别？")]),v._v(" "),_("pre",[v._v("\t")])]),v._v(" "),_("details",[_("summary",[v._v("17.Files的常用方法都有哪些？")]),v._v(" "),_("pre",[v._v("\t")])]),v._v(" "),_("h2",{attrs:{id:"二、容器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、容器"}},[v._v("#")]),v._v(" 二、容器")]),v._v(" "),_("details",[_("summary",[v._v("18.java 容器都有哪些？")]),v._v(" "),_("pre",[v._v("    Collection: \n    \tList: Vector, ArrayList,LinkedList\n    \tSet: HashSet,LinkedHashSet,TreeSet\n    Map:\n    \tHashMap, LinkedHashMap, TreeMap, ConcurrentHashMap,HashTable,\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("19.Collection 和 Collections 有什么区别？")]),v._v(" "),_("pre",[v._v("    Collection是一个接口，是Set,List 的父接口；Collections是工具类，提供了一系列工具用于集合，如排序，搜索\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("20.List、Set、Map 之间的区别是什么？")]),v._v(" "),_("pre",[v._v("    List是有序集合，元素可重复；Set是无序集合，元素不可重复，LinkedHashSet按照插入顺序排序\n    Map是键值对映射，Key 无序，不可重复\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("21.HashMap 和 Hashtable 有什么区别？")]),v._v(" "),_("pre",[v._v("    HashMap是线程不安全的，允许key和value为 null\n    HashTable是线程安全的，不允许为空\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("22.如何决定使用 HashMap 还是 TreeMap？")]),v._v(" "),_("pre",[v._v("    TreeMap要求key实现compareable接口，默认按升序排序\n    需要得到有序的结果时使用treemap\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("23.说一下 HashMap 的实现原理？")]),v._v(" "),_("pre",[v._v("    HashMap使用数组加链表实现，进行put时，对key进行两次hash，然后与数组大小进行取模。如果两个key映射到同一个数组位置，则通过链表进行存储，在jdk1.8中，链表的长度大于8时，链表将转换为红黑树\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("24.说一下 HashSet 的实现原理？")]),v._v(" "),_("pre",[v._v("    HashSet封装了一个HashMap\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("25.ArrayList 和 LinkedList 的区别是什么？")]),v._v(" "),_("pre",[v._v("    ArrayList使用数组实现，随机访问效率高，插入删除效率低；LinkedList使用双向链表实现，随机访问效率低，增删效率高\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("26.如何实现数组和 List 之间的转换？")]),v._v(" "),_("pre",[v._v("    Arrays.asList(),List.toArray\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("27.ArrayList 和 Vector 的区别是什么？")]),v._v(" "),_("pre",[v._v("    Vector是线程安全的\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("28.Array 和 ArrayList 有何区别？")]),v._v(" "),_("pre",[v._v("    Array不可扩容，ArrayList是动态数组\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("29.在 Queue 中 poll()和 remove()有什么区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("30.哪些集合类是线程安全的？")]),v._v(" "),_("pre",[v._v("    Vector,HashTable,ConcurrentHashMap\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("31.迭代器 Iterator 是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("32.Iterator 怎么使用？有什么特点？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("33.Iterator 和 ListIterator 有什么区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("34.怎么确保一个集合不能被修改？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v("\n## 三、多线程\n"),_("details",[_("summary",[v._v("35.并行和并发有什么区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("36.线程和进程的区别？")]),v._v(" "),_("pre",[v._v("    进程是计算机分配资源的最小单位，线程是cpu执行的最小单位\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("37.守护线程是什么？")]),v._v(" "),_("pre",[v._v("    thread在start之前，SetDeamon(true),守护线程在有其他线程存在时一直存活，在其他线程都结束后，守护线程将被关闭，如jvm的垃圾回收\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("38.创建线程有哪几种方式？")]),v._v(" "),_("pre",[v._v("    继承thread类，实现callable,runnable接口，使用线程池\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("39.说一下 runnable 和 callable 有什么区别？")]),v._v(" "),_("pre",[v._v("    runable没有返回值，callable有返回值，允许抛出异常\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("40.线程有哪些状态？")]),v._v(" "),_("pre",[v._v("    \tnew,runnable,running,waiting,block\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("41.sleep() 和 wait() 有什么区别？")]),v._v(" "),_("pre",[v._v("    sleep不会放开锁，属于Thread类的方法\n    wait会防开锁，可进行线程通信，属于Object类的方法\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("42.notify()和 notifyAll()有什么区别？")]),v._v(" "),_("pre",[v._v("    notify()随机唤醒一个wait的线程，可能导致死锁发生；\n    notifyAll()唤醒所有线程\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("43.线程的 run()和 start()有什么区别？")]),v._v(" "),_("pre",[v._v("    run()在当前线程执行方法，start()创建一个新线程执行方法\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("44.创建线程池有哪几种方式？")]),v._v(" "),_("pre",[v._v("    Executors工具类，new threadpoolexcutor()\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("45.线程池都有哪些状态？")]),v._v(" "),_("pre",[v._v("    running,shutdown,stop,terminated\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("46.线程池中 submit()和 execute()方法有什么区别？")]),v._v(" "),_("pre",[v._v("    executor()返回类型为void,submit()返回future\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("47.在 java 程序中怎么保证多线程的运行安全？")]),v._v(" "),_("pre",[v._v("    使用原子类，synchronized,volatile,Lock\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("48.多线程锁的升级原理是什么？")]),v._v(" "),_("pre",[v._v("    无锁->偏向锁->轻量锁->重量级锁\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("49.什么是死锁？")]),v._v(" "),_("pre",[v._v("    两个线程分别请求对方拥有的资源\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("50.怎么防止死锁？")]),v._v(" "),_("pre",[v._v("    一段时间没有获取到锁后放弃自己的锁\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("51.ThreadLocal 是什么？有哪些使用场景？")]),v._v(" "),_("pre",[v._v("    线程独有的空间，可以用来存放session\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("52.说一下 synchronized 底层实现原理？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("53.synchronized 和 volatile 的区别是什么？")]),v._v(" "),_("pre",[v._v("    synchronized是锁，volation保证可见性及避免代码重排\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("54.synchronized 和 Lock 有什么区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("55.synchronized 和 ReentrantLock 区别是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("56.说一下 atomic 的原理？")]),v._v(" "),_("pre",[v._v("    cas自旋\n    ")])]),v._v(" "),_("h2",{attrs:{id:"四、反射"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、反射"}},[v._v("#")]),v._v(" 四、反射")]),v._v(" "),_("details",[_("summary",[v._v("57.什么是反射？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("58.什么是 java 序列化？什么情况下需要序列化？")]),v._v(" "),_("pre",[v._v("    序列化：java对象转换为字节流\n    在需要将java对象通过网络等介质传输到另一个地方时\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("59.动态代理是什么？有哪些应用？")]),v._v(" "),_("pre",[v._v("    可以扩展目标类的方法，可以用于日志记录，性能统计\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("60.怎么实现动态代理？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v("\n## 五、对象拷贝\n"),_("details",[_("summary",[v._v("61.为什么要使用克隆？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("62.如何实现对象克隆？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("63.深拷贝和浅拷贝区别是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v("\n## 六、Java Web\n"),_("details",[_("summary",[v._v("64.jsp 和 servlet 有什么区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("65.jsp 有哪些内置对象？作用分别是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("66.说一下 jsp 的 4 种作用域？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("67.session 和 cookie 有什么区别？")]),v._v(" "),_("pre",[v._v("    session存在服务器上，cookie存在客户端上\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("68.说一下 session 的工作原理？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("69.如果客户端禁止 cookie 能实现 session 还能用吗？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("70.spring mvc 和 struts 的区别是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("71.如何避免 sql 注入？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("72.什么是 XSS 攻击，如何避免？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("73.什么是 CSRF 攻击，如何避免？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v("\n## 七、异常\n"),_("details",[_("summary",[v._v("74.throw 和 throws 的区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("75.final、finally、finalize 有什么区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("76.try-catch-finally 中哪个部分可以省略？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("77.try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("78.常见的异常类有哪些？")]),v._v(" "),_("pre",[v._v("    nullpointerexception\n    classnotfoundexception\n    arrayindexoutofboundsexception\n    ClassCastException\n    EOFException\n    FileNotFoundException\n    SQLException\n    IOException\n    ")])]),v._v(" "),_("h2",{attrs:{id:"八、网络"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#八、网络"}},[v._v("#")]),v._v(" 八、网络")]),v._v(" "),_("details",[_("summary",[v._v("79.http 响应码 301 和 302 代表的是什么？有什么区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("80.forward 和 redirect 的区别？")]),v._v(" "),_("pre",[v._v("    forward是服务器转发，redirect是浏览器重定向\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("81.简述 tcp 和 udp的区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("82.tcp 为什么要三次握手，两次不行吗？为什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("83.说一下 tcp 粘包是怎么产生的？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("84.OSI 的七层模型都有哪些？")]),v._v(" "),_("pre",[v._v("    应用层\n    表示层\n    会话层\n    传输层\n    网络层\n    数据链路层\n    物理层\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("85.get 和 post 请求有哪些区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("86.如何实现跨域？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("87.说一下 JSONP 实现原理？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v("\n## 九、设计模式\n"),_("details",[_("summary",[v._v("88.说一下你熟悉的设计模式？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("89.简单工厂和抽象工厂有什么区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v("\n## 十、Spring/Spring MVC\n"),_("details",[_("summary",[v._v("90.为什么要使用 spring？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("91.解释一下什么是 aop？")]),v._v(" "),_("pre",[v._v("    在不修改源代码的情况下增强功能，底层实现是动态代理\n    · 连接点：可以被增强的方法\n    · 切入点：被增强的方法\n    · 通知：\n    · 目标\n    · 织入\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("92.解释一下什么是 ioc？")]),v._v(" "),_("pre",[v._v("    Spring容器，控制反转，将对象的创建、管理交给spring\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("93.spring 有哪些主要模块？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("94.spring 常用的注入方式有哪些？")]),v._v(" "),_("pre",[v._v("    构造器注入、set注入、注解注入（@Autowired,@Resource）\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("95.spring 中的 bean 是线程安全的吗？")]),v._v(" "),_("pre",[v._v("    spring的bean默认是单实例的，不是线程安全的\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("96.spring 支持几种 bean 的作用域？")]),v._v(" "),_("pre",[v._v("    request,session,singletiin,prorotype,gloableSession\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("97.spring 自动装配 bean 有哪些方式？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("98.spring 事务实现方式有哪些？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("99.说一下 spring 的事务隔离？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("100.说一下 spring mvc 运行流程？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("101.spring mvc 有哪些组件？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("102.@RequestMapping 的作用是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("103.@Autowired 的作用是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v("\n## 十一、Spring Boot/Spring Cloud\n"),_("details",[_("summary",[v._v("104.什么是 spring boot？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("105.为什么要用 spring boot？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("106.spring boot 核心配置文件是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("107.spring boot 配置文件有哪几种类型？它们有什么区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("108.spring boot 有哪些方式可以实现热部署？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("109.jpa 和 hibernate 有什么区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("110.什么是 spring cloud？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("111.spring cloud 断路器的作用是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("112.spring cloud 的核心组件有哪些？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v("\n## 十二、Hibernate\n113.为什么要使用 hibernate？\n114.什么是 ORM 框架？\n115.hibernate 中如何在控制台查看打印的 sql 语句？\n116.hibernate 有几种查询方式？\n117.hibernate 实体类可以被定义为 final 吗？\n118.在 hibernate 中使用 Integer 和 int 做映射有什么区别？\n119.hibernate 是如何工作的？\n120.get()和 load()的区别？\n121.说一下 hibernate 的缓存机制？\n122.hibernate 对象有哪些状态？\n123.在 hibernate 中 getCurrentSession 和 openSession 的区别是什么？\n124.hibernate 实体类必须要有无参构造函数吗？为什么？\n"),_("h2",{attrs:{id:"十三、mybatis"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#十三、mybatis"}},[v._v("#")]),v._v(" 十三、Mybatis")]),v._v(" "),_("details",[_("summary",[v._v("125.mybatis 中 #{}和 ${}的区别是什么？")]),v._v(" "),_("pre",[v._v("    #{}是占位符，${}是拼接字符串\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("125.mybatis 中 #{}和 ${}的区别是什么？")]),v._v(" "),_("pre",[v._v("    #{}占位符\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("127.RowBounds 是一次性查询全部结果吗？为什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("128.mybatis 逻辑分页和物理分页的区别是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("129.mybatis 是否支持延迟加载？延迟加载的原理是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("130.说一下 mybatis 的一级缓存和二级缓存？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("131.mybatis 和 hibernate 的区别有哪些？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("132.mybatis 有哪些执行器（Executor）？")]),v._v(" "),_("pre",[v._v("    Simple,batch,reuse\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("133.mybatis 分页插件的实现原理是什么？")]),v._v(" "),_("pre",[v._v("    通过拦截器，重写sql，加上limit\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("134.mybatis 如何编写一个自定义插件？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v("\n## 十四、RabbitMQ\n"),_("details",[_("summary",[v._v("135.rabbitmq 的使用场景有哪些？")]),v._v(" "),_("pre",[v._v("    解耦，流量削峰\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("136.rabbitmq 有哪些重要的角色？")]),v._v(" "),_("pre",[v._v("    生产者，消费者，代理\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("137.rabbitmq 有哪些重要的组件？")]),v._v(" "),_("pre",[v._v("    ConnectionFactory，channel,Exchange,Queue,RoutingKey,BindingKey\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("138.rabbitmq 中 vhost 的作用是什么？")]),v._v(" "),_("pre",[v._v("    vhost,可以视为rabbitmq的虚拟机，里面有着独立的Exchange、Queue等，拥有者独立的权限控制和用户管理\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("139.rabbitmq 的消息是怎么发送的？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("140.rabbitmq 怎么保证消息的稳定性？")]),v._v(" "),_("pre",[v._v("    1. 消息持久化\n    2. Ack机制\n    3. 集群镜像\n    4. 消息补偿\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("141.rabbitmq 怎么避免消息丢失？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("142.要保证消息持久化成功的条件有哪些？")]),v._v(" "),_("pre",[v._v("    Exchange设置持久化\n    Queue设置持久化\n    Message 设置持久化\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("143.rabbitmq 持久化有什么缺点？")]),v._v(" "),_("pre",[v._v("    降低吞吐量\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("144.rabbitmq 有几种广播类型？")]),v._v(" "),_("pre",[v._v("    1. direct:默认消息发送方式，直接将消息发送给对方，如果有多个订阅者就轮询进行消息发送。消息中的路由键（routing key）如果和 Binding 中的 binding key 一致， 交换器就将消息发到对应的队列中，路由键与队列名完全匹配\n    2. fanout:分发给与Exchange绑定的的队列上，不处理路由键\n    3. topic: 通过对路由键进行模式匹配分发消息\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("145.rabbitmq 怎么实现延迟消息队列？")]),v._v(" "),_("pre",[v._v("    TTL\n    给quene和message设置x-message-tt，来控制消息生存时间，超时后，消息会变成dead letter\n    DLX\n    Queue可以配置x-dead-letter-exchange 和x-dead-letter-routing-key（可选）两个参数,如果队列内出现了dead letter，则按照这两个参数重新路由\n    1. x-dead-letter-exchange：出现dead letter之后将dead letter重新发送到指定exchange\n\t2. x-dead-letter-routing-key：指定routing-key发送\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("146.rabbitmq 集群有什么用？")]),v._v(" "),_("pre",[v._v("    高可用，高容量\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("147.rabbitmq 节点的类型有哪些？")]),v._v(" "),_("pre",[v._v("    磁盘节点，内存节点\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("148.rabbitmq 集群搭建需要注意哪些问题？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("149.rabbitmq 每个节点是其他节点的完整拷贝吗？为什么？")]),v._v(" "),_("pre",[v._v("    不是\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("150.rabbitmq 集群中唯一一个磁盘节点崩溃了会发生什么情况？")]),v._v(" "),_("pre",[v._v("    可以正常运行，但是不能改变任何东西\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("151.rabbitmq 对集群节点停止顺序有要求吗？")]),v._v(" "),_("pre",[v._v("    先关闭内存节点，再关闭磁盘节点\n    ")])]),v._v(" "),_("h2",{attrs:{id:"十五、kafka"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#十五、kafka"}},[v._v("#")]),v._v(" 十五、Kafka")]),v._v(" "),_("p",[v._v("152.kafka 可以脱离 zookeeper 单独使用吗？为什么？\n153.kafka 有几种数据保留的策略？\n154.kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？\n155.什么情况会导致 kafka 运行变慢？\n156.使用 kafka 集群需要注意什么？")]),v._v(" "),_("h2",{attrs:{id:"十六、zookeeper"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#十六、zookeeper"}},[v._v("#")]),v._v(" 十六、Zookeeper")]),v._v(" "),_("p",[v._v("157.zookeeper 是什么？\n158.zookeeper 都有哪些功能？\n159.zookeeper 有几种部署模式？\n160.zookeeper 怎么保证主从节点的状态同步？\n161.集群中为什么要有主节点？\n162.集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？\n163.说一下 zookeeper 的通知机制？")]),v._v(" "),_("h2",{attrs:{id:"十七、mysql"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#十七、mysql"}},[v._v("#")]),v._v(" 十七、MySql")]),v._v(" "),_("details",[_("summary",[v._v("164.数据库的三范式是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("165.一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("166.如何获取当前数据库版本？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("167.说一下 ACID 是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("168.char 和 varchar 的区别是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("169.float 和 double 的区别是什么？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("170.mysql 的内连接、左连接、右连接有什么区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("171.mysql 索引是怎么实现的？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("172.怎么验证 mysql 的索引是否满足需求？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("173.说一下数据库的事务隔离？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("174.说一下 mysql 常用的引擎？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("175.说一下 mysql 的行锁和表锁？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("176.说一下乐观锁和悲观锁？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("177.mysql 问题排查都有哪些手段？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("178.如何做 mysql 的性能优化？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v("\n## 十八、Redis\n"),_("details",[_("summary",[v._v("179.redis 是什么？都有哪些使用场景？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("180.redis 有哪些功能？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("181.redis 和 memecache 有什么区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("182.redis 为什么是单线程的？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("183.什么是缓存穿透？怎么解决？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("184.redis 支持的数据类型有哪些？")]),v._v(" "),_("pre",[v._v("    set,list,hash,string,sorted set\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("185.redis 支持的 java 客户端都有哪些？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("186.jedis 和 redisson 有哪些区别？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("187.怎么保证缓存和数据库数据的一致性？")]),v._v(" "),_("pre",[v._v("    1.双删\n    2. 设置有效期\n    3. mysql的binlog\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("188.redis 持久化有几种方式？")]),v._v(" "),_("pre",[v._v("    rdb,aof\n    ")])]),v._v(" "),_("details",[_("summary",[v._v("189.redis 怎么实现分布式锁？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("190.redis 分布式锁有什么缺陷？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("191.redis 如何做内存优化？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("192.redis 淘汰策略有哪些？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v(" "),_("details",[_("summary",[v._v("193.redis 常见的性能问题有哪些？该如何解决？")]),v._v(" "),_("pre",[v._v("    ")])]),v._v("\n## 十九、JVM\n194.说一下 jvm 的主要组成部分？及其作用？\n195.说一下 jvm 运行时数据区？\n196.说一下堆栈的区别？\n197.队列和栈是什么？有什么区别？\n198.什么是双亲委派模型？\n199.说一下类加载的执行过程？\n200.怎么判断对象是否可以被回收？\n201.java 中都有哪些引用类型？\n202.说一下 jvm 有哪些垃圾回收算法？\n203.说一下 jvm 有哪些垃圾回收器？\n204.详细介绍一下 CMS 垃圾回收器？\n205.新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？\n206.简述分代垃圾回收器是怎么工作的？\n207.说一下 jvm 调优的工具？\n208.常用的 jvm 调优的参数都有哪些？\n")])}),[],!1,null,null,null);e.default=r.exports}}]);