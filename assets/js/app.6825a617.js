(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,a,s=e[0],c=e[1],l=e[2],p=0,d=[];p<s.length;p++)a=s[p],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&d.push(o[a][0]),o[a]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(n[r]=c[r]);for(u&&u(e);d.length;)d.shift()();return i.push.apply(i,l||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],r=!0,s=1;s<t.length;s++){var c=t[s];0!==o[c]&&(r=!1)}r&&(i.splice(e--,1),n=a(a.s=t[0]))}return n}var r={},o={1:0},i=[];function a(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.e=function(n){var e=[],t=o[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=o[n]=[e,r]}));e.push(t[2]=r);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,a.nc&&s.setAttribute("nonce",a.nc),s.src=function(n){return a.p+"assets/js/"+({}[n]||n)+"."+{2:"e46b09ff",3:"a69b7938",4:"fb91bec8",5:"702d3e9f",6:"39aad29b",7:"ba69fa2e",8:"38b77b60",9:"5ed8a1c5",10:"12484bc8",11:"6cd9c001",12:"ee16b483",13:"580082a0",14:"cfd02731",15:"28195839",16:"4bde6841",17:"2e99d9cd",18:"768095ed",19:"5ecafde1",20:"e3557e3d",21:"0faf4690",22:"827f6bf4",23:"89121fe9",24:"d7ba0b27",25:"62e68202",26:"10f1803e",27:"ddfa9dec",28:"e848b7b0",29:"b3cb8a1f",30:"3223f0e5",31:"762d1e17",32:"96165e76",33:"1d7efa1c",34:"929684a9",35:"e542a83f",36:"89b4fa4a",37:"c524ca44",38:"9459c8b3",39:"da7c15b5",40:"b85ff044",41:"b398f317",42:"7bca8f03",43:"ce9bed7c",44:"b5bb568e",45:"d6b9024f",46:"d672c877",47:"75443c1b",48:"69483f56",49:"939812ea",50:"55911bbf",51:"745735bf",52:"14c95bcd",53:"5361b8fb",54:"a6b56739",55:"fb47d51e",56:"e9c43b37",57:"4bb06b31",58:"4c0b7ef2",59:"00706c4c"}[n]+".js"}(n);var c=new Error;i=function(e){s.onerror=s.onload=null,clearTimeout(l);var t=o[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;c.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",c.name="ChunkLoadError",c.type=r,c.request=i,t[1](c)}o[n]=void 0}};var l=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(e)},a.m=n,a.c=r,a.d=function(n,e,t){a.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,e){if(1&e&&(n=a(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)a.d(t,r,function(e){return n[e]}.bind(null,r));return t},a.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="/notes/",a.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=e,s=s.slice();for(var l=0;l<s.length;l++)e(s[l]);var u=c;i.push([224,0]),t()}([function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e,t){var r=t(55),o=Function.prototype,i=o.bind,a=o.call,s=r&&i.bind(a,a);n.exports=r?function(n){return n&&s(n)}:function(n){return n&&function(){return a.apply(n,arguments)}}},function(n,e,t){var r=t(0),o=t(37).f,i=t(21),a=t(14),s=t(101),c=t(107),l=t(97);n.exports=function(n,e){var t,u,p,d,f,m=n.target,g=n.global,h=n.stat;if(t=g?r:h?r[m]||s(m,{}):(r[m]||{}).prototype)for(u in e){if(d=e[u],p=n.noTargetGet?(f=o(t,u))&&f.value:t[u],!l(g?u:m+(h?".":"#")+u,n.forced)&&void 0!==p){if(typeof d==typeof p)continue;c(d,p)}(n.sham||p&&p.sham)&&i(d,"sham",!0),a(t,u,d,n)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e){n.exports=function(n){return"function"==typeof n}},function(n,e,t){var r=t(0),o=t(73),i=t(10),a=t(74),s=t(102),c=t(140),l=o("wks"),u=r.Symbol,p=u&&u.for,d=c?u:u&&u.withoutSetter||a;n.exports=function(n){if(!i(l,n)||!s&&"string"!=typeof l[n]){var e="Symbol."+n;s&&i(u,n)?l[n]=u[n]:l[n]=c&&p?p(e):d(e)}return l[n]}},function(n,e,t){var r=t(111),o=t(14),i=t(243);r||o(Object.prototype,"toString",i,{unsafe:!0})},function(n,e,t){var r=t(0),o=t(8),i=r.String,a=r.TypeError;n.exports=function(n){if(o(n))return n;throw a(i(n)+" is not an object")}},function(n,e,t){var r=t(4);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(3);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var r=t(1),o=t(15),i=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return i(o(n),e)}},function(n,e,t){var r=t(55),o=Function.prototype.call;n.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},function(n,e,t){var r=t(0),o=t(82),i=r.String;n.exports=function(n){if("Symbol"===o(n))throw TypeError("Cannot convert a Symbol value to a string");return i(n)}},function(n,e,t){var r=t(0),o=t(9),i=t(142),a=t(141),s=t(7),c=t(76),l=r.TypeError,u=Object.defineProperty,p=Object.getOwnPropertyDescriptor;e.f=o?a?function(n,e,t){if(s(n),e=c(e),s(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=p(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return u(n,e,t)}:u:function(n,e,t){if(s(n),e=c(e),s(t),i)try{return u(n,e,t)}catch(n){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(0),o=t(4),i=t(10),a=t(21),s=t(101),c=t(81),l=t(36),u=t(70).CONFIGURABLE,p=l.get,d=l.enforce,f=String(String).split("String");(n.exports=function(n,e,t,c){var l,p=!!c&&!!c.unsafe,m=!!c&&!!c.enumerable,g=!!c&&!!c.noTargetGet,h=c&&void 0!==c.name?c.name:e;o(t)&&("Symbol("===String(h).slice(0,7)&&(h="["+String(h).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(t,"name")||u&&t.name!==h)&&a(t,"name",h),(l=d(t)).source||(l.source=f.join("string"==typeof h?h:""))),n!==r?(p?!g&&n[e]&&(m=!0):delete n[e],m?n[e]=t:a(n,e,t)):m?n[e]=t:s(e,t)})(Function.prototype,"toString",(function(){return o(this)&&p(this).source||c(this)}))},function(n,e,t){var r=t(0),o=t(17),i=r.Object;n.exports=function(n){return i(o(n))}},function(n,e,t){var r=t(0),o=t(4),i=function(n){return o(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?i(r[n]):r[n]&&r[n][e]}},function(n,e,t){var r=t(0).TypeError;n.exports=function(n){if(null==n)throw r("Can't call method on "+n);return n}},function(n,e,t){var r=t(54),o=t(17);n.exports=function(n){return r(o(n))}},function(n,e,t){"use strict";var r=t(2),o=t(87);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(n,e,t){var r=t(1),o=r({}.toString),i=r("".slice);n.exports=function(n){return i(o(n),8,-1)}},function(n,e,t){var r=t(9),o=t(13),i=t(48);n.exports=r?function(n,e,t){return o.f(n,e,i(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e){var t=Array.isArray;n.exports=t},function(n,e){n.exports=!1},function(n,e,t){var r=t(16);n.exports=r("navigator","userAgent")||""},function(n,e,t){var r=t(47);n.exports=function(n){return r(n.length)}},function(n,e,t){"use strict";var r=t(162).charAt,o=t(12),i=t(36),a=t(146),s=i.set,c=i.getterFor("String Iterator");a(String,"String",(function(n){s(this,{type:"String Iterator",string:o(n),index:0})}),(function(){var n,e=c(this),t=e.string,o=e.index;return o>=t.length?{value:void 0,done:!0}:(n=r(t,o),e.index+=n.length,{value:n,done:!1})}))},function(n,e,t){var r=t(14),o=t(259),i=Error.prototype;i.toString!==o&&r(i,"toString",o)},function(n,e,t){var r=t(179),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();n.exports=i},function(n,e,t){"use strict";function r(n,e,t,r,o,i,a,s){var c,l="function"==typeof n?n.options:n;if(e&&(l.render=e,l.staticRenderFns=t,l._compiled=!0),r&&(l.functional=!0),i&&(l._scopeId="data-v-"+i),a?(c=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),o&&o.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(a)},l._ssrRegister=c):o&&(c=s?function(){o.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:o),c)if(l.functional){l._injectStyles=c;var u=l.render;l.render=function(n,e){return c.call(e),u(n,e)}}else{var p=l.beforeCreate;l.beforeCreate=p?[].concat(p,c):[c]}return{exports:n,options:l}}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(2),o=t(52).filter;r({target:"Array",proto:!0,forced:!t(85)("filter")},{filter:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(1);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r,o=t(7),i=t(132),a=t(105),s=t(57),c=t(145),l=t(75),u=t(80),p=u("IE_PROTO"),d=function(){},f=function(n){return"<script>"+n+"<\/script>"},m=function(n){n.write(f("")),n.close();var e=n.parentWindow.Object;return n=null,e},g=function(){try{r=new ActiveXObject("htmlfile")}catch(n){}var n,e;g="undefined"!=typeof document?document.domain&&r?m(r):((e=l("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(n=e.contentWindow.document).open(),n.write(f("document.F=Object")),n.close(),n.F):m(r);for(var t=a.length;t--;)delete g.prototype[a[t]];return g()};s[p]=!0,n.exports=Object.create||function(n,e){var t;return null!==n?(d.prototype=o(n),t=new d,d.prototype=null,t[p]=n):t=g(),void 0===e?t:i.f(t,e)}},function(n,e,t){var r=t(0),o=t(4),i=t(78),a=r.TypeError;n.exports=function(n){if(o(n))return n;throw a(i(n)+" is not a function")}},function(n,e,t){var r=t(55),o=Function.prototype,i=o.apply,a=o.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?a.bind(i):function(){return a.apply(i,arguments)})},function(n,e,t){var r=t(0),o=t(163),i=t(164),a=t(139),s=t(21),c=t(5),l=c("iterator"),u=c("toStringTag"),p=a.values,d=function(n,e){if(n){if(n[l]!==p)try{s(n,l,p)}catch(e){n[l]=p}if(n[u]||s(n,u,e),o[e])for(var t in a)if(n[t]!==a[t])try{s(n,t,a[t])}catch(e){n[t]=a[t]}}};for(var f in o)d(r[f]&&r[f].prototype,f);d(i,"DOMTokenList")},function(n,e,t){var r,o,i,a=t(226),s=t(0),c=t(1),l=t(8),u=t(21),p=t(10),d=t(100),f=t(80),m=t(57),g=s.TypeError,h=s.WeakMap;if(a||d.state){var v=d.state||(d.state=new h),b=c(v.get),y=c(v.has),x=c(v.set);r=function(n,e){if(y(v,n))throw new g("Object already initialized");return e.facade=n,x(v,n,e),e},o=function(n){return b(v,n)||{}},i=function(n){return y(v,n)}}else{var k=f("state");m[k]=!0,r=function(n,e){if(p(n,k))throw new g("Object already initialized");return e.facade=n,u(n,k,e),e},o=function(n){return p(n,k)?n[k]:{}},i=function(n){return p(n,k)}}n.exports={set:r,get:o,has:i,enforce:function(n){return i(n)?o(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=o(e)).type!==n)throw g("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var r=t(9),o=t(11),i=t(106),a=t(48),s=t(18),c=t(76),l=t(10),u=t(142),p=Object.getOwnPropertyDescriptor;e.f=r?p:function(n,e){if(n=s(n),e=c(e),u)try{return p(n,e)}catch(n){}if(l(n,e))return a(!o(i.f,n,e),n[e])}},function(n,e,t){var r=t(2),o=t(0),i=t(34),a=t(255),s=o.WebAssembly,c=7!==Error("e",{cause:7}).cause,l=function(n,e){var t={};t[n]=a(n,e,c),r({global:!0,forced:c},t)},u=function(n,e){if(s&&s[n]){var t={};t[n]=a("WebAssembly."+n,e,c),r({target:"WebAssembly",stat:!0,forced:c},t)}};l("Error",(function(n){return function(e){return i(n,this,arguments)}})),l("EvalError",(function(n){return function(e){return i(n,this,arguments)}})),l("RangeError",(function(n){return function(e){return i(n,this,arguments)}})),l("ReferenceError",(function(n){return function(e){return i(n,this,arguments)}})),l("SyntaxError",(function(n){return function(e){return i(n,this,arguments)}})),l("TypeError",(function(n){return function(e){return i(n,this,arguments)}})),l("URIError",(function(n){return function(e){return i(n,this,arguments)}})),u("CompileError",(function(n){return function(e){return i(n,this,arguments)}})),u("LinkError",(function(n){return function(e){return i(n,this,arguments)}})),u("RuntimeError",(function(n){return function(e){return i(n,this,arguments)}}))},function(n,e,t){var r=t(280),o=t(283);n.exports=function(n,e){var t=o(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return i})),t.d(e,"j",(function(){return a})),t.d(e,"g",(function(){return c})),t.d(e,"h",(function(){return l})),t.d(e,"i",(function(){return u})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return f})),t.d(e,"m",(function(){return m})),t.d(e,"d",(function(){return h})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return x}));t(19),t(50),t(212),t(69),t(213),t(177),t(43),t(41),t(6),t(42),t(30),t(72),t(128),t(198),t(95),t(199),t(27),t(138);var r=/#.*$/,o=/\.(md|html)$/,i=/\/$/,a=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(o,"")}function c(n){return a.test(n)}function l(n){return/^mailto:/.test(n)}function u(n){return/^tel:/.test(n)}function p(n){if(c(n))return n;if(!n)return"404";var e=n.match(r),t=e?e[0]:"",o=s(n);return i.test(o)?n:o+".html"+t}function d(n,e){var t=n.hash,o=function(n){var e=null==n?void 0:n.match(r);if(e)return e[0]}(e);return(!o||t===o)&&s(n.path)===s(e)}function f(n,e,t){if(c(e))return{type:"external",path:e};t&&(e=function(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var o=e.split("/");t&&o[o.length-1]||o.pop();for(var i=n.replace(/^\//,"").split("/"),a=0;a<i.length;a++){var s=i[a];".."===s?o.pop():"."!==s&&o.push(s)}""!==o[0]&&o.unshift("");return o.join("/")}(e,t));for(var r=s(e),o=0;o<n.length;o++)if(s(n[o].regularPath)===r)return Object.assign({},n[o],{type:"page",path:p(n[o].path)});return console.error('[vuepress] No matching page found for sidebar item "'.concat(e,'"')),{}}function m(n,e,t,r){var o=t.pages,i=t.themeConfig,a=r&&i.locales&&i.locales[r]||i;if("auto"===(n.frontmatter.sidebar||a.sidebar||i.sidebar))return g(n);var s=a.sidebar||i.sidebar;if(s){var c=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(var t in e)if(0===(r=n,/(\.html|\/)$/.test(r)?r:r+"/").indexOf(encodeURI(t)))return{base:t,config:e[t]};var r;return{}}(e,s),l=c.base,u=c.config;return"auto"===u?g(n):u?u.map((function(n){return function n(e,t,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if("string"==typeof e)return f(t,e,r);if(Array.isArray(e))return Object.assign(f(t,e[0],r),{title:e[1]});o>3&&console.error("[vuepress] detected a too deep nested sidebar group.");var i=e.children||[];return 0===i.length&&e.path?Object.assign(f(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:i.map((function(e){return n(e,t,r,o+1)})),collapsable:!1!==e.collapsable}}(n,o,l)})):[]}return[]}function g(n){var e=h(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map((function(e){return{type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}}))}]}function h(n){var e;return(n=n.map((function(n){return Object.assign({},n)}))).forEach((function(n){2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)})),n.filter((function(n){return 2===n.level}))}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){var e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return y(e)-y(n)}},function(n,e,t){"use strict";var r=t(2),o=t(169);r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(n,e,t){var r=t(0),o=t(163),i=t(164),a=t(169),s=t(21),c=function(n){if(n&&n.forEach!==a)try{s(n,"forEach",a)}catch(e){n.forEach=a}};for(var l in o)o[l]&&c(r[l]&&r[l].prototype);c(i)},function(n,e,t){"use strict";var r=t(2),o=t(52).map;r({target:"Array",proto:!0,forced:!t(85)("map")},{map:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r,o,i=t(0),a=t(24),s=i.process,c=i.Deno,l=s&&s.versions||c&&c.version,u=l&&l.v8;u&&(o=(r=u.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=+r[1]),n.exports=o},function(n,e,t){var r=t(33);n.exports=function(n,e){var t=n[e];return null==t?void 0:r(t)}},function(n,e,t){var r=t(56),o=Math.min;n.exports=function(n){return n>0?o(r(n),9007199254740991):0}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){"use strict";var r=t(34),o=t(11),i=t(1),a=t(115),s=t(3),c=t(7),l=t(4),u=t(56),p=t(47),d=t(12),f=t(17),m=t(116),g=t(46),h=t(260),v=t(117),b=t(5)("replace"),y=Math.max,x=Math.min,k=i([].concat),S=i([].push),w=i("".indexOf),C=i("".slice),_="$0"==="a".replace(/./,"$0"),E=!!/./[b]&&""===/./[b]("a","$0");a("replace",(function(n,e,t){var i=E?"$":"$0";return[function(n,t){var r=f(this),i=null==n?void 0:g(n,b);return i?o(i,n,r,t):o(e,d(r),n,t)},function(n,o){var a=c(this),s=d(n);if("string"==typeof o&&-1===w(o,i)&&-1===w(o,"$<")){var f=t(e,a,s,o);if(f.done)return f.value}var g=l(o);g||(o=d(o));var b=a.global;if(b){var _=a.unicode;a.lastIndex=0}for(var E=[];;){var A=v(a,s);if(null===A)break;if(S(E,A),!b)break;""===d(A[0])&&(a.lastIndex=m(s,p(a.lastIndex),_))}for(var I,T="",j=0,O=0;O<E.length;O++){for(var P=d((A=E[O])[0]),R=y(x(u(A.index),s.length),0),L=[],q=1;q<A.length;q++)S(L,void 0===(I=A[q])?I:String(I));var F=A.groups;if(g){var M=k([P],L,R,s);void 0!==F&&S(M,F);var D=d(r(o,void 0,M))}else D=h(P,s,R,L,F,o);R>=j&&(T+=C(s,j,R)+D,j=R+P.length)}return T+C(s,j)}]}),!!s((function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:"7"},n},"7"!=="".replace(n,"$<a>")}))||!_||E)},function(n,e,t){var r=t(144),o=t(105).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,o)}},function(n,e,t){var r=t(61),o=t(1),i=t(54),a=t(15),s=t(25),c=t(165),l=o([].push),u=function(n){var e=1==n,t=2==n,o=3==n,u=4==n,p=6==n,d=7==n,f=5==n||p;return function(m,g,h,v){for(var b,y,x=a(m),k=i(x),S=r(g,h),w=s(k),C=0,_=v||c,E=e?_(m,w):t||d?_(m,0):void 0;w>C;C++)if((f||C in k)&&(y=S(b=k[C],C,x),n))if(e)E[C]=y;else if(y)switch(n){case 3:return!0;case 5:return b;case 6:return C;case 2:l(E,b)}else switch(n){case 4:return!1;case 7:l(E,b)}return p?-1:o||u?u:E}};n.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterReject:u(7)}},function(n,e,t){var r=t(65),o=t(265),i=t(266),a=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":a&&a in Object(n)?o(n):i(n)}},function(n,e,t){var r=t(0),o=t(1),i=t(3),a=t(20),s=r.Object,c=o("".split);n.exports=i((function(){return!s("z").propertyIsEnumerable(0)}))?function(n){return"String"==a(n)?c(n,""):s(n)}:s},function(n,e,t){var r=t(3);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=function(n){var e=+n;return e!=e||0===e?0:(e>0?r:t)(e)}},function(n,e){n.exports={}},function(n,e){n.exports={}},function(n,e,t){var r=t(13).f,o=t(10),i=t(5)("toStringTag");n.exports=function(n,e,t){n&&!t&&(n=n.prototype),n&&!o(n,i)&&r(n,i,{configurable:!0,value:e})}},function(n,e,t){var r=t(1),o=t(7),i=t(228);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return o(t),i(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e,t){var r=t(1),o=t(33),i=t(55),a=r(r.bind);n.exports=function(n,e){return o(n),void 0===e?n:i?a(n,e):function(){return n.apply(e,arguments)}}},function(n,e,t){var r=t(1);n.exports=r([].slice)},function(n,e,t){var r=t(20);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e,t){"use strict";var r=t(76),o=t(13),i=t(48);n.exports=function(n,e,t){var a=r(e);a in n?o.f(n,a,i(0,t)):n[a]=t}},function(n,e,t){var r=t(28).Symbol;n.exports=r},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(72);var r=t(67);t(71),t(86),t(6),t(114),t(26),t(35),t(174);var o=t(93);t(38),t(27);function i(n){return function(n){if(Array.isArray(n))return Object(r.a)(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(o.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";function r(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(2),o=t(0),i=t(63),a=t(83),s=t(8),c=t(104),l=t(25),u=t(18),p=t(64),d=t(5),f=t(85),m=t(62),g=f("slice"),h=d("species"),v=o.Array,b=Math.max;r({target:"Array",proto:!0,forced:!g},{slice:function(n,e){var t,r,o,d=u(this),f=l(d),g=c(n,f),y=c(void 0===e?f:e,f);if(i(d)&&(t=d.constructor,(a(t)&&(t===v||i(t.prototype))||s(t)&&null===(t=t[h]))&&(t=void 0),t===v||void 0===t))return m(d,g,y);for(r=new(void 0===t?v:t)(b(y-g,0)),o=0;g<y;g++,o++)g in d&&p(r,o,d[g]);return r.length=o,r}})},function(n,e,t){"use strict";t(19);var r,o,i=t(2),a=t(0),s=t(11),c=t(1),l=t(4),u=t(8),p=(r=!1,(o=/[ac]/).exec=function(){return r=!0,/./.exec.apply(this,arguments)},!0===o.test("abc")&&r),d=a.Error,f=c(/./.test);i({target:"RegExp",proto:!0,forced:!p},{test:function(n){var e=this.exec;if(!l(e))return f(this,n);var t=s(e,this,n);if(null!==t&&!u(t))throw new d("RegExp exec method returned something other than an Object or null");return!!t}})},function(n,e,t){var r=t(9),o=t(10),i=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,s=o(i,"name"),c=s&&"something"===function(){}.name,l=s&&(!r||r&&a(i,"name").configurable);n.exports={EXISTS:s,PROPER:c,CONFIGURABLE:l}},function(n,e,t){"use strict";var r=t(2),o=t(0),i=t(16),a=t(34),s=t(11),c=t(1),l=t(23),u=t(9),p=t(102),d=t(3),f=t(10),m=t(63),g=t(4),h=t(8),v=t(31),b=t(77),y=t(7),x=t(15),k=t(18),S=t(76),w=t(12),C=t(48),_=t(32),E=t(79),A=t(51),I=t(171),T=t(108),j=t(37),O=t(13),P=t(132),R=t(106),L=t(62),q=t(14),F=t(73),M=t(80),D=t(57),$=t(74),z=t(5),B=t(172),N=t(173),H=t(59),U=t(36),V=t(52).forEach,J=M("hidden"),W=z("toPrimitive"),G=U.set,K=U.getterFor("Symbol"),Z=Object.prototype,X=o.Symbol,Y=X&&X.prototype,Q=o.TypeError,nn=o.QObject,en=i("JSON","stringify"),tn=j.f,rn=O.f,on=I.f,an=R.f,sn=c([].push),cn=F("symbols"),ln=F("op-symbols"),un=F("string-to-symbol-registry"),pn=F("symbol-to-string-registry"),dn=F("wks"),fn=!nn||!nn.prototype||!nn.prototype.findChild,mn=u&&d((function(){return 7!=_(rn({},"a",{get:function(){return rn(this,"a",{value:7}).a}})).a}))?function(n,e,t){var r=tn(Z,e);r&&delete Z[e],rn(n,e,t),r&&n!==Z&&rn(Z,e,r)}:rn,gn=function(n,e){var t=cn[n]=_(Y);return G(t,{type:"Symbol",tag:n,description:e}),u||(t.description=e),t},hn=function(n,e,t){n===Z&&hn(ln,e,t),y(n);var r=S(e);return y(t),f(cn,r)?(t.enumerable?(f(n,J)&&n[J][r]&&(n[J][r]=!1),t=_(t,{enumerable:C(0,!1)})):(f(n,J)||rn(n,J,C(1,{})),n[J][r]=!0),mn(n,r,t)):rn(n,r,t)},vn=function(n,e){y(n);var t=k(e),r=E(t).concat(kn(t));return V(r,(function(e){u&&!s(bn,t,e)||hn(n,e,t[e])})),n},bn=function(n){var e=S(n),t=s(an,this,e);return!(this===Z&&f(cn,e)&&!f(ln,e))&&(!(t||!f(this,e)||!f(cn,e)||f(this,J)&&this[J][e])||t)},yn=function(n,e){var t=k(n),r=S(e);if(t!==Z||!f(cn,r)||f(ln,r)){var o=tn(t,r);return!o||!f(cn,r)||f(t,J)&&t[J][r]||(o.enumerable=!0),o}},xn=function(n){var e=on(k(n)),t=[];return V(e,(function(n){f(cn,n)||f(D,n)||sn(t,n)})),t},kn=function(n){var e=n===Z,t=on(e?ln:k(n)),r=[];return V(t,(function(n){!f(cn,n)||e&&!f(Z,n)||sn(r,cn[n])})),r};(p||(q(Y=(X=function(){if(v(Y,this))throw Q("Symbol is not a constructor");var n=arguments.length&&void 0!==arguments[0]?w(arguments[0]):void 0,e=$(n),t=function(n){this===Z&&s(t,ln,n),f(this,J)&&f(this[J],e)&&(this[J][e]=!1),mn(this,e,C(1,n))};return u&&fn&&mn(Z,e,{configurable:!0,set:t}),gn(e,n)}).prototype,"toString",(function(){return K(this).tag})),q(X,"withoutSetter",(function(n){return gn($(n),n)})),R.f=bn,O.f=hn,P.f=vn,j.f=yn,A.f=I.f=xn,T.f=kn,B.f=function(n){return gn(z(n),n)},u&&(rn(Y,"description",{configurable:!0,get:function(){return K(this).description}}),l||q(Z,"propertyIsEnumerable",bn,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!p,sham:!p},{Symbol:X}),V(E(dn),(function(n){N(n)})),r({target:"Symbol",stat:!0,forced:!p},{for:function(n){var e=w(n);if(f(un,e))return un[e];var t=X(e);return un[e]=t,pn[t]=e,t},keyFor:function(n){if(!b(n))throw Q(n+" is not a symbol");if(f(pn,n))return pn[n]},useSetter:function(){fn=!0},useSimple:function(){fn=!1}}),r({target:"Object",stat:!0,forced:!p,sham:!u},{create:function(n,e){return void 0===e?_(n):vn(_(n),e)},defineProperty:hn,defineProperties:vn,getOwnPropertyDescriptor:yn}),r({target:"Object",stat:!0,forced:!p},{getOwnPropertyNames:xn,getOwnPropertySymbols:kn}),r({target:"Object",stat:!0,forced:d((function(){T.f(1)}))},{getOwnPropertySymbols:function(n){return T.f(x(n))}}),en)&&r({target:"JSON",stat:!0,forced:!p||d((function(){var n=X();return"[null]"!=en([n])||"{}"!=en({a:n})||"{}"!=en(Object(n))}))},{stringify:function(n,e,t){var r=L(arguments),o=e;if((h(e)||void 0!==n)&&!b(n))return m(e)||(e=function(n,e){if(g(o)&&(e=s(o,this,n,e)),!b(e))return e}),r[1]=e,a(en,null,r)}});if(!Y[W]){var Sn=Y.valueOf;q(Y,W,(function(n){return s(Sn,this)}))}H(X,"Symbol"),D[J]=!0},function(n,e,t){t(2)({target:"Array",stat:!0},{isArray:t(63)})},function(n,e,t){var r=t(23),o=t(100);(n.exports=function(n,e){return o[n]||(o[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.21.1",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){var r=t(1),o=0,i=Math.random(),a=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+a(++o+i,36)}},function(n,e,t){var r=t(0),o=t(8),i=r.document,a=o(i)&&o(i.createElement);n.exports=function(n){return a?i.createElement(n):{}}},function(n,e,t){var r=t(143),o=t(77);n.exports=function(n){var e=r(n,"string");return o(e)?e:e+""}},function(n,e,t){var r=t(0),o=t(16),i=t(4),a=t(31),s=t(140),c=r.Object;n.exports=s?function(n){return"symbol"==typeof n}:function(n){var e=o("Symbol");return i(e)&&a(e.prototype,c(n))}},function(n,e,t){var r=t(0).String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){var r=t(144),o=t(105);n.exports=Object.keys||function(n){return r(n,o)}},function(n,e,t){var r=t(73),o=t(74),i=r("keys");n.exports=function(n){return i[n]||(i[n]=o(n))}},function(n,e,t){var r=t(1),o=t(4),i=t(100),a=r(Function.toString);o(i.inspectSource)||(i.inspectSource=function(n){return a(n)}),n.exports=i.inspectSource},function(n,e,t){var r=t(0),o=t(111),i=t(4),a=t(20),s=t(5)("toStringTag"),c=r.Object,l="Arguments"==a(function(){return arguments}());n.exports=o?a:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=c(n),s))?t:l?a(e):"Object"==(r=a(e))&&i(e.callee)?"Arguments":r}},function(n,e,t){var r=t(1),o=t(3),i=t(4),a=t(82),s=t(16),c=t(81),l=function(){},u=[],p=s("Reflect","construct"),d=/^\s*(?:class|function)\b/,f=r(d.exec),m=!d.exec(l),g=function(n){if(!i(n))return!1;try{return p(l,u,n),!0}catch(n){return!1}},h=function(n){if(!i(n))return!1;switch(a(n)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return m||!!f(d,c(n))}catch(n){return!0}};h.sham=!0,n.exports=!p||o((function(){var n;return g(g.call)||!g(Object)||!g((function(){n=!0}))||n}))?h:g},function(n,e,t){var r=t(20),o=t(0);n.exports="process"==r(o.process)},function(n,e,t){var r=t(3),o=t(5),i=t(45),a=o("species");n.exports=function(n){return i>=51||!r((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[n](Boolean).foo}))}},function(n,e,t){"use strict";var r=t(2),o=t(9),i=t(0),a=t(1),s=t(10),c=t(4),l=t(31),u=t(12),p=t(13).f,d=t(107),f=i.Symbol,m=f&&f.prototype;if(o&&c(f)&&(!("description"in m)||void 0!==f().description)){var g={},h=function(){var n=arguments.length<1||void 0===arguments[0]?void 0:u(arguments[0]),e=l(m,this)?new f(n):void 0===n?f():f(n);return""===n&&(g[e]=!0),e};d(h,f),h.prototype=m,m.constructor=h;var v="Symbol(test)"==String(f("test")),b=a(m.toString),y=a(m.valueOf),x=/^Symbol\((.*)\)[^)]+$/,k=a("".replace),S=a("".slice);p(m,"description",{configurable:!0,get:function(){var n=y(this),e=b(n);if(s(g,n))return"";var t=v?S(e,7,-1):k(e,x,"$1");return""===t?void 0:t}}),r({global:!0,forced:!0},{Symbol:h})}},function(n,e,t){"use strict";var r,o,i=t(11),a=t(1),s=t(12),c=t(134),l=t(99),u=t(73),p=t(32),d=t(36).get,f=t(214),m=t(219),g=u("native-string-replace",String.prototype.replace),h=RegExp.prototype.exec,v=h,b=a("".charAt),y=a("".indexOf),x=a("".replace),k=a("".slice),S=(o=/b*/g,i(h,r=/a/,"a"),i(h,o,"a"),0!==r.lastIndex||0!==o.lastIndex),w=l.BROKEN_CARET,C=void 0!==/()??/.exec("")[1];(S||C||w||f||m)&&(v=function(n){var e,t,r,o,a,l,u,f=this,m=d(f),_=s(n),E=m.raw;if(E)return E.lastIndex=f.lastIndex,e=i(v,E,_),f.lastIndex=E.lastIndex,e;var A=m.groups,I=w&&f.sticky,T=i(c,f),j=f.source,O=0,P=_;if(I&&(T=x(T,"y",""),-1===y(T,"g")&&(T+="g"),P=k(_,f.lastIndex),f.lastIndex>0&&(!f.multiline||f.multiline&&"\n"!==b(_,f.lastIndex-1))&&(j="(?: "+j+")",P=" "+P,O++),t=new RegExp("^(?:"+j+")",T)),C&&(t=new RegExp("^"+j+"$(?!\\s)",T)),S&&(r=f.lastIndex),o=i(h,I?t:f,P),I?o?(o.input=k(o.input,O),o[0]=k(o[0],O),o.index=f.lastIndex,f.lastIndex+=o[0].length):f.lastIndex=0:S&&o&&(f.lastIndex=f.global?o.index+o[0].length:r),C&&o&&o.length>1&&i(g,o[0],t,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&A)for(o.groups=l=p(null),a=0;a<A.length;a++)l[(u=A[a])[0]]=o[u[1]];return o}),n.exports=v},function(n,e,t){var r=t(270),o=t(271),i=t(272),a=t(273),s=t(274);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(181);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(39)(Object,"create");n.exports=r},function(n,e,t){var r=t(292);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(125);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(68),t(6),t(98),t(174),t(26),t(19),t(69);var r=t(67);function o(n,e){if(n){if("string"==typeof n)return Object(r.a)(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r.a)(n,e):void 0}}},function(n,e,t){var r,o;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(o="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function o(n,e,t){return n<e?e:n>t?t:n}function i(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=o(n,r.minimum,1),t.status=1===n?null:n;var c=t.render(!e),l=c.querySelector(r.barSelector),u=r.speed,p=r.easing;return c.offsetWidth,a((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(l,function(n,e,t){var o;return(o="translate3d"===r.positionUsing?{transform:"translate3d("+i(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+i(n)+"%,0)"}:{"margin-left":i(n)+"%"}).transition="all "+e+"ms "+t,o}(n,u,p)),1===n?(s(c,{transition:"none",opacity:1}),c.offsetWidth,setTimeout((function(){s(c,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),u)}),u)):setTimeout(e,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*o(Math.random()*e,.1,.95)),e=o(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");l(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var o,a=e.querySelector(r.barSelector),c=n?"-100":i(t.status||0),u=document.querySelector(r.parent);return s(a,{transition:"all 0 linear",transform:"translate3d("+c+"%,0,0)"}),r.showSpinner||(o=e.querySelector(r.spinnerSelector))&&d(o),u!=document.body&&l(u,"nprogress-custom-parent"),u.appendChild(e),e},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var a=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,o=n.length,i=e.charAt(0).toUpperCase()+e.slice(1);o--;)if((r=n[o]+i)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,o,i=arguments;if(2==i.length)for(t in e)void 0!==(o=e[t])&&e.hasOwnProperty(t)&&r(n,t,o);else r(n,i[1],i[2])}}();function c(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function l(n,e){var t=p(n),r=t+e;c(t,e)||(n.className=r.substring(1))}function u(n,e){var t,r=p(n);c(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=o)},function(n,e,t){"use strict";var r=t(2),o=t(0),i=t(3),a=t(63),s=t(8),c=t(15),l=t(25),u=t(64),p=t(165),d=t(85),f=t(5),m=t(45),g=f("isConcatSpreadable"),h=o.TypeError,v=m>=51||!i((function(){var n=[];return n[g]=!1,n.concat()[0]!==n})),b=d("concat"),y=function(n){if(!s(n))return!1;var e=n[g];return void 0!==e?!!e:a(n)};r({target:"Array",proto:!0,forced:!v||!b},{concat:function(n){var e,t,r,o,i,a=c(this),s=p(a,0),d=0;for(e=-1,r=arguments.length;e<r;e++)if(y(i=-1===e?a:arguments[e])){if(d+(o=l(i))>9007199254740991)throw h("Maximum allowed index exceeded");for(t=0;t<o;t++,d++)t in i&&u(s,d,i[t])}else{if(d>=9007199254740991)throw h("Maximum allowed index exceeded");u(s,d++,i)}return s.length=d,s}})},function(n,e,t){var r=t(2),o=t(0),i=t(34),a=t(4),s=t(24),c=t(62),l=t(157),u=/MSIE .\./.test(s),p=o.Function,d=function(n){return function(e,t){var r=l(arguments.length,1)>2,o=a(e)?e:p(e),s=r?c(arguments,2):void 0;return n(r?function(){i(o,this,s)}:o,t)}};r({global:!0,bind:!0,forced:u},{setTimeout:d(o.setTimeout),setInterval:d(o.setInterval)})},function(n,e,t){var r=t(3),o=t(4),i=/#|\.prototype\./,a=function(n,e){var t=c[s(n)];return t==u||t!=l&&(o(e)?r(e):!!e)},s=a.normalize=function(n){return String(n).replace(i,".").toLowerCase()},c=a.data={},l=a.NATIVE="N",u=a.POLYFILL="P";n.exports=a},function(n,e,t){var r=t(9),o=t(70).EXISTS,i=t(1),a=t(13).f,s=Function.prototype,c=i(s.toString),l=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,u=i(l.exec);r&&!o&&a(s,"name",{configurable:!0,get:function(){try{return u(l,c(this))[1]}catch(n){return""}}})},function(n,e,t){var r=t(3),o=t(0).RegExp,i=r((function(){var n=o("a","y");return n.lastIndex=2,null!=n.exec("abcd")})),a=i||r((function(){return!o("a","y").sticky})),s=i||r((function(){var n=o("^r","gy");return n.lastIndex=2,null!=n.exec("str")}));n.exports={BROKEN_CARET:s,MISSED_STICKY:a,UNSUPPORTED_Y:i}},function(n,e,t){var r=t(0),o=t(101),i=r["__core-js_shared__"]||o("__core-js_shared__",{});n.exports=i},function(n,e,t){var r=t(0),o=Object.defineProperty;n.exports=function(n,e){try{o(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(45),o=t(3);n.exports=!!Object.getOwnPropertySymbols&&!o((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r=t(18),o=t(104),i=t(25),a=function(n){return function(e,t,a){var s,c=r(e),l=i(c),u=o(a,l);if(n&&t!=t){for(;l>u;)if((s=c[u++])!=s)return!0}else for(;l>u;u++)if((n||u in c)&&c[u]===t)return n||u||0;return!n&&-1}};n.exports={includes:a(!0),indexOf:a(!1)}},function(n,e,t){var r=t(56),o=Math.max,i=Math.min;n.exports=function(n,e){var t=r(n);return t<0?o(t+e,0):i(t,e)}},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(n){var e=o(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(10),o=t(147),i=t(37),a=t(13);n.exports=function(n,e,t){for(var s=o(e),c=a.f,l=i.f,u=0;u<s.length;u++){var p=s[u];r(n,p)||t&&r(t,p)||c(n,p,l(e,p))}}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(0),o=t(10),i=t(4),a=t(15),s=t(80),c=t(149),l=s("IE_PROTO"),u=r.Object,p=u.prototype;n.exports=c?u.getPrototypeOf:function(n){var e=a(n);if(o(e,l))return e[l];var t=e.constructor;return i(t)&&e instanceof t?t.prototype:e instanceof u?p:null}},function(n,e,t){var r=t(82),o=t(46),i=t(58),a=t(5)("iterator");n.exports=function(n){if(null!=n)return o(n,a)||o(n,"@@iterator")||i[r(n)]}},function(n,e,t){var r={};r[t(5)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(7),o=t(155),i=t(5)("species");n.exports=function(n,e){var t,a=r(n).constructor;return void 0===a||null==(t=r(a)[i])?e:o(t)}},function(n,e,t){var r=t(0),o=t(104),i=t(25),a=t(64),s=r.Array,c=Math.max;n.exports=function(n,e,t){for(var r=i(n),l=o(e,r),u=o(void 0===t?r:t,r),p=s(c(u-l,0)),d=0;l<u;l++,d++)a(p,d,n[l]);return p.length=d,p}},function(n,e,t){t(173)("iterator")},function(n,e,t){"use strict";t(19);var r=t(1),o=t(14),i=t(87),a=t(3),s=t(5),c=t(21),l=s("species"),u=RegExp.prototype;n.exports=function(n,e,t,p){var d=s(n),f=!a((function(){var e={};return e[d]=function(){return 7},7!=""[n](e)})),m=f&&!a((function(){var e=!1,t=/a/;return"split"===n&&((t={}).constructor={},t.constructor[l]=function(){return t},t.flags="",t[d]=/./[d]),t.exec=function(){return e=!0,null},t[d](""),!e}));if(!f||!m||t){var g=r(/./[d]),h=e(d,""[n],(function(n,e,t,o,a){var s=r(n),c=e.exec;return c===i||c===u.exec?f&&!a?{done:!0,value:g(e,t,o)}:{done:!0,value:s(t,e,o)}:{done:!1}}));o(String.prototype,n,h[0]),o(u,d,h[1])}p&&c(u[d],"sham",!0)}},function(n,e,t){"use strict";var r=t(162).charAt;n.exports=function(n,e,t){return e+(t?r(n,e).length:1)}},function(n,e,t){var r=t(0),o=t(11),i=t(7),a=t(4),s=t(20),c=t(87),l=r.TypeError;n.exports=function(n,e){var t=n.exec;if(a(t)){var r=o(t,n,e);return null!==r&&i(r),r}if("RegExp"===s(n))return o(c,n,e);throw l("RegExp#exec called on incompatible receiver")}},function(n,e,t){var r=t(264),o=t(44),i=Object.prototype,a=i.hasOwnProperty,s=i.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(n){return o(n)&&a.call(n,"callee")&&!s.call(n,"callee")};n.exports=c},function(n,e,t){var r=t(39)(t(28),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(284),o=t(291),i=t(293),a=t(294),s=t(295);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=s,n.exports=c},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(22),o=t(125),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!o(n))||(a.test(n)||!i.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(53),o=t(44);n.exports=function(n){return"symbol"==typeof n||o(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";var r=t(2),o=t(52).some;r({target:"Array",proto:!0,forced:!t(49)("some")},{some:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(2),o=t(1),i=t(103).indexOf,a=t(49),s=o([].indexOf),c=!!s&&1/s([1],1,-0)<0,l=a("indexOf");r({target:"Array",proto:!0,forced:c||!l},{indexOf:function(n){var e=arguments.length>1?arguments[1]:void 0;return c?s(this,n,e)||0:i(this,n,e)}})},function(n,e,t){var r=t(2),o=t(15),i=t(79);r({target:"Object",stat:!0,forced:t(3)((function(){i(1)}))},{keys:function(n){return i(o(n))}})},function(n,e,t){var r=t(2),o=t(9),i=t(13).f;r({target:"Object",stat:!0,forced:Object.defineProperty!==i,sham:!o},{defineProperty:i})},function(n,e,t){var r=t(5),o=t(32),i=t(13),a=r("unscopables"),s=Array.prototype;null==s[a]&&i.f(s,a,{configurable:!0,value:o(null)}),n.exports=function(n){s[a][n]=!0}},function(n,e,t){var r=t(9),o=t(141),i=t(13),a=t(7),s=t(18),c=t(79);e.f=r&&!o?Object.defineProperties:function(n,e){a(n);for(var t,r=s(e),o=c(e),l=o.length,u=0;l>u;)i.f(n,t=o[u++],r[t]);return n}},function(n,e,t){var r=t(8),o=t(20),i=t(5)("match");n.exports=function(n){var e;return r(n)&&(void 0!==(e=n[i])?!!e:"RegExp"==o(n))}},function(n,e,t){"use strict";var r=t(7);n.exports=function(){var n=r(this),e="";return n.global&&(e+="g"),n.ignoreCase&&(e+="i"),n.multiline&&(e+="m"),n.dotAll&&(e+="s"),n.unicode&&(e+="u"),n.sticky&&(e+="y"),e}},function(n,e,t){var r=t(4),o=t(8),i=t(60);n.exports=function(n,e,t){var a,s;return i&&r(a=e.constructor)&&a!==t&&o(s=a.prototype)&&s!==t.prototype&&i(n,s),n}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,i=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,c="object"==typeof self&&self&&self.Object===Object&&self,l=s||c||Function("return this")(),u=Object.prototype.toString,p=Math.max,d=Math.min,f=function(){return l.Date.now()};function m(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function g(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==u.call(n)}(n))return NaN;if(m(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=m(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=o.test(n);return s||i.test(n)?a(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,o,i,a,s,c,l=0,u=!1,h=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,i=o;return r=o=void 0,l=e,a=n.apply(i,t)}function y(n){return l=n,s=setTimeout(k,e),u?b(n):a}function x(n){var t=n-c;return void 0===c||t>=e||t<0||h&&n-l>=i}function k(){var n=f();if(x(n))return S(n);s=setTimeout(k,function(n){var t=e-(n-c);return h?d(t,i-(n-l)):t}(n))}function S(n){return s=void 0,v&&r?b(n):(r=o=void 0,a)}function w(){var n=f(),t=x(n);if(r=arguments,o=this,c=n,t){if(void 0===s)return y(c);if(h)return s=setTimeout(k,e),b(c)}return void 0===s&&(s=setTimeout(k,e)),a}return e=g(e)||0,m(t)&&(u=!!t.leading,i=(h="maxWait"in t)?p(g(t.maxWait)||0,e):i,v="trailing"in t?!!t.trailing:v),w.cancel=function(){void 0!==s&&clearTimeout(s),l=0,r=c=o=s=void 0},w.flush=function(){return void 0===s?a:S(f())},w}},function(n,e,t){"use strict";var r=t(1),o=t(70).PROPER,i=t(14),a=t(7),s=t(31),c=t(12),l=t(3),u=t(134),p=RegExp.prototype,d=p.toString,f=r(u),m=l((function(){return"/a/b"!=d.call({source:"a",flags:"b"})})),g=o&&"toString"!=d.name;(m||g)&&i(RegExp.prototype,"toString",(function(){var n=a(this),e=c(n.source),t=n.flags;return"/"+e+"/"+c(void 0===t&&s(p,n)&&!("flags"in p)?f(n):t)}),{unsafe:!0})},function(n,e,t){"use strict";var r=t(18),o=t(131),i=t(58),a=t(36),s=t(13).f,c=t(146),l=t(23),u=t(9),p=a.set,d=a.getterFor("Array Iterator");n.exports=c(Array,"Array",(function(n,e){p(this,{type:"Array Iterator",target:r(n),index:0,kind:e})}),(function(){var n=d(this),e=n.target,t=n.kind,r=n.index++;return!e||r>=e.length?(n.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:r,done:!1}:"values"==t?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values");var f=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!l&&u&&"values"!==f.name)try{s(f,"name",{value:"values"})}catch(n){}},function(n,e,t){var r=t(102);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(9),o=t(3);n.exports=r&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(9),o=t(3),i=t(75);n.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(0),o=t(11),i=t(8),a=t(77),s=t(46),c=t(225),l=t(5),u=r.TypeError,p=l("toPrimitive");n.exports=function(n,e){if(!i(n)||a(n))return n;var t,r=s(n,p);if(r){if(void 0===e&&(e="default"),t=o(r,n,e),!i(t)||a(t))return t;throw u("Can't convert object to primitive value")}return void 0===e&&(e="number"),c(n,e)}},function(n,e,t){var r=t(1),o=t(10),i=t(18),a=t(103).indexOf,s=t(57),c=r([].push);n.exports=function(n,e){var t,r=i(n),l=0,u=[];for(t in r)!o(s,t)&&o(r,t)&&c(u,t);for(;e.length>l;)o(r,t=e[l++])&&(~a(u,t)||c(u,t));return u}},function(n,e,t){var r=t(16);n.exports=r("document","documentElement")},function(n,e,t){"use strict";var r=t(2),o=t(11),i=t(23),a=t(70),s=t(4),c=t(227),l=t(109),u=t(60),p=t(59),d=t(21),f=t(14),m=t(5),g=t(58),h=t(148),v=a.PROPER,b=a.CONFIGURABLE,y=h.IteratorPrototype,x=h.BUGGY_SAFARI_ITERATORS,k=m("iterator"),S=function(){return this};n.exports=function(n,e,t,a,m,h,w){c(t,e,a);var C,_,E,A=function(n){if(n===m&&P)return P;if(!x&&n in j)return j[n];switch(n){case"keys":case"values":case"entries":return function(){return new t(this,n)}}return function(){return new t(this)}},I=e+" Iterator",T=!1,j=n.prototype,O=j[k]||j["@@iterator"]||m&&j[m],P=!x&&O||A(m),R="Array"==e&&j.entries||O;if(R&&(C=l(R.call(new n)))!==Object.prototype&&C.next&&(i||l(C)===y||(u?u(C,y):s(C[k])||f(C,k,S)),p(C,I,!0,!0),i&&(g[I]=S)),v&&"values"==m&&O&&"values"!==O.name&&(!i&&b?d(j,"name","values"):(T=!0,P=function(){return o(O,this)})),m)if(_={values:A("values"),keys:h?P:A("keys"),entries:A("entries")},w)for(E in _)(x||T||!(E in j))&&f(j,E,_[E]);else r({target:e,proto:!0,forced:x||T},_);return i&&!w||j[k]===P||f(j,k,P,{name:m}),g[e]=P,_}},function(n,e,t){var r=t(16),o=t(1),i=t(51),a=t(108),s=t(7),c=o([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=i.f(s(n)),t=a.f;return t?c(e,t(n)):e}},function(n,e,t){"use strict";var r,o,i,a=t(3),s=t(4),c=t(32),l=t(109),u=t(14),p=t(5),d=t(23),f=p("iterator"),m=!1;[].keys&&("next"in(i=[].keys())?(o=l(l(i)))!==Object.prototype&&(r=o):m=!0),null==r||a((function(){var n={};return r[f].call(n)!==n}))?r={}:d&&(r=c(r)),s(r[f])||u(r,f,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:m}},function(n,e,t){var r=t(3);n.exports=!r((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,e,t){var r=t(0);n.exports=r.Promise},function(n,e,t){var r=t(5),o=t(58),i=r("iterator"),a=Array.prototype;n.exports=function(n){return void 0!==n&&(o.Array===n||a[i]===n)}},function(n,e,t){var r=t(0),o=t(11),i=t(33),a=t(7),s=t(78),c=t(110),l=r.TypeError;n.exports=function(n,e){var t=arguments.length<2?c(n):e;if(i(t))return a(o(t,n));throw l(s(n)+" is not iterable")}},function(n,e,t){var r=t(11),o=t(7),i=t(46);n.exports=function(n,e,t){var a,s;o(n);try{if(!(a=i(n,"return"))){if("throw"===e)throw t;return t}a=r(a,n)}catch(n){s=!0,a=n}if("throw"===e)throw t;if(s)throw a;return o(a),t}},function(n,e,t){var r=t(5)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(n){}n.exports=function(n,e){if(!e&&!o)return!1;var t=!1;try{var i={};i[r]=function(){return{next:function(){return{done:t=!0}}}},n(i)}catch(n){}return t}},function(n,e,t){var r=t(0),o=t(83),i=t(78),a=r.TypeError;n.exports=function(n){if(o(n))return n;throw a(i(n)+" is not a constructor")}},function(n,e,t){var r,o,i,a,s=t(0),c=t(34),l=t(61),u=t(4),p=t(10),d=t(3),f=t(145),m=t(62),g=t(75),h=t(157),v=t(158),b=t(84),y=s.setImmediate,x=s.clearImmediate,k=s.process,S=s.Dispatch,w=s.Function,C=s.MessageChannel,_=s.String,E=0,A={};try{r=s.location}catch(n){}var I=function(n){if(p(A,n)){var e=A[n];delete A[n],e()}},T=function(n){return function(){I(n)}},j=function(n){I(n.data)},O=function(n){s.postMessage(_(n),r.protocol+"//"+r.host)};y&&x||(y=function(n){h(arguments.length,1);var e=u(n)?n:w(n),t=m(arguments,1);return A[++E]=function(){c(e,void 0,t)},o(E),E},x=function(n){delete A[n]},b?o=function(n){k.nextTick(T(n))}:S&&S.now?o=function(n){S.now(T(n))}:C&&!v?(a=(i=new C).port2,i.port1.onmessage=j,o=l(a.postMessage,a)):s.addEventListener&&u(s.postMessage)&&!s.importScripts&&r&&"file:"!==r.protocol&&!d(O)?(o=O,s.addEventListener("message",j,!1)):o="onreadystatechange"in g("script")?function(n){f.appendChild(g("script")).onreadystatechange=function(){f.removeChild(this),I(n)}}:function(n){setTimeout(T(n),0)}),n.exports={set:y,clear:x}},function(n,e,t){var r=t(0).TypeError;n.exports=function(n,e){if(n<e)throw r("Not enough arguments");return n}},function(n,e,t){var r=t(24);n.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},function(n,e,t){var r=t(7),o=t(8),i=t(160);n.exports=function(n,e){if(r(n),o(e)&&e.constructor===n)return e;var t=i.f(n);return(0,t.resolve)(e),t.promise}},function(n,e,t){"use strict";var r=t(33),o=function(n){var e,t;this.promise=new n((function(n,r){if(void 0!==e||void 0!==t)throw TypeError("Bad Promise constructor");e=n,t=r})),this.resolve=r(e),this.reject=r(t)};n.exports.f=function(n){return new o(n)}},function(n,e,t){var r=function(n){"use strict";var e=Object.prototype,t=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function s(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(n){s=function(n,e,t){return n[e]=t}}function c(n,e,t,r){var o=e&&e.prototype instanceof p?e:p,i=Object.create(o.prototype),a=new w(r||[]);return i._invoke=function(n,e,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return _()}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var s=x(a,t);if(s){if(s===u)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var c=l(n,e,t);if("normal"===c.type){if(r=t.done?"completed":"suspendedYield",c.arg===u)continue;return{value:c.arg,done:t.done}}"throw"===c.type&&(r="completed",t.method="throw",t.arg=c.arg)}}}(n,t,a),i}function l(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=c;var u={};function p(){}function d(){}function f(){}var m={};s(m,o,(function(){return this}));var g=Object.getPrototypeOf,h=g&&g(g(C([])));h&&h!==e&&t.call(h,o)&&(m=h);var v=f.prototype=p.prototype=Object.create(m);function b(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function y(n,e){var r;this._invoke=function(o,i){function a(){return new e((function(r,a){!function r(o,i,a,s){var c=l(n[o],n,i);if("throw"!==c.type){var u=c.arg,p=u.value;return p&&"object"==typeof p&&t.call(p,"__await")?e.resolve(p.__await).then((function(n){r("next",n,a,s)}),(function(n){r("throw",n,a,s)})):e.resolve(p).then((function(n){u.value=n,a(u)}),(function(n){return r("throw",n,a,s)}))}s(c.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function x(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,x(n,e),"throw"===e.method))return u;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=l(t,n.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,u;var o=r.arg;return o?o.done?(e[n.resultName]=o.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,u):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,u)}function k(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function S(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function w(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(k,this),this.reset(!0)}function C(n){if(n){var e=n[o];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,i=function e(){for(;++r<n.length;)if(t.call(n,r))return e.value=n[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:_}}function _(){return{value:void 0,done:!0}}return d.prototype=f,s(v,"constructor",f),s(f,"constructor",d),d.displayName=s(f,a,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===d||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,f):(n.__proto__=f,s(n,a,"GeneratorFunction")),n.prototype=Object.create(v),n},n.awrap=function(n){return{__await:n}},b(y.prototype),s(y.prototype,i,(function(){return this})),n.AsyncIterator=y,n.async=function(e,t,r,o,i){void 0===i&&(i=Promise);var a=new y(c(e,t,r,o),i);return n.isGeneratorFunction(t)?a:a.next().then((function(n){return n.done?n.value:a.next()}))},b(v),s(v,a,"Generator"),s(v,o,(function(){return this})),s(v,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=C,w.prototype={constructor:w,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function r(t,r){return a.type="throw",a.arg=n,e.next=t,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=t.call(i,"catchLoc"),c=t.call(i,"finallyLoc");if(s&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(n,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=n,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,u):this.complete(a)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),u},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),S(t),u}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var r=t.completion;if("throw"===r.type){var o=r.arg;S(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:C(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),u}},n}(n.exports);try{regeneratorRuntime=r}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(n,e,t){var r=t(1),o=t(56),i=t(12),a=t(17),s=r("".charAt),c=r("".charCodeAt),l=r("".slice),u=function(n){return function(e,t){var r,u,p=i(a(e)),d=o(t),f=p.length;return d<0||d>=f?n?"":void 0:(r=c(p,d))<55296||r>56319||d+1===f||(u=c(p,d+1))<56320||u>57343?n?s(p,d):r:n?l(p,d,d+2):u-56320+(r-55296<<10)+65536}};n.exports={codeAt:u(!1),charAt:u(!0)}},function(n,e){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(n,e,t){var r=t(75)("span").classList,o=r&&r.constructor&&r.constructor.prototype;n.exports=o===Object.prototype?void 0:o},function(n,e,t){var r=t(244);n.exports=function(n,e){return new(r(n))(0===e?0:e)}},function(n,e,t){var r=t(2),o=t(3),i=t(15),a=t(109),s=t(149);r({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!s},{getPrototypeOf:function(n){return a(i(n))}})},function(n,e,t){var r=t(0),o=t(133),i=r.TypeError;n.exports=function(n){if(o(n))throw i("The method doesn't accept regular expressions");return n}},function(n,e,t){var r=t(5)("match");n.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[r]=!1,"/./"[n](e)}catch(n){}}return!1}},function(n,e,t){"use strict";var r=t(52).forEach,o=t(49)("forEach");n.exports=o?[].forEach:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}},function(n,e,t){var r=t(3);n.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(n,e,t){var r=t(20),o=t(18),i=t(51).f,a=t(113),s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return s&&"Window"==r(n)?function(n){try{return i(n)}catch(n){return a(s)}}(n):i(o(n))}},function(n,e,t){var r=t(5);e.f=r},function(n,e,t){var r=t(252),o=t(10),i=t(172),a=t(13).f;n.exports=function(n){var e=r.Symbol||(r.Symbol={});o(e,n)||a(e,n,{value:i.f(n)})}},function(n,e,t){var r=t(2),o=t(253);r({target:"Array",stat:!0,forced:!t(154)((function(n){Array.from(n)}))},{from:o})},function(n,e,t){var r=t(12);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){t(2)({target:"Object",stat:!0,sham:!t(9)},{create:t(32)})},function(n,e,t){"use strict";var r=t(2),o=t(1),i=t(54),a=t(18),s=t(49),c=o([].join),l=i!=Object,u=s("join",",");r({target:"Array",proto:!0,forced:l||!u},{join:function(n){return c(a(this),void 0===n?",":n)}})},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,o=n.length;++t<r;)n[o+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(88),o=t(275),i=t(276),a=t(277),s=t(278),c=t(279);function l(n){var e=this.__data__=new r(n);this.size=e.size}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=s,l.prototype.set=c,n.exports=l},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(53),o=t(120);n.exports=function(n){if(!o(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(296),o=t(44);n.exports=function n(e,t,i,a,s){return e===t||(null==e||null==t||!o(e)&&!o(t)?e!=e&&t!=t:r(e,t,i,a,n,s))}},function(n,e,t){var r=t(186),o=t(299),i=t(187);n.exports=function(n,e,t,a,s,c){var l=1&t,u=n.length,p=e.length;if(u!=p&&!(l&&p>u))return!1;var d=c.get(n),f=c.get(e);if(d&&f)return d==e&&f==n;var m=-1,g=!0,h=2&t?new r:void 0;for(c.set(n,e),c.set(e,n);++m<u;){var v=n[m],b=e[m];if(a)var y=l?a(b,v,m,e,n,c):a(v,b,m,n,e,c);if(void 0!==y){if(y)continue;g=!1;break}if(h){if(!o(e,(function(n,e){if(!i(h,e)&&(v===n||s(v,n,t,a,c)))return h.push(e)}))){g=!1;break}}else if(v!==b&&!s(v,b,t,a,c)){g=!1;break}}return c.delete(n),c.delete(e),g}},function(n,e,t){var r=t(121),o=t(297),i=t(298);function a(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}a.prototype.add=a.prototype.push=o,a.prototype.has=i,n.exports=a},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(309),o=t(315),i=t(192);n.exports=function(n){return i(n)?r(n):o(n)}},function(n,e,t){(function(n){var r=t(28),o=t(311),i=e&&!e.nodeType&&e,a=i&&"object"==typeof n&&n&&!n.nodeType&&n,s=a&&a.exports===i?r.Buffer:void 0,c=(s?s.isBuffer:void 0)||o;n.exports=c}).call(this,t(136)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(312),o=t(313),i=t(314),a=i&&i.isTypedArray,s=a?o(a):r;n.exports=s},function(n,e,t){var r=t(182),o=t(123);n.exports=function(n){return null!=n&&o(n.length)&&!r(n)}},function(n,e,t){var r=t(39)(t(28),"Set");n.exports=r},function(n,e,t){var r=t(120);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(197),o=t(92);n.exports=function(n,e){for(var t=0,i=(e=r(e,n)).length;null!=n&&t<i;)n=n[o(e[t++])];return t&&t==i?n:void 0}},function(n,e,t){var r=t(22),o=t(124),i=t(326),a=t(329);n.exports=function(n,e){return r(n)?n:o(n,e)?[n]:i(a(n))}},function(n,e,t){var r=t(1),o=t(14),i=Date.prototype,a=r(i.toString),s=r(i.getTime);"Invalid Date"!=String(new Date(NaN))&&o(i,"toString",(function(){var n=s(this);return n==n?a(this):"Invalid Date"}))},function(n,e,t){"use strict";var r=t(2),o=t(359).start;r({target:"String",proto:!0,forced:t(361)},{padStart:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){},function(n,e,t){},function(n,e,t){t(2)({target:"Object",stat:!0},{setPrototypeOf:t(60)})},function(n,e,t){var r=t(2),o=t(16),i=t(34),a=t(371),s=t(155),c=t(7),l=t(8),u=t(32),p=t(3),d=o("Reflect","construct"),f=Object.prototype,m=[].push,g=p((function(){function n(){}return!(d((function(){}),[],n)instanceof n)})),h=!p((function(){d((function(){}))})),v=g||h;r({target:"Reflect",stat:!0,forced:v,sham:v},{construct:function(n,e){s(n),c(e);var t=arguments.length<3?n:s(arguments[2]);if(h&&!g)return d(n,e,t);if(n==t){switch(e.length){case 0:return new n;case 1:return new n(e[0]);case 2:return new n(e[0],e[1]);case 3:return new n(e[0],e[1],e[2]);case 4:return new n(e[0],e[1],e[2],e[3])}var r=[null];return i(m,r,e),new(i(a,n,r))}var o=t.prototype,p=u(l(o)?o:f),v=i(n,p,e);return l(v)?v:p}})},function(n,e,t){var r=t(2),o=t(0),i=t(59);r({global:!0},{Reflect:{}}),i(o.Reflect,"Reflect",!0)},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(262),o=t(267),i=t(338),a=t(346),s=t(355),c=t(222),l=i((function(n){var e=c(n);return s(e)&&(e=void 0),a(r(n,1,s,!0),o(e,2))}));n.exports=l},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,o=r.exec(t);if(!o)return t;var i="",a=0,s=0;for(a=o.index;a<t.length;a++){switch(t.charCodeAt(a)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==a&&(i+=t.substring(s,a)),s=a+1,i+=e}return s!==a?i+t.substring(s,a):i}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},o=(t(362),t(29)),i=Object(o.a)(r,(function(){var n=this.$createElement;return(this._self._c||n)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=i.exports},function(n,e,t){"use strict";t.r(e);t(41),t(6),t(42),t(43),t(30);var r={name:"CodeGroup",data:function(){return{codeTabs:[],activeCodeTabIndex:-1}},watch:{activeCodeTabIndex:function(n){this.codeTabs.forEach((function(n){n.elm.classList.remove("theme-code-block__active")})),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted:function(){var n=this;this.codeTabs=(this.$slots.default||[]).filter((function(n){return Boolean(n.componentOptions)})).map((function(e,t){return""===e.componentOptions.propsData.active&&(n.activeCodeTabIndex=t),{title:e.componentOptions.propsData.title,elm:e.elm}})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab:function(n){this.activeCodeTabIndex=n}}},o=(t(363),t(29)),i=Object(o.a)(r,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"theme-code-group"},[t("div",{staticClass:"theme-code-group__nav"},[t("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(e,r){return t("li",{key:e.title,staticClass:"theme-code-group__li"},[t("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(e.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?t("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=i.exports},function(n,e,t){"use strict";var r=t(9),o=t(0),i=t(1),a=t(97),s=t(14),c=t(10),l=t(135),u=t(31),p=t(77),d=t(143),f=t(3),m=t(51).f,g=t(37).f,h=t(13).f,v=t(358),b=t(215).trim,y=o.Number,x=y.prototype,k=o.TypeError,S=i("".slice),w=i("".charCodeAt),C=function(n){var e=d(n,"number");return"bigint"==typeof e?e:_(e)},_=function(n){var e,t,r,o,i,a,s,c,l=d(n,"number");if(p(l))throw k("Cannot convert a Symbol value to a number");if("string"==typeof l&&l.length>2)if(l=b(l),43===(e=w(l,0))||45===e){if(88===(t=w(l,2))||120===t)return NaN}else if(48===e){switch(w(l,1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+l}for(a=(i=S(l,2)).length,s=0;s<a;s++)if((c=w(i,s))<48||c>o)return NaN;return parseInt(i,r)}return+l};if(a("Number",!y(" 0o1")||!y("0b1")||y("+0x1"))){for(var E,A=function(n){var e=arguments.length<1?0:y(C(n)),t=this;return u(x,t)&&f((function(){v(t)}))?l(Object(e),t,A):e},I=r?m(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),T=0;I.length>T;T++)c(y,E=I[T])&&!c(A,E)&&h(A,E,g(y,E));A.prototype=x,x.constructor=A,s(o,"Number",A)}},function(n,e,t){"use strict";var r=t(11),o=t(115),i=t(7),a=t(47),s=t(12),c=t(17),l=t(46),u=t(116),p=t(117);o("match",(function(n,e,t){return[function(e){var t=c(this),o=null==e?void 0:l(e,n);return o?r(o,e,t):new RegExp(e)[n](s(t))},function(n){var r=i(this),o=s(n),c=t(e,r,o);if(c.done)return c.value;if(!r.global)return p(r,o);var l=r.unicode;r.lastIndex=0;for(var d,f=[],m=0;null!==(d=p(r,o));){var g=s(d[0]);f[m]=g,""===g&&(r.lastIndex=u(o,a(r.lastIndex),l)),m++}return 0===m?null:f}]}))},function(n,e,t){"use strict";var r=t(34),o=t(11),i=t(1),a=t(115),s=t(133),c=t(7),l=t(17),u=t(112),p=t(116),d=t(47),f=t(12),m=t(46),g=t(113),h=t(117),v=t(87),b=t(99),y=t(3),x=b.UNSUPPORTED_Y,k=Math.min,S=[].push,w=i(/./.exec),C=i(S),_=i("".slice);a("split",(function(n,e,t){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(n,t){var i=f(l(this)),a=void 0===t?4294967295:t>>>0;if(0===a)return[];if(void 0===n)return[i];if(!s(n))return o(e,i,n,a);for(var c,u,p,d=[],m=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(n.sticky?"y":""),h=0,b=new RegExp(n.source,m+"g");(c=o(v,b,i))&&!((u=b.lastIndex)>h&&(C(d,_(i,h,c.index)),c.length>1&&c.index<i.length&&r(S,d,g(c,1)),p=c[0].length,h=u,d.length>=a));)b.lastIndex===c.index&&b.lastIndex++;return h===i.length?!p&&w(b,"")||C(d,""):C(d,_(i,h)),d.length>a?g(d,0,a):d}:"0".split(void 0,0).length?function(n,t){return void 0===n&&0===t?[]:o(e,this,n,t)}:e,[function(e,t){var r=l(this),a=null==e?void 0:m(e,n);return a?o(a,e,r,t):o(i,f(r),e,t)},function(n,r){var o=c(this),a=f(n),s=t(i,o,a,r,i!==e);if(s.done)return s.value;var l=u(o,RegExp),m=o.unicode,g=(o.ignoreCase?"i":"")+(o.multiline?"m":"")+(o.unicode?"u":"")+(x?"g":"y"),v=new l(x?"^(?:"+o.source+")":o,g),b=void 0===r?4294967295:r>>>0;if(0===b)return[];if(0===a.length)return null===h(v,a)?[a]:[];for(var y=0,S=0,w=[];S<a.length;){v.lastIndex=x?0:S;var E,A=h(v,x?_(a,S):a);if(null===A||(E=k(d(v.lastIndex+(x?S:0)),a.length))===y)S=p(a,S,m);else{if(C(w,_(a,y,S)),w.length===b)return w;for(var I=1;I<=A.length-1;I++)if(C(w,A[I]),w.length===b)return w;S=y=E}}return C(w,_(a,y)),w}]}),!!y((function(){var n=/(?:)/,e=n.exec;n.exec=function(){return e.apply(this,arguments)};var t="ab".split(n);return 2!==t.length||"a"!==t[0]||"b"!==t[1]})),x)},function(n,e,t){var r=t(3),o=t(0).RegExp;n.exports=r((function(){var n=o(".","s");return!(n.dotAll&&n.exec("\n")&&"s"===n.flags)}))},function(n,e,t){var r=t(1),o=t(17),i=t(12),a=t(216),s=r("".replace),c="["+a+"]",l=RegExp("^"+c+c+"*"),u=RegExp(c+c+"*$"),p=function(n){return function(e){var t=i(o(e));return 1&n&&(t=s(t,l,"")),2&n&&(t=s(t,u,"")),t}};n.exports={start:p(1),end:p(2),trim:p(3)}},function(n,e){n.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(n,e,t){"use strict";var r=t(16),o=t(13),i=t(5),a=t(9),s=i("species");n.exports=function(n){var e=r(n),t=o.f;a&&e&&!e[s]&&t(e,s,{configurable:!0,get:function(){return this}})}},function(n,e,t){var r=t(2),o=t(9),i=t(147),a=t(18),s=t(37),c=t(64);r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(n){for(var e,t,r=a(n),o=s.f,l=i(r),u={},p=0;l.length>p;)void 0!==(t=o(r,e=l[p++]))&&c(u,e,t);return u}})},function(n,e,t){var r=t(3),o=t(0).RegExp;n.exports=r((function(){var n=o("(?<a>b)","g");return"b"!==n.exec("b").groups.a||"bc"!=="b".replace(n,"$<a>c")}))},function(n,e,t){"use strict";var r=t(2),o=t(103).includes,i=t(131);r({target:"Array",proto:!0},{includes:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(n,e,t){"use strict";var r=t(2),o=t(1),i=t(167),a=t(17),s=t(12),c=t(168),l=o("".indexOf);r({target:"String",proto:!0,forced:!c("includes")},{includes:function(n){return!!~l(s(a(this)),s(i(n)),arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){var r=t(0),o=t(9),i=t(99).MISSED_STICKY,a=t(20),s=t(13).f,c=t(36).get,l=RegExp.prototype,u=r.TypeError;o&&i&&s(l,"sticky",{configurable:!0,get:function(){if(this!==l){if("RegExp"===a(this))return!!c(this).sticky;throw u("Incompatible receiver, RegExp required")}}})},function(n,e,t){n.exports=t(374)},function(n,e,t){var r=t(0),o=t(11),i=t(4),a=t(8),s=r.TypeError;n.exports=function(n,e){var t,r;if("string"===e&&i(t=n.toString)&&!a(r=o(t,n)))return r;if(i(t=n.valueOf)&&!a(r=o(t,n)))return r;if("string"!==e&&i(t=n.toString)&&!a(r=o(t,n)))return r;throw s("Can't convert object to primitive value")}},function(n,e,t){var r=t(0),o=t(4),i=t(81),a=r.WeakMap;n.exports=o(a)&&/native code/.test(i(a))},function(n,e,t){"use strict";var r=t(148).IteratorPrototype,o=t(32),i=t(48),a=t(59),s=t(58),c=function(){return this};n.exports=function(n,e,t,l){var u=e+" Iterator";return n.prototype=o(r,{next:i(+!l,t)}),a(n,u,!1,!0),s[u]=c,n}},function(n,e,t){var r=t(0),o=t(4),i=r.String,a=r.TypeError;n.exports=function(n){if("object"==typeof n||o(n))return n;throw a("Can't set "+i(n)+" as a prototype")}},function(n,e,t){"use strict";var r,o,i,a,s=t(2),c=t(23),l=t(0),u=t(16),p=t(11),d=t(150),f=t(14),m=t(230),g=t(60),h=t(59),v=t(217),b=t(33),y=t(4),x=t(8),k=t(231),S=t(81),w=t(232),C=t(154),_=t(112),E=t(156).set,A=t(233),I=t(159),T=t(236),j=t(160),O=t(237),P=t(238),R=t(36),L=t(97),q=t(5),F=t(239),M=t(84),D=t(45),$=q("species"),z="Promise",B=R.getterFor(z),N=R.set,H=R.getterFor(z),U=d&&d.prototype,V=d,J=U,W=l.TypeError,G=l.document,K=l.process,Z=j.f,X=Z,Y=!!(G&&G.createEvent&&l.dispatchEvent),Q=y(l.PromiseRejectionEvent),nn=!1,en=L(z,(function(){var n=S(V),e=n!==String(V);if(!e&&66===D)return!0;if(c&&!J.finally)return!0;if(D>=51&&/native code/.test(n))return!1;var t=new V((function(n){n(1)})),r=function(n){n((function(){}),(function(){}))};return(t.constructor={})[$]=r,!(nn=t.then((function(){}))instanceof r)||!e&&F&&!Q})),tn=en||!C((function(n){V.all(n).catch((function(){}))})),rn=function(n){var e;return!(!x(n)||!y(e=n.then))&&e},on=function(n,e){var t,r,o,i=e.value,a=1==e.state,s=a?n.ok:n.fail,c=n.resolve,l=n.reject,u=n.domain;try{s?(a||(2===e.rejection&&un(e),e.rejection=1),!0===s?t=i:(u&&u.enter(),t=s(i),u&&(u.exit(),o=!0)),t===n.promise?l(W("Promise-chain cycle")):(r=rn(t))?p(r,t,c,l):c(t)):l(i)}catch(n){u&&!o&&u.exit(),l(n)}},an=function(n,e){n.notified||(n.notified=!0,A((function(){for(var t,r=n.reactions;t=r.get();)on(t,n);n.notified=!1,e&&!n.rejection&&cn(n)})))},sn=function(n,e,t){var r,o;Y?((r=G.createEvent("Event")).promise=e,r.reason=t,r.initEvent(n,!1,!0),l.dispatchEvent(r)):r={promise:e,reason:t},!Q&&(o=l["on"+n])?o(r):"unhandledrejection"===n&&T("Unhandled promise rejection",t)},cn=function(n){p(E,l,(function(){var e,t=n.facade,r=n.value;if(ln(n)&&(e=O((function(){M?K.emit("unhandledRejection",r,t):sn("unhandledrejection",t,r)})),n.rejection=M||ln(n)?2:1,e.error))throw e.value}))},ln=function(n){return 1!==n.rejection&&!n.parent},un=function(n){p(E,l,(function(){var e=n.facade;M?K.emit("rejectionHandled",e):sn("rejectionhandled",e,n.value)}))},pn=function(n,e,t){return function(r){n(e,r,t)}},dn=function(n,e,t){n.done||(n.done=!0,t&&(n=t),n.value=e,n.state=2,an(n,!0))},fn=function(n,e,t){if(!n.done){n.done=!0,t&&(n=t);try{if(n.facade===e)throw W("Promise can't be resolved itself");var r=rn(e);r?A((function(){var t={done:!1};try{p(r,e,pn(fn,t,n),pn(dn,t,n))}catch(e){dn(t,e,n)}})):(n.value=e,n.state=1,an(n,!1))}catch(e){dn({done:!1},e,n)}}};if(en&&(J=(V=function(n){k(this,J),b(n),p(r,this);var e=B(this);try{n(pn(fn,e),pn(dn,e))}catch(n){dn(e,n)}}).prototype,(r=function(n){N(this,{type:z,done:!1,notified:!1,parent:!1,reactions:new P,rejection:!1,state:0,value:void 0})}).prototype=m(J,{then:function(n,e){var t=H(this),r=Z(_(this,V));return t.parent=!0,r.ok=!y(n)||n,r.fail=y(e)&&e,r.domain=M?K.domain:void 0,0==t.state?t.reactions.add(r):A((function(){on(r,t)})),r.promise},catch:function(n){return this.then(void 0,n)}}),o=function(){var n=new r,e=B(n);this.promise=n,this.resolve=pn(fn,e),this.reject=pn(dn,e)},j.f=Z=function(n){return n===V||n===i?new o(n):X(n)},!c&&y(d)&&U!==Object.prototype)){a=U.then,nn||(f(U,"then",(function(n,e){var t=this;return new V((function(n,e){p(a,t,n,e)})).then(n,e)}),{unsafe:!0}),f(U,"catch",J.catch,{unsafe:!0}));try{delete U.constructor}catch(n){}g&&g(U,J)}s({global:!0,wrap:!0,forced:en},{Promise:V}),h(V,z,!1,!0),v(z),i=u(z),s({target:z,stat:!0,forced:en},{reject:function(n){var e=Z(this);return p(e.reject,void 0,n),e.promise}}),s({target:z,stat:!0,forced:c||en},{resolve:function(n){return I(c&&this===i?V:this,n)}}),s({target:z,stat:!0,forced:tn},{all:function(n){var e=this,t=Z(e),r=t.resolve,o=t.reject,i=O((function(){var t=b(e.resolve),i=[],a=0,s=1;w(n,(function(n){var c=a++,l=!1;s++,p(t,e,n).then((function(n){l||(l=!0,i[c]=n,--s||r(i))}),o)})),--s||r(i)}));return i.error&&o(i.value),t.promise},race:function(n){var e=this,t=Z(e),r=t.reject,o=O((function(){var o=b(e.resolve);w(n,(function(n){p(o,e,n).then(t.resolve,r)}))}));return o.error&&r(o.value),t.promise}})},function(n,e,t){var r=t(14);n.exports=function(n,e,t){for(var o in e)r(n,o,e[o],t);return n}},function(n,e,t){var r=t(0),o=t(31),i=r.TypeError;n.exports=function(n,e){if(o(e,n))return n;throw i("Incorrect invocation")}},function(n,e,t){var r=t(0),o=t(61),i=t(11),a=t(7),s=t(78),c=t(151),l=t(25),u=t(31),p=t(152),d=t(110),f=t(153),m=r.TypeError,g=function(n,e){this.stopped=n,this.result=e},h=g.prototype;n.exports=function(n,e,t){var r,v,b,y,x,k,S,w=t&&t.that,C=!(!t||!t.AS_ENTRIES),_=!(!t||!t.IS_ITERATOR),E=!(!t||!t.INTERRUPTED),A=o(e,w),I=function(n){return r&&f(r,"normal",n),new g(!0,n)},T=function(n){return C?(a(n),E?A(n[0],n[1],I):A(n[0],n[1])):E?A(n,I):A(n)};if(_)r=n;else{if(!(v=d(n)))throw m(s(n)+" is not iterable");if(c(v)){for(b=0,y=l(n);y>b;b++)if((x=T(n[b]))&&u(h,x))return x;return new g(!1)}r=p(n,v)}for(k=r.next;!(S=i(k,r)).done;){try{x=T(S.value)}catch(n){f(r,"throw",n)}if("object"==typeof x&&x&&u(h,x))return x}return new g(!1)}},function(n,e,t){var r,o,i,a,s,c,l,u,p=t(0),d=t(61),f=t(37).f,m=t(156).set,g=t(158),h=t(234),v=t(235),b=t(84),y=p.MutationObserver||p.WebKitMutationObserver,x=p.document,k=p.process,S=p.Promise,w=f(p,"queueMicrotask"),C=w&&w.value;C||(r=function(){var n,e;for(b&&(n=k.domain)&&n.exit();o;){e=o.fn,o=o.next;try{e()}catch(n){throw o?a():i=void 0,n}}i=void 0,n&&n.enter()},g||b||v||!y||!x?!h&&S&&S.resolve?((l=S.resolve(void 0)).constructor=S,u=d(l.then,l),a=function(){u(r)}):b?a=function(){k.nextTick(r)}:(m=d(m,p),a=function(){m(r)}):(s=!0,c=x.createTextNode(""),new y(r).observe(c,{characterData:!0}),a=function(){c.data=s=!s})),n.exports=C||function(n){var e={fn:n,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},function(n,e,t){var r=t(24),o=t(0);n.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==o.Pebble},function(n,e,t){var r=t(24);n.exports=/web0s(?!.*chrome)/i.test(r)},function(n,e,t){var r=t(0);n.exports=function(n,e){var t=r.console;t&&t.error&&(1==arguments.length?t.error(n):t.error(n,e))}},function(n,e){n.exports=function(n){try{return{error:!1,value:n()}}catch(n){return{error:!0,value:n}}}},function(n,e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(n){var e={item:n,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var n=this.head;if(n)return this.head=n.next,this.tail===n&&(this.tail=null),n.item}},n.exports=t},function(n,e){n.exports="object"==typeof window},function(n,e,t){var r=t(2),o=t(241);r({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},function(n,e,t){"use strict";var r=t(9),o=t(1),i=t(11),a=t(3),s=t(79),c=t(108),l=t(106),u=t(15),p=t(54),d=Object.assign,f=Object.defineProperty,m=o([].concat);n.exports=!d||a((function(){if(r&&1!==d({b:1},d(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var n={},e={},t=Symbol();return n[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(n){e[n]=n})),7!=d({},n)[t]||"abcdefghijklmnopqrst"!=s(d({},e)).join("")}))?function(n,e){for(var t=u(n),o=arguments.length,a=1,d=c.f,f=l.f;o>a;)for(var g,h=p(arguments[a++]),v=d?m(s(h),d(h)):s(h),b=v.length,y=0;b>y;)g=v[y++],r&&!i(f,h,g)||(t[g]=h[g]);return t}:d},function(n,e,t){"use strict";var r=t(2),o=t(23),i=t(150),a=t(3),s=t(16),c=t(4),l=t(112),u=t(159),p=t(14);if(r({target:"Promise",proto:!0,real:!0,forced:!!i&&a((function(){i.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(n){var e=l(this,s("Promise")),t=c(n);return this.then(t?function(t){return u(e,n()).then((function(){return t}))}:n,t?function(t){return u(e,n()).then((function(){throw t}))}:n)}}),!o&&c(i)){var d=s("Promise").prototype.finally;i.prototype.finally!==d&&p(i.prototype,"finally",d,{unsafe:!0})}},function(n,e,t){"use strict";var r=t(111),o=t(82);n.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(n,e,t){var r=t(0),o=t(63),i=t(83),a=t(8),s=t(5)("species"),c=r.Array;n.exports=function(n){var e;return o(n)&&(e=n.constructor,(i(e)&&(e===c||o(e.prototype))||a(e)&&null===(e=e[s]))&&(e=void 0)),void 0===e?c:e}},function(n,e,t){"use strict";var r=t(2),o=t(246).left,i=t(49),a=t(45),s=t(84);r({target:"Array",proto:!0,forced:!i("reduce")||!s&&a>79&&a<83},{reduce:function(n){var e=arguments.length;return o(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(0),o=t(33),i=t(15),a=t(54),s=t(25),c=r.TypeError,l=function(n){return function(e,t,r,l){o(t);var u=i(e),p=a(u),d=s(u),f=n?d-1:0,m=n?-1:1;if(r<2)for(;;){if(f in p){l=p[f],f+=m;break}if(f+=m,n?f<0:d<=f)throw c("Reduce of empty array with no initial value")}for(;n?f>=0:d>f;f+=m)f in p&&(l=t(l,p[f],f,u));return l}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var r,o=t(2),i=t(1),a=t(37).f,s=t(47),c=t(12),l=t(167),u=t(17),p=t(168),d=t(23),f=i("".startsWith),m=i("".slice),g=Math.min,h=p("startsWith");o({target:"String",proto:!0,forced:!!(d||h||(r=a(String.prototype,"startsWith"),!r||r.writable))&&!h},{startsWith:function(n){var e=c(u(this));l(n);var t=s(g(arguments.length>1?arguments[1]:void 0,e.length)),r=c(n);return f?f(e,r,t):m(e,t,t+r.length)===r}})},function(n,e,t){var r=t(2),o=t(170),i=t(3),a=t(8),s=t(249).onFreeze,c=Object.freeze;r({target:"Object",stat:!0,forced:i((function(){c(1)})),sham:!o},{freeze:function(n){return c&&a(n)?c(s(n)):n}})},function(n,e,t){var r=t(2),o=t(1),i=t(57),a=t(8),s=t(10),c=t(13).f,l=t(51),u=t(171),p=t(250),d=t(74),f=t(170),m=!1,g=d("meta"),h=0,v=function(n){c(n,g,{value:{objectID:"O"+h++,weakData:{}}})},b=n.exports={enable:function(){b.enable=function(){},m=!0;var n=l.f,e=o([].splice),t={};t[g]=1,n(t).length&&(l.f=function(t){for(var r=n(t),o=0,i=r.length;o<i;o++)if(r[o]===g){e(r,o,1);break}return r},r({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:u.f}))},fastKey:function(n,e){if(!a(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!s(n,g)){if(!p(n))return"F";if(!e)return"E";v(n)}return n[g].objectID},getWeakData:function(n,e){if(!s(n,g)){if(!p(n))return!0;if(!e)return!1;v(n)}return n[g].weakData},onFreeze:function(n){return f&&m&&p(n)&&!s(n,g)&&v(n),n}};i[g]=!0},function(n,e,t){var r=t(3),o=t(8),i=t(20),a=t(251),s=Object.isExtensible,c=r((function(){s(1)}));n.exports=c||a?function(n){return!!o(n)&&((!a||"ArrayBuffer"!=i(n))&&(!s||s(n)))}:s},function(n,e,t){var r=t(3);n.exports=r((function(){if("function"==typeof ArrayBuffer){var n=new ArrayBuffer(8);Object.isExtensible(n)&&Object.defineProperty(n,"a",{value:8})}}))},function(n,e,t){var r=t(0);n.exports=r},function(n,e,t){"use strict";var r=t(0),o=t(61),i=t(11),a=t(15),s=t(254),c=t(151),l=t(83),u=t(25),p=t(64),d=t(152),f=t(110),m=r.Array;n.exports=function(n){var e=a(n),t=l(this),r=arguments.length,g=r>1?arguments[1]:void 0,h=void 0!==g;h&&(g=o(g,r>2?arguments[2]:void 0));var v,b,y,x,k,S,w=f(e),C=0;if(!w||this==m&&c(w))for(v=u(e),b=t?new this(v):m(v);v>C;C++)S=h?g(e[C],C):e[C],p(b,C,S);else for(k=(x=d(e,w)).next,b=t?new this:[];!(y=i(k,x)).done;C++)S=h?s(x,g,[y.value,C],!0):y.value,p(b,C,S);return b.length=C,b}},function(n,e,t){var r=t(7),o=t(153);n.exports=function(n,e,t,i){try{return i?e(r(t)[0],t[1]):e(t)}catch(e){o(n,"throw",e)}}},function(n,e,t){"use strict";var r=t(16),o=t(10),i=t(21),a=t(31),s=t(60),c=t(107),l=t(135),u=t(175),p=t(256),d=t(257),f=t(258),m=t(23);n.exports=function(n,e,t,g){var h=g?2:1,v=n.split("."),b=v[v.length-1],y=r.apply(null,v);if(y){var x=y.prototype;if(!m&&o(x,"cause")&&delete x.cause,!t)return y;var k=r("Error"),S=e((function(n,e){var t=u(g?e:n,void 0),r=g?new y(n):new y;return void 0!==t&&i(r,"message",t),f&&i(r,"stack",d(r.stack,2)),this&&a(x,this)&&l(r,this,S),arguments.length>h&&p(r,arguments[h]),r}));if(S.prototype=x,"Error"!==b&&(s?s(S,k):c(S,k,{name:!0})),c(S,y),!m)try{x.name!==b&&i(x,"name",b),x.constructor=S}catch(n){}return S}}},function(n,e,t){var r=t(8),o=t(21);n.exports=function(n,e){r(e)&&"cause"in e&&o(n,"cause",e.cause)}},function(n,e,t){var r=t(1)("".replace),o=String(Error("zxcasd").stack),i=/\n\s*at [^:]*:[^\n]*/,a=i.test(o);n.exports=function(n,e){if(a&&"string"==typeof n)for(;e--;)n=r(n,i,"");return n}},function(n,e,t){var r=t(3),o=t(48);n.exports=!r((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",o(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var r=t(9),o=t(3),i=t(7),a=t(32),s=t(175),c=Error.prototype.toString,l=o((function(){if(r){var n=a(Object.defineProperty({},"name",{get:function(){return this===n}}));if("true"!==c.call(n))return!0}return"2: 1"!==c.call({message:1,name:2})||"Error"!==c.call({})}));n.exports=l?function(){var n=i(this),e=s(n.name,"Error"),t=s(n.message);return e?t?e+": "+t:e:t}:c},function(n,e,t){var r=t(1),o=t(15),i=Math.floor,a=r("".charAt),s=r("".replace),c=r("".slice),l=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,u=/\$([$&'`]|\d{1,2})/g;n.exports=function(n,e,t,r,p,d){var f=t+n.length,m=r.length,g=u;return void 0!==p&&(p=o(p),g=l),s(d,g,(function(o,s){var l;switch(a(s,0)){case"$":return"$";case"&":return n;case"`":return c(e,0,t);case"'":return c(e,f);case"<":l=p[c(s,1,-1)];break;default:var u=+s;if(0===u)return o;if(u>m){var d=i(u/10);return 0===d?o:d<=m?void 0===r[d-1]?a(s,1):r[d-1]+a(s,1):o}l=r[u-1]}return void 0===l?"":l}))}},function(n,e,t){var r=t(2),o=t(0),i=t(16),a=t(34),s=t(1),c=t(3),l=o.Array,u=i("JSON","stringify"),p=s(/./.exec),d=s("".charAt),f=s("".charCodeAt),m=s("".replace),g=s(1..toString),h=/[\uD800-\uDFFF]/g,v=/^[\uD800-\uDBFF]$/,b=/^[\uDC00-\uDFFF]$/,y=function(n,e,t){var r=d(t,e-1),o=d(t,e+1);return p(v,n)&&!p(b,o)||p(b,n)&&!p(v,r)?"\\u"+g(f(n,0),16):n},x=c((function(){return'"\\udf06\\ud834"'!==u("\udf06\ud834")||'"\\udead"'!==u("\udead")}));u&&r({target:"JSON",stat:!0,forced:x},{stringify:function(n,e,t){for(var r=0,o=arguments.length,i=l(o);r<o;r++)i[r]=arguments[r];var s=a(u,null,i);return"string"==typeof s?m(s,h,y):s}})},function(n,e,t){var r=t(178),o=t(263);n.exports=function n(e,t,i,a,s){var c=-1,l=e.length;for(i||(i=o),s||(s=[]);++c<l;){var u=e[c];t>0&&i(u)?t>1?n(u,t-1,i,a,s):r(s,u):a||(s[s.length]=u)}return s}},function(n,e,t){var r=t(65),o=t(118),i=t(22),a=r?r.isConcatSpreadable:void 0;n.exports=function(n){return i(n)||o(n)||!!(a&&n&&n[a])}},function(n,e,t){var r=t(53),o=t(44);n.exports=function(n){return o(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(65),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=i.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var o=a.call(n);return r&&(e?n[s]=t:delete n[s]),o}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(268),o=t(324),i=t(126),a=t(22),s=t(335);n.exports=function(n){return"function"==typeof n?n:null==n?i:"object"==typeof n?a(n)?o(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(269),o=t(323),i=t(195);n.exports=function(n){var e=o(n);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(180),o=t(184);n.exports=function(n,e,t,i){var a=t.length,s=a,c=!i;if(null==n)return!s;for(n=Object(n);a--;){var l=t[a];if(c&&l[2]?l[1]!==n[l[0]]:!(l[0]in n))return!1}for(;++a<s;){var u=(l=t[a])[0],p=n[u],d=l[1];if(c&&l[2]){if(void 0===p&&!(u in n))return!1}else{var f=new r;if(i)var m=i(p,d,u,n,e,f);if(!(void 0===m?o(d,p,3,i,f):m))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(89),o=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():o.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(89);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(89);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(89);n.exports=function(n,e){var t=this.__data__,o=r(t,n);return o<0?(++this.size,t.push([n,e])):t[o][1]=e,this}},function(n,e,t){var r=t(88);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(88),o=t(119),i=t(121);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var a=t.__data__;if(!o||a.length<199)return a.push([n,e]),this.size=++t.size,this;t=this.__data__=new i(a)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(182),o=t(281),i=t(120),a=t(183),s=/^\[object .+?Constructor\]$/,c=Function.prototype,l=Object.prototype,u=c.toString,p=l.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!i(n)||o(n))&&(r(n)?d:s).test(a(n))}},function(n,e,t){var r,o=t(282),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!i&&i in n}},function(n,e,t){var r=t(28)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(285),o=t(88),i=t(119);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(n,e,t){var r=t(286),o=t(287),i=t(288),a=t(289),s=t(290);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(90);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(90),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return o.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(90),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:o.call(e,n)}},function(n,e,t){var r=t(90);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(91);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(91);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(91);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(91);n.exports=function(n,e){var t=r(this,n),o=t.size;return t.set(n,e),this.size+=t.size==o?0:1,this}},function(n,e,t){var r=t(180),o=t(185),i=t(300),a=t(303),s=t(319),c=t(22),l=t(189),u=t(191),p="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,f,m,g){var h=c(n),v=c(e),b=h?"[object Array]":s(n),y=v?"[object Array]":s(e),x=(b="[object Arguments]"==b?p:b)==p,k=(y="[object Arguments]"==y?p:y)==p,S=b==y;if(S&&l(n)){if(!l(e))return!1;h=!0,x=!1}if(S&&!x)return g||(g=new r),h||u(n)?o(n,e,t,f,m,g):i(n,e,b,t,f,m,g);if(!(1&t)){var w=x&&d.call(n,"__wrapped__"),C=k&&d.call(e,"__wrapped__");if(w||C){var _=w?n.value():n,E=C?e.value():e;return g||(g=new r),m(_,E,t,f,g)}}return!!S&&(g||(g=new r),a(n,e,t,f,m,g))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(65),o=t(301),i=t(181),a=t(185),s=t(302),c=t(122),l=r?r.prototype:void 0,u=l?l.valueOf:void 0;n.exports=function(n,e,t,r,l,p,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new o(n),new o(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var f=s;case"[object Set]":var m=1&r;if(f||(f=c),n.size!=e.size&&!m)return!1;var g=d.get(n);if(g)return g==e;r|=2,d.set(n,e);var h=a(f(n),f(e),r,l,p,d);return d.delete(n),h;case"[object Symbol]":if(u)return u.call(n)==u.call(e)}return!1}},function(n,e,t){var r=t(28).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(304),o=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,i,a,s){var c=1&t,l=r(n),u=l.length;if(u!=r(e).length&&!c)return!1;for(var p=u;p--;){var d=l[p];if(!(c?d in e:o.call(e,d)))return!1}var f=s.get(n),m=s.get(e);if(f&&m)return f==e&&m==n;var g=!0;s.set(n,e),s.set(e,n);for(var h=c;++p<u;){var v=n[d=l[p]],b=e[d];if(i)var y=c?i(b,v,d,e,n,s):i(v,b,d,n,e,s);if(!(void 0===y?v===b||a(v,b,t,i,s):y)){g=!1;break}h||(h="constructor"==d)}if(g&&!h){var x=n.constructor,k=e.constructor;x==k||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof k&&k instanceof k||(g=!1)}return s.delete(n),s.delete(e),g}},function(n,e,t){var r=t(305),o=t(306),i=t(188);n.exports=function(n){return r(n,i,o)}},function(n,e,t){var r=t(178),o=t(22);n.exports=function(n,e,t){var i=e(n);return o(n)?i:r(i,t(n))}},function(n,e,t){var r=t(307),o=t(308),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,s=a?function(n){return null==n?[]:(n=Object(n),r(a(n),(function(e){return i.call(n,e)})))}:o;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=0,i=[];++t<r;){var a=n[t];e(a,t,n)&&(i[o++]=a)}return i}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(310),o=t(118),i=t(22),a=t(189),s=t(190),c=t(191),l=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=i(n),u=!t&&o(n),p=!t&&!u&&a(n),d=!t&&!u&&!p&&c(n),f=t||u||p||d,m=f?r(n.length,String):[],g=m.length;for(var h in n)!e&&!l.call(n,h)||f&&("length"==h||p&&("offset"==h||"parent"==h)||d&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||s(h,g))||m.push(h);return m}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(53),o=t(123),i=t(44),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,n.exports=function(n){return i(n)&&o(n.length)&&!!a[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(179),o=e&&!e.nodeType&&e,i=o&&"object"==typeof n&&n&&!n.nodeType&&n,a=i&&i.exports===o&&r.process,s=function(){try{var n=i&&i.require&&i.require("util").types;return n||a&&a.binding&&a.binding("util")}catch(n){}}();n.exports=s}).call(this,t(136)(n))},function(n,e,t){var r=t(316),o=t(317),i=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return o(n);var e=[];for(var t in Object(n))i.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(318)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(320),o=t(119),i=t(321),a=t(193),s=t(322),c=t(53),l=t(183),u=l(r),p=l(o),d=l(i),f=l(a),m=l(s),g=c;(r&&"[object DataView]"!=g(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=g(new o)||i&&"[object Promise]"!=g(i.resolve())||a&&"[object Set]"!=g(new a)||s&&"[object WeakMap]"!=g(new s))&&(g=function(n){var e=c(n),t="[object Object]"==e?n.constructor:void 0,r=t?l(t):"";if(r)switch(r){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case f:return"[object Set]";case m:return"[object WeakMap]"}return e}),n.exports=g},function(n,e,t){var r=t(39)(t(28),"DataView");n.exports=r},function(n,e,t){var r=t(39)(t(28),"Promise");n.exports=r},function(n,e,t){var r=t(39)(t(28),"WeakMap");n.exports=r},function(n,e,t){var r=t(194),o=t(188);n.exports=function(n){for(var e=o(n),t=e.length;t--;){var i=e[t],a=n[i];e[t]=[i,a,r(a)]}return e}},function(n,e,t){var r=t(184),o=t(325),i=t(332),a=t(124),s=t(194),c=t(195),l=t(92);n.exports=function(n,e){return a(n)&&s(e)?c(l(n),e):function(t){var a=o(t,n);return void 0===a&&a===e?i(t,n):r(e,a,3)}}},function(n,e,t){var r=t(196);n.exports=function(n,e,t){var o=null==n?void 0:r(n,e);return void 0===o?t:o}},function(n,e,t){var r=t(327),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,a=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(o,(function(n,t,r,o){e.push(r?o.replace(i,"$1"):t||n)})),e}));n.exports=a},function(n,e,t){var r=t(328);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(121);function o(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,o=e?e.apply(this,r):r[0],i=t.cache;if(i.has(o))return i.get(o);var a=n.apply(this,r);return t.cache=i.set(o,a)||i,a};return t.cache=new(o.Cache||r),t}o.Cache=r,n.exports=o},function(n,e,t){var r=t(330);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(65),o=t(331),i=t(22),a=t(125),s=r?r.prototype:void 0,c=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(i(e))return o(e,n)+"";if(a(e))return c?c.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=Array(r);++t<r;)o[t]=e(n[t],t,n);return o}},function(n,e,t){var r=t(333),o=t(334);n.exports=function(n,e){return null!=n&&o(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(197),o=t(118),i=t(22),a=t(190),s=t(123),c=t(92);n.exports=function(n,e,t){for(var l=-1,u=(e=r(e,n)).length,p=!1;++l<u;){var d=c(e[l]);if(!(p=null!=n&&t(n,d)))break;n=n[d]}return p||++l!=u?p:!!(u=null==n?0:n.length)&&s(u)&&a(d,u)&&(i(n)||o(n))}},function(n,e,t){var r=t(336),o=t(337),i=t(124),a=t(92);n.exports=function(n){return i(n)?r(a(n)):o(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(196);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(126),o=t(339),i=t(341);n.exports=function(n,e){return i(o(n,e,r),n+"")}},function(n,e,t){var r=t(340),o=Math.max;n.exports=function(n,e,t){return e=o(void 0===e?n.length-1:e,0),function(){for(var i=arguments,a=-1,s=o(i.length-e,0),c=Array(s);++a<s;)c[a]=i[e+a];a=-1;for(var l=Array(e+1);++a<e;)l[a]=i[a];return l[e]=t(c),r(n,this,l)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(342),o=t(345)(r);n.exports=o},function(n,e,t){var r=t(343),o=t(344),i=t(126),a=o?function(n,e){return o(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:i;n.exports=a},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(39),o=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=o},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var o=t(),i=16-(o-r);if(r=o,i>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(186),o=t(347),i=t(352),a=t(187),s=t(353),c=t(122);n.exports=function(n,e,t){var l=-1,u=o,p=n.length,d=!0,f=[],m=f;if(t)d=!1,u=i;else if(p>=200){var g=e?null:s(n);if(g)return c(g);d=!1,u=a,m=new r}else m=e?[]:f;n:for(;++l<p;){var h=n[l],v=e?e(h):h;if(h=t||0!==h?h:0,d&&v==v){for(var b=m.length;b--;)if(m[b]===v)continue n;e&&m.push(v),f.push(h)}else u(m,v,t)||(m!==f&&m.push(v),f.push(h))}return f}},function(n,e,t){var r=t(348);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(349),o=t(350),i=t(351);n.exports=function(n,e,t){return e==e?i(n,e,t):r(n,o,t)}},function(n,e){n.exports=function(n,e,t,r){for(var o=n.length,i=t+(r?1:-1);r?i--:++i<o;)if(e(n[i],i,n))return i;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,o=n.length;++r<o;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,o=null==n?0:n.length;++r<o;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(193),o=t(354),i=t(122),a=r&&1/i(new r([,-0]))[1]==1/0?function(n){return new r(n)}:o;n.exports=a},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(192),o=t(44);n.exports=function(n){return o(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(1);n.exports=r(1..valueOf)},function(n,e,t){var r=t(1),o=t(47),i=t(12),a=t(360),s=t(17),c=r(a),l=r("".slice),u=Math.ceil,p=function(n){return function(e,t,r){var a,p,d=i(s(e)),f=o(t),m=d.length,g=void 0===r?" ":i(r);return f<=m||""==g?d:((p=c(g,u((a=f-m)/g.length))).length>a&&(p=l(p,0,a)),n?d+p:p+d)}};n.exports={start:p(!1),end:p(!0)}},function(n,e,t){"use strict";var r=t(0),o=t(56),i=t(12),a=t(17),s=r.RangeError;n.exports=function(n){var e=i(a(this)),t="",r=o(n);if(r<0||r==1/0)throw s("Wrong number of repetitions");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(t+=e);return t}},function(n,e,t){var r=t(24);n.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(r)},function(n,e,t){"use strict";t(200)},function(n,e,t){"use strict";t(201)},function(n,e,t){"use strict";var r=t(2),o=t(1),i=t(33),a=t(15),s=t(25),c=t(12),l=t(3),u=t(365),p=t(49),d=t(366),f=t(367),m=t(45),g=t(368),h=[],v=o(h.sort),b=o(h.push),y=l((function(){h.sort(void 0)})),x=l((function(){h.sort(null)})),k=p("sort"),S=!l((function(){if(m)return m<70;if(!(d&&d>3)){if(f)return!0;if(g)return g<603;var n,e,t,r,o="";for(n=65;n<76;n++){switch(e=String.fromCharCode(n),n){case 66:case 69:case 70:case 72:t=3;break;case 68:case 71:t=4;break;default:t=2}for(r=0;r<47;r++)h.push({k:e+r,v:t})}for(h.sort((function(n,e){return e.v-n.v})),r=0;r<h.length;r++)e=h[r].k.charAt(0),o.charAt(o.length-1)!==e&&(o+=e);return"DGBEFHACIJK"!==o}}));r({target:"Array",proto:!0,forced:y||!x||!k||!S},{sort:function(n){void 0!==n&&i(n);var e=a(this);if(S)return void 0===n?v(e):v(e,n);var t,r,o=[],l=s(e);for(r=0;r<l;r++)r in e&&b(o,e[r]);for(u(o,function(n){return function(e,t){return void 0===t?-1:void 0===e?1:void 0!==n?+n(e,t)||0:c(e)>c(t)?1:-1}}(n)),t=o.length,r=0;r<t;)e[r]=o[r++];for(;r<l;)delete e[r++];return e}})},function(n,e,t){var r=t(113),o=Math.floor,i=function(n,e){var t=n.length,c=o(t/2);return t<8?a(n,e):s(n,i(r(n,0,c),e),i(r(n,c),e),e)},a=function(n,e){for(var t,r,o=n.length,i=1;i<o;){for(r=i,t=n[i];r&&e(n[r-1],t)>0;)n[r]=n[--r];r!==i++&&(n[r]=t)}return n},s=function(n,e,t,r){for(var o=e.length,i=t.length,a=0,s=0;a<o||s<i;)n[a+s]=a<o&&s<i?r(e[a],t[s])<=0?e[a++]:t[s++]:a<o?e[a++]:t[s++];return n};n.exports=i},function(n,e,t){var r=t(24).match(/firefox\/(\d+)/i);n.exports=!!r&&+r[1]},function(n,e,t){var r=t(24);n.exports=/MSIE|Trident/.test(r)},function(n,e,t){var r=t(24).match(/AppleWebKit\/(\d+)\./);n.exports=!!r&&+r[1]},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";var r=t(0),o=t(1),i=t(33),a=t(8),s=t(10),c=t(62),l=t(55),u=r.Function,p=o([].concat),d=o([].join),f={},m=function(n,e,t){if(!s(f,e)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";f[e]=u("C,a","return new C("+d(r,",")+")")}return f[e](n,t)};n.exports=l?u.bind:function(n){var e=i(this),t=e.prototype,r=c(arguments,1),o=function(){var t=p(r,c(arguments));return this instanceof o?m(e,t.length,t):e.apply(n,t)};return a(t)&&(o.prototype=t),o}},function(n,e,t){"use strict";t(205)},function(n,e,t){"use strict";t(206)},function(n,e,t){"use strict";t.r(e);t(139),t(229),t(240),t(242),t(6);function r(n,e,t,r,o,i,a){try{var s=n[i](a),c=s.value}catch(n){return void t(n)}s.done?e(c):Promise.resolve(c).then(r,o)}function o(n){return function(){var e=this,t=arguments;return new Promise((function(o,i){var a=n.apply(e,t);function s(n){r(a,o,i,s,c,"next",n)}function c(n){r(a,o,i,s,c,"throw",n)}s(void 0)}))}}t(161),t(68),t(26),t(35),t(43),t(30);var i=Object.freeze({});function a(n){return null==n}function s(n){return null!=n}function c(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function u(n){return null!==n&&"object"==typeof n}var p=Object.prototype.toString;function d(n){return"[object Object]"===p.call(n)}function f(n){return"[object RegExp]"===p.call(n)}function m(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function g(n){return s(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function h(n){return null==n?"":Array.isArray(n)||d(n)&&n.toString===p?JSON.stringify(n,null,2):String(n)}function v(n){var e=parseFloat(n);return isNaN(e)?n:e}function b(n,e){for(var t=Object.create(null),r=n.split(","),o=0;o<r.length;o++)t[r[o]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}b("slot,component",!0);var y=b("key,ref,slot,slot-scope,is");function x(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var k=Object.prototype.hasOwnProperty;function S(n,e){return k.call(n,e)}function w(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var C=/-(\w)/g,_=w((function(n){return n.replace(C,(function(n,e){return e?e.toUpperCase():""}))})),E=w((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),A=/\B([A-Z])/g,I=w((function(n){return n.replace(A,"-$1").toLowerCase()}));var T=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function j(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function O(n,e){for(var t in e)n[t]=e[t];return n}function P(n){for(var e={},t=0;t<n.length;t++)n[t]&&O(e,n[t]);return e}function R(n,e,t){}var L=function(n,e,t){return!1},q=function(n){return n};function F(n,e){if(n===e)return!0;var t=u(n),r=u(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var o=Array.isArray(n),i=Array.isArray(e);if(o&&i)return n.length===e.length&&n.every((function(n,t){return F(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(o||i)return!1;var a=Object.keys(n),s=Object.keys(e);return a.length===s.length&&a.every((function(t){return F(n[t],e[t])}))}catch(n){return!1}}function M(n,e){for(var t=0;t<n.length;t++)if(F(n[t],e))return t;return-1}function D(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}var $=["component","directive","filter"],z=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:L,isReservedAttr:L,isUnknownElement:L,getTagNamespace:R,parsePlatformTagName:q,mustUseProp:L,async:!0,_lifecycleHooks:z},N=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var U=new RegExp("[^"+N.source+".$_\\d]");var V,J="__proto__"in{},W="undefined"!=typeof window,G="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=G&&WXEnvironment.platform.toLowerCase(),Z=W&&window.navigator.userAgent.toLowerCase(),X=Z&&/msie|trident/.test(Z),Y=Z&&Z.indexOf("msie 9.0")>0,Q=Z&&Z.indexOf("edge/")>0,nn=(Z&&Z.indexOf("android"),Z&&/iphone|ipad|ipod|ios/.test(Z)||"ios"===K),en=(Z&&/chrome\/\d+/.test(Z),Z&&/phantomjs/.test(Z),Z&&Z.match(/firefox\/(\d+)/)),tn={}.watch,rn=!1;if(W)try{var on={};Object.defineProperty(on,"passive",{get:function(){rn=!0}}),window.addEventListener("test-passive",null,on)}catch(n){}var an=function(){return void 0===V&&(V=!W&&!G&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),V},sn=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function cn(n){return"function"==typeof n&&/native code/.test(n.toString())}var ln,un="undefined"!=typeof Symbol&&cn(Symbol)&&"undefined"!=typeof Reflect&&cn(Reflect.ownKeys);ln="undefined"!=typeof Set&&cn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var pn=R,dn=0,fn=function(){this.id=dn++,this.subs=[]};fn.prototype.addSub=function(n){this.subs.push(n)},fn.prototype.removeSub=function(n){x(this.subs,n)},fn.prototype.depend=function(){fn.target&&fn.target.addDep(this)},fn.prototype.notify=function(){var n=this.subs.slice();for(var e=0,t=n.length;e<t;e++)n[e].update()},fn.target=null;var mn=[];function gn(n){mn.push(n),fn.target=n}function hn(){mn.pop(),fn.target=mn[mn.length-1]}var vn=function(n,e,t,r,o,i,a,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},bn={child:{configurable:!0}};bn.child.get=function(){return this.componentInstance},Object.defineProperties(vn.prototype,bn);var yn=function(n){void 0===n&&(n="");var e=new vn;return e.text=n,e.isComment=!0,e};function xn(n){return new vn(void 0,void 0,void 0,String(n))}function kn(n){var e=new vn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var Sn=Array.prototype,wn=Object.create(Sn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=Sn[n];H(wn,n,(function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];var o,i=e.apply(this,t),a=this.__ob__;switch(n){case"push":case"unshift":o=t;break;case"splice":o=t.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i}))}));var Cn=Object.getOwnPropertyNames(wn),_n=!0;function En(n){_n=n}var An=function(n){this.value=n,this.dep=new fn,this.vmCount=0,H(n,"__ob__",this),Array.isArray(n)?(J?function(n,e){n.__proto__=e}(n,wn):function(n,e,t){for(var r=0,o=t.length;r<o;r++){var i=t[r];H(n,i,e[i])}}(n,wn,Cn),this.observeArray(n)):this.walk(n)};function In(n,e){var t;if(u(n)&&!(n instanceof vn))return S(n,"__ob__")&&n.__ob__ instanceof An?t=n.__ob__:_n&&!an()&&(Array.isArray(n)||d(n))&&Object.isExtensible(n)&&!n._isVue&&(t=new An(n)),e&&t&&t.vmCount++,t}function Tn(n,e,t,r,o){var i=new fn,a=Object.getOwnPropertyDescriptor(n,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(t=n[e]);var l=!o&&In(t);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(n):t;return fn.target&&(i.depend(),l&&(l.dep.depend(),Array.isArray(e)&&Pn(e))),e},set:function(e){var r=s?s.call(n):t;e===r||e!=e&&r!=r||s&&!c||(c?c.call(n,e):t=e,l=!o&&In(e),i.notify())}})}}function jn(n,e,t){if(Array.isArray(n)&&m(e))return n.length=Math.max(n.length,e),n.splice(e,1,t),t;if(e in n&&!(e in Object.prototype))return n[e]=t,t;var r=n.__ob__;return n._isVue||r&&r.vmCount?t:r?(Tn(r.value,e,t),r.dep.notify(),t):(n[e]=t,t)}function On(n,e){if(Array.isArray(n)&&m(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||S(n,e)&&(delete n[e],t&&t.dep.notify())}}function Pn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Pn(e)}An.prototype.walk=function(n){for(var e=Object.keys(n),t=0;t<e.length;t++)Tn(n,e[t])},An.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)In(n[e])};var Rn=B.optionMergeStrategies;function Ln(n,e){if(!e)return n;for(var t,r,o,i=un?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)"__ob__"!==(t=i[a])&&(r=n[t],o=e[t],S(n,t)?r!==o&&d(r)&&d(o)&&Ln(r,o):jn(n,t,o));return n}function qn(n,e,t){return t?function(){var r="function"==typeof e?e.call(t,t):e,o="function"==typeof n?n.call(t,t):n;return r?Ln(r,o):o}:e?n?function(){return Ln("function"==typeof e?e.call(this,this):e,"function"==typeof n?n.call(this,this):n)}:e:n}function Fn(n,e){var t=e?n?n.concat(e):Array.isArray(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Mn(n,e,t,r){var o=Object.create(n||null);return e?O(o,e):o}Rn.data=function(n,e,t){return t?qn(n,e,t):e&&"function"!=typeof e?n:qn(n,e)},z.forEach((function(n){Rn[n]=Fn})),$.forEach((function(n){Rn[n+"s"]=Mn})),Rn.watch=function(n,e,t,r){if(n===tn&&(n=void 0),e===tn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var o={};for(var i in O(o,n),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Rn.props=Rn.methods=Rn.inject=Rn.computed=function(n,e,t,r){if(!n)return e;var o=Object.create(null);return O(o,n),e&&O(o,e),o},Rn.provide=qn;var Dn=function(n,e){return void 0===e?n:e};function $n(n,e,t){if("function"==typeof e&&(e=e.options),function(n,e){var t=n.props;if(t){var r,o,i={};if(Array.isArray(t))for(r=t.length;r--;)"string"==typeof(o=t[r])&&(i[_(o)]={type:null});else if(d(t))for(var a in t)o=t[a],i[_(a)]=d(o)?o:{type:o};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(Array.isArray(t))for(var o=0;o<t.length;o++)r[t[o]]={from:t[o]};else if(d(t))for(var i in t){var a=t[i];r[i]=d(a)?O({from:i},a):{from:a}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];"function"==typeof r&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=$n(n,e.extends,t)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)n=$n(n,e.mixins[r],t);var i,a={};for(i in n)s(i);for(i in e)S(n,i)||s(i);function s(r){var o=Rn[r]||Dn;a[r]=o(n[r],e[r],t,r)}return a}function zn(n,e,t,r){if("string"==typeof t){var o=n[e];if(S(o,t))return o[t];var i=_(t);if(S(o,i))return o[i];var a=E(i);return S(o,a)?o[a]:o[t]||o[i]||o[a]}}function Bn(n,e,t,r){var o=e[n],i=!S(t,n),a=t[n],s=Vn(Boolean,o.type);if(s>-1)if(i&&!S(o,"default"))a=!1;else if(""===a||a===I(n)){var c=Vn(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(n,e,t){if(!S(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return"function"==typeof r&&"Function"!==Hn(e.type)?r.call(n):r}(r,o,n);var l=_n;En(!0),In(a),En(l)}return a}var Nn=/^\s*function (\w+)/;function Hn(n){var e=n&&n.toString().match(Nn);return e?e[1]:""}function Un(n,e){return Hn(n)===Hn(e)}function Vn(n,e){if(!Array.isArray(e))return Un(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Un(e[t],n))return t;return-1}function Jn(n,e,t){gn();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,n,e,t))return}catch(n){Gn(n,r,"errorCaptured hook")}}Gn(n,e,t)}finally{hn()}}function Wn(n,e,t,r,o){var i;try{(i=t?n.apply(e,t):n.call(e))&&!i._isVue&&g(i)&&!i._handled&&(i.catch((function(n){return Jn(n,r,o+" (Promise/async)")})),i._handled=!0)}catch(n){Jn(n,r,o)}return i}function Gn(n,e,t){if(B.errorHandler)try{return B.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Kn(e,null,"config.errorHandler")}Kn(n,e,t)}function Kn(n,e,t){if(!W&&!G||"undefined"==typeof console)throw n;console.error(n)}var Zn,Xn=!1,Yn=[],Qn=!1;function ne(){Qn=!1;var n=Yn.slice(0);Yn.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&cn(Promise)){var ee=Promise.resolve();Zn=function(){ee.then(ne),nn&&setTimeout(R)},Xn=!0}else if(X||"undefined"==typeof MutationObserver||!cn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Zn="undefined"!=typeof setImmediate&&cn(setImmediate)?function(){setImmediate(ne)}:function(){setTimeout(ne,0)};else{var te=1,re=new MutationObserver(ne),oe=document.createTextNode(String(te));re.observe(oe,{characterData:!0}),Zn=function(){te=(te+1)%2,oe.data=String(te)},Xn=!0}function ie(n,e){var t;if(Yn.push((function(){if(n)try{n.call(e)}catch(n){Jn(n,e,"nextTick")}else t&&t(e)})),Qn||(Qn=!0,Zn()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}var ae=new ln;function se(n){!function n(e,t){var r,o,i=Array.isArray(e);if(!i&&!u(e)||Object.isFrozen(e)||e instanceof vn)return;if(e.__ob__){var a=e.__ob__.dep.id;if(t.has(a))return;t.add(a)}if(i)for(r=e.length;r--;)n(e[r],t);else for(o=Object.keys(e),r=o.length;r--;)n(e[o[r]],t)}(n,ae),ae.clear()}var ce=w((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function le(n,e){function t(){var n=arguments,r=t.fns;if(!Array.isArray(r))return Wn(r,null,arguments,e,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)Wn(o[i],null,n,e,"v-on handler")}return t.fns=n,t}function ue(n,e,t,r,o,i){var s,l,u,p;for(s in n)l=n[s],u=e[s],p=ce(s),a(l)||(a(u)?(a(l.fns)&&(l=n[s]=le(l,i)),c(p.once)&&(l=n[s]=o(p.name,l,p.capture)),t(p.name,l,p.capture,p.passive,p.params)):l!==u&&(u.fns=l,n[s]=u));for(s in e)a(n[s])&&r((p=ce(s)).name,e[s],p.capture)}function pe(n,e,t){var r;n instanceof vn&&(n=n.data.hook||(n.data.hook={}));var o=n[e];function i(){t.apply(this,arguments),x(r.fns,i)}a(o)?r=le([i]):s(o.fns)&&c(o.merged)?(r=o).fns.push(i):r=le([o,i]),r.merged=!0,n[e]=r}function de(n,e,t,r,o){if(s(e)){if(S(e,t))return n[t]=e[t],o||delete e[t],!0;if(S(e,r))return n[t]=e[r],o||delete e[r],!0}return!1}function fe(n){return l(n)?[xn(n)]:Array.isArray(n)?function n(e,t){var r,o,i,u,p=[];for(r=0;r<e.length;r++)a(o=e[r])||"boolean"==typeof o||(i=p.length-1,u=p[i],Array.isArray(o)?o.length>0&&(me((o=n(o,(t||"")+"_"+r))[0])&&me(u)&&(p[i]=xn(u.text+o[0].text),o.shift()),p.push.apply(p,o)):l(o)?me(u)?p[i]=xn(u.text+o):""!==o&&p.push(xn(o)):me(o)&&me(u)?p[i]=xn(u.text+o.text):(c(e._isVList)&&s(o.tag)&&a(o.key)&&s(t)&&(o.key="__vlist"+t+"_"+r+"__"),p.push(o)));return p}(n):void 0}function me(n){return s(n)&&s(n.text)&&!1===n.isComment}function ge(n,e){if(n){for(var t=Object.create(null),r=un?Reflect.ownKeys(n):Object.keys(n),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){for(var a=n[i].from,s=e;s;){if(s._provided&&S(s._provided,a)){t[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in n[i]){var c=n[i].default;t[i]="function"==typeof c?c.call(e):c}else 0}}return t}}function he(n,e){if(!n||!n.length)return{};for(var t={},r=0,o=n.length;r<o;r++){var i=n[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(t.default||(t.default=[])).push(i);else{var s=a.slot,c=t[s]||(t[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var l in t)t[l].every(ve)&&delete t[l];return t}function ve(n){return n.isComment&&!n.asyncFactory||" "===n.text}function be(n){return n.isComment&&n.asyncFactory}function ye(n,e,t){var r,o=Object.keys(e).length>0,a=n?!!n.$stable:!o,s=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(a&&t&&t!==i&&s===t.$key&&!o&&!t.$hasNormal)return t;for(var c in r={},n)n[c]&&"$"!==c[0]&&(r[c]=xe(e,c,n[c]))}else r={};for(var l in e)l in r||(r[l]=ke(e,l));return n&&Object.isExtensible(n)&&(n._normalized=r),H(r,"$stable",a),H(r,"$key",s),H(r,"$hasNormal",o),r}function xe(n,e,t){var r=function(){var n=arguments.length?t.apply(null,arguments):t({}),e=(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:fe(n))&&n[0];return n&&(!e||1===n.length&&e.isComment&&!be(e))?void 0:n};return t.proxy&&Object.defineProperty(n,e,{get:r,enumerable:!0,configurable:!0}),r}function ke(n,e){return function(){return n[e]}}function Se(n,e){var t,r,o,i,a;if(Array.isArray(n)||"string"==typeof n)for(t=new Array(n.length),r=0,o=n.length;r<o;r++)t[r]=e(n[r],r);else if("number"==typeof n)for(t=new Array(n),r=0;r<n;r++)t[r]=e(r+1,r);else if(u(n))if(un&&n[Symbol.iterator]){t=[];for(var c=n[Symbol.iterator](),l=c.next();!l.done;)t.push(e(l.value,t.length)),l=c.next()}else for(i=Object.keys(n),t=new Array(i.length),r=0,o=i.length;r<o;r++)a=i[r],t[r]=e(n[a],a,r);return s(t)||(t=[]),t._isVList=!0,t}function we(n,e,t,r){var o,i=this.$scopedSlots[n];i?(t=t||{},r&&(t=O(O({},r),t)),o=i(t)||("function"==typeof e?e():e)):o=this.$slots[n]||("function"==typeof e?e():e);var a=t&&t.slot;return a?this.$createElement("template",{slot:a},o):o}function Ce(n){return zn(this.$options,"filters",n)||q}function _e(n,e){return Array.isArray(n)?-1===n.indexOf(e):n!==e}function Ee(n,e,t,r,o){var i=B.keyCodes[e]||t;return o&&r&&!B.keyCodes[e]?_e(o,r):i?_e(i,n):r?I(r)!==e:void 0===n}function Ae(n,e,t,r,o){if(t)if(u(t)){var i;Array.isArray(t)&&(t=P(t));var a=function(a){if("class"===a||"style"===a||y(a))i=n;else{var s=n.attrs&&n.attrs.type;i=r||B.mustUseProp(e,s,a)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var c=_(a),l=I(a);c in i||l in i||(i[a]=t[a],o&&((n.on||(n.on={}))["update:"+a]=function(n){t[a]=n}))};for(var s in t)a(s)}else;return n}function Ie(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||je(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),r}function Te(n,e,t){return je(n,"__once__"+e+(t?"_"+t:""),!0),n}function je(n,e,t){if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&Oe(n[r],e+"_"+r,t);else Oe(n,e,t)}function Oe(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function Pe(n,e){if(e)if(d(e)){var t=n.on=n.on?O({},n.on):{};for(var r in e){var o=t[r],i=e[r];t[r]=o?[].concat(o,i):i}}else;return n}function Re(n,e,t,r){e=e||{$stable:!t};for(var o=0;o<n.length;o++){var i=n[o];Array.isArray(i)?Re(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function Le(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function qe(n,e){return"string"==typeof n?e+n:n}function Fe(n){n._o=Te,n._n=v,n._s=h,n._l=Se,n._t=we,n._q=F,n._i=M,n._m=Ie,n._f=Ce,n._k=Ee,n._b=Ae,n._v=xn,n._e=yn,n._u=Re,n._g=Pe,n._d=Le,n._p=qe}function Me(n,e,t,r,o){var a,s=this,l=o.options;S(r,"_uid")?(a=Object.create(r))._original=r:(a=r,r=r._original);var u=c(l._compiled),p=!u;this.data=n,this.props=e,this.children=t,this.parent=r,this.listeners=n.on||i,this.injections=ge(l.inject,r),this.slots=function(){return s.$slots||ye(n.scopedSlots,s.$slots=he(t,r)),s.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ye(n.scopedSlots,this.slots())}}),u&&(this.$options=l,this.$slots=this.slots(),this.$scopedSlots=ye(n.scopedSlots,this.$slots)),l._scopeId?this._c=function(n,e,t,o){var i=Ue(a,n,e,t,o,p);return i&&!Array.isArray(i)&&(i.fnScopeId=l._scopeId,i.fnContext=r),i}:this._c=function(n,e,t,r){return Ue(a,n,e,t,r,p)}}function De(n,e,t,r,o){var i=kn(n);return i.fnContext=t,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function $e(n,e){for(var t in e)n[_(t)]=e[t]}Fe(Me.prototype);var ze={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;ze.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;s(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Qe)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,o){0;var a=r.data.scopedSlots,s=n.$scopedSlots,c=!!(a&&!a.$stable||s!==i&&!s.$stable||a&&n.$scopedSlots.$key!==a.$key||!a&&n.$scopedSlots.$key),l=!!(o||n.$options._renderChildren||c);n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r);if(n.$options._renderChildren=o,n.$attrs=r.data.attrs||i,n.$listeners=t||i,e&&n.$options.props){En(!1);for(var u=n._props,p=n.$options._propKeys||[],d=0;d<p.length;d++){var f=p[d],m=n.$options.props;u[f]=Bn(f,m,e,n)}En(!0),n.$options.propsData=e}t=t||i;var g=n.$options._parentListeners;n.$options._parentListeners=t,Ye(n,t,g),l&&(n.$slots=he(o,r.context),n.$forceUpdate());0}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,rt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,it.push(e)):tt(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(t&&(e._directInactive=!0,et(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);rt(e,"deactivated")}}(e,!0):e.$destroy())}},Be=Object.keys(ze);function Ne(n,e,t,r,o){if(!a(n)){var l=t.$options._base;if(u(n)&&(n=l.extend(n)),"function"==typeof n){var p;if(a(n.cid)&&void 0===(n=function(n,e){if(c(n.error)&&s(n.errorComp))return n.errorComp;if(s(n.resolved))return n.resolved;var t=Je;t&&s(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t);if(c(n.loading)&&s(n.loadingComp))return n.loadingComp;if(t&&!s(n.owners)){var r=n.owners=[t],o=!0,i=null,l=null;t.$on("hook:destroyed",(function(){return x(r,t)}));var p=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==i&&(clearTimeout(i),i=null),null!==l&&(clearTimeout(l),l=null))},d=D((function(t){n.resolved=We(t,e),o?r.length=0:p(!0)})),f=D((function(e){s(n.errorComp)&&(n.error=!0,p(!0))})),m=n(d,f);return u(m)&&(g(m)?a(n.resolved)&&m.then(d,f):g(m.component)&&(m.component.then(d,f),s(m.error)&&(n.errorComp=We(m.error,e)),s(m.loading)&&(n.loadingComp=We(m.loading,e),0===m.delay?n.loading=!0:i=setTimeout((function(){i=null,a(n.resolved)&&a(n.error)&&(n.loading=!0,p(!1))}),m.delay||200)),s(m.timeout)&&(l=setTimeout((function(){l=null,a(n.resolved)&&f(null)}),m.timeout)))),o=!1,n.loading?n.loadingComp:n.resolved}}(p=n,l)))return function(n,e,t,r,o){var i=yn();return i.asyncFactory=n,i.asyncMeta={data:e,context:t,children:r,tag:o},i}(p,e,t,r,o);e=e||{},_t(n),s(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var o=e.on||(e.on={}),i=o[r],a=e.model.callback;s(i)?(Array.isArray(i)?-1===i.indexOf(a):i!==a)&&(o[r]=[a].concat(i)):o[r]=a}(n.options,e);var d=function(n,e,t){var r=e.options.props;if(!a(r)){var o={},i=n.attrs,c=n.props;if(s(i)||s(c))for(var l in r){var u=I(l);de(o,c,l,u,!0)||de(o,i,l,u,!1)}return o}}(e,n);if(c(n.options.functional))return function(n,e,t,r,o){var a=n.options,c={},l=a.props;if(s(l))for(var u in l)c[u]=Bn(u,l,e||i);else s(t.attrs)&&$e(c,t.attrs),s(t.props)&&$e(c,t.props);var p=new Me(t,c,o,r,n),d=a.render.call(null,p._c,p);if(d instanceof vn)return De(d,t,p.parent,a,p);if(Array.isArray(d)){for(var f=fe(d)||[],m=new Array(f.length),g=0;g<f.length;g++)m[g]=De(f[g],t,p.parent,a,p);return m}}(n,d,e,t,r);var f=e.on;if(e.on=e.nativeOn,c(n.options.abstract)){var m=e.slot;e={},m&&(e.slot=m)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<Be.length;t++){var r=Be[t],o=e[r],i=ze[r];o===i||o&&o._merged||(e[r]=o?He(i,o):i)}}(e);var h=n.options.name||o;return new vn("vue-component-"+n.cid+(h?"-"+h:""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:d,listeners:f,tag:o,children:r},p)}}}function He(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}function Ue(n,e,t,r,o,i){return(Array.isArray(t)||l(t))&&(o=r,r=t,t=void 0),c(i)&&(o=2),function(n,e,t,r,o){if(s(t)&&s(t.__ob__))return yn();s(t)&&s(t.is)&&(e=t.is);if(!e)return yn();0;Array.isArray(r)&&"function"==typeof r[0]&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===o?r=fe(r):1===o&&(r=function(n){for(var e=0;e<n.length;e++)if(Array.isArray(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var i,l;if("string"==typeof e){var p;l=n.$vnode&&n.$vnode.ns||B.getTagNamespace(e),i=B.isReservedTag(e)?new vn(B.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!s(p=zn(n.$options,"components",e))?new vn(e,t,r,void 0,void 0,n):Ne(p,t,n,r,e)}else i=Ne(e,t,n,r);return Array.isArray(i)?i:s(i)?(s(l)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(s(e.children))for(var o=0,i=e.children.length;o<i;o++){var l=e.children[o];s(l.tag)&&(a(l.ns)||c(r)&&"svg"!==l.tag)&&n(l,t,r)}}(i,l),s(t)&&function(n){u(n.style)&&se(n.style);u(n.class)&&se(n.class)}(t),i):yn()}(n,e,t,r,o)}var Ve,Je=null;function We(n,e){return(n.__esModule||un&&"Module"===n[Symbol.toStringTag])&&(n=n.default),u(n)?e.extend(n):n}function Ge(n){if(Array.isArray(n))for(var e=0;e<n.length;e++){var t=n[e];if(s(t)&&(s(t.componentOptions)||be(t)))return t}}function Ke(n,e){Ve.$on(n,e)}function Ze(n,e){Ve.$off(n,e)}function Xe(n,e){var t=Ve;return function r(){var o=e.apply(null,arguments);null!==o&&t.$off(n,r)}}function Ye(n,e,t){Ve=n,ue(e,t||{},Ke,Ze,Xe,n),Ve=void 0}var Qe=null;function nt(n){var e=Qe;return Qe=n,function(){Qe=e}}function et(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function tt(n,e){if(e){if(n._directInactive=!1,et(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)tt(n.$children[t]);rt(n,"activated")}}function rt(n,e){gn();var t=n.$options[e],r=e+" hook";if(t)for(var o=0,i=t.length;o<i;o++)Wn(t[o],n,null,n,r);n._hasHookEvent&&n.$emit("hook:"+e),hn()}var ot=[],it=[],at={},st=!1,ct=!1,lt=0;var ut=0,pt=Date.now;if(W&&!X){var dt=window.performance;dt&&"function"==typeof dt.now&&pt()>document.createEvent("Event").timeStamp&&(pt=function(){return dt.now()})}function ft(){var n,e;for(ut=pt(),ct=!0,ot.sort((function(n,e){return n.id-e.id})),lt=0;lt<ot.length;lt++)(n=ot[lt]).before&&n.before(),e=n.id,at[e]=null,n.run();var t=it.slice(),r=ot.slice();lt=ot.length=it.length=0,at={},st=ct=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,tt(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r._watcher===t&&r._isMounted&&!r._isDestroyed&&rt(r,"updated")}}(r),sn&&B.devtools&&sn.emit("flush")}var mt=0,gt=function(n,e,t,r,o){this.vm=n,o&&(n._watcher=this),n._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++mt,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ln,this.newDepIds=new ln,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(n){if(!U.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=R)),this.value=this.lazy?void 0:this.get()};gt.prototype.get=function(){var n;gn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Jn(n,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&se(n),hn(),this.cleanupDeps()}return n},gt.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},gt.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},gt.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var e=n.id;if(null==at[e]){if(at[e]=!0,ct){for(var t=ot.length-1;t>lt&&ot[t].id>n.id;)t--;ot.splice(t+1,0,n)}else ot.push(n);st||(st=!0,ie(ft))}}(this)},gt.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||u(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'+this.expression+'"';Wn(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},gt.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},gt.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},gt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||x(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var ht={enumerable:!0,configurable:!0,get:R,set:R};function vt(n,e,t){ht.get=function(){return this[e][t]},ht.set=function(n){this[e][t]=n},Object.defineProperty(n,t,ht)}function bt(n){n._watchers=[];var e=n.$options;e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props={},o=n.$options._propKeys=[];n.$parent&&En(!1);var i=function(i){o.push(i);var a=Bn(i,e,t,n);Tn(r,i,a),i in n||vt(n,"_props",i)};for(var a in e)i(a);En(!0)}(n,e.props),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?R:T(e[t],n)}(n,e.methods),e.data?function(n){var e=n.$options.data;d(e=n._data="function"==typeof e?function(n,e){gn();try{return n.call(e,e)}catch(n){return Jn(n,e,"data()"),{}}finally{hn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,o=(n.$options.methods,t.length);for(;o--;){var i=t[o];0,r&&S(r,i)||(a=void 0,36!==(a=(i+"").charCodeAt(0))&&95!==a&&vt(n,"_data",i))}var a;In(e,!0)}(n):In(n._data={},!0),e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=an();for(var o in e){var i=e[o],a="function"==typeof i?i:i.get;0,r||(t[o]=new gt(n,a||R,R,yt)),o in n||xt(n,o,i)}}(n,e.computed),e.watch&&e.watch!==tn&&function(n,e){for(var t in e){var r=e[t];if(Array.isArray(r))for(var o=0;o<r.length;o++)wt(n,t,r[o]);else wt(n,t,r)}}(n,e.watch)}var yt={lazy:!0};function xt(n,e,t){var r=!an();"function"==typeof t?(ht.get=r?kt(e):St(t),ht.set=R):(ht.get=t.get?r&&!1!==t.cache?kt(e):St(t.get):R,ht.set=t.set||R),Object.defineProperty(n,e,ht)}function kt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),fn.target&&e.depend(),e.value}}function St(n){return function(){return n.call(this,this)}}function wt(n,e,t,r){return d(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Ct=0;function _t(n){var e=n.options;if(n.super){var t=_t(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var o in t)t[o]!==r[o]&&(e||(e={}),e[o]=t[o]);return e}(n);r&&O(n.extendOptions,r),(e=n.options=$n(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Et(n){this._init(n)}function At(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,o=n._Ctor||(n._Ctor={});if(o[r])return o[r];var i=n.name||t.options.name;var a=function(n){this._init(n)};return(a.prototype=Object.create(t.prototype)).constructor=a,a.cid=e++,a.options=$n(t.options,n),a.super=t,a.options.props&&function(n){var e=n.options.props;for(var t in e)vt(n.prototype,"_props",t)}(a),a.options.computed&&function(n){var e=n.options.computed;for(var t in e)xt(n.prototype,t,e[t])}(a),a.extend=t.extend,a.mixin=t.mixin,a.use=t.use,$.forEach((function(n){a[n]=t[n]})),i&&(a.options.components[i]=a),a.superOptions=t.options,a.extendOptions=n,a.sealedOptions=O({},a.options),o[r]=a,a}}function It(n){return n&&(n.Ctor.options.name||n.tag)}function Tt(n,e){return Array.isArray(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!f(n)&&n.test(e)}function jt(n,e){var t=n.cache,r=n.keys,o=n._vnode;for(var i in t){var a=t[i];if(a){var s=a.name;s&&!e(s)&&Ot(t,i,r,o)}}}function Ot(n,e,t,r){var o=n[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),n[e]=null,x(t,e)}Et.prototype._init=function(n){var e=this;e._uid=Ct++,e._isVue=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var o=r.componentOptions;t.propsData=o.propsData,t._parentListeners=o.listeners,t._renderChildren=o.children,t._componentTag=o.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=$n(_t(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Ye(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=he(e._renderChildren,r),n.$scopedSlots=i,n._c=function(e,t,r,o){return Ue(n,e,t,r,o,!1)},n.$createElement=function(e,t,r,o){return Ue(n,e,t,r,o,!0)};var o=t&&t.data;Tn(n,"$attrs",o&&o.attrs||i,null,!0),Tn(n,"$listeners",e._parentListeners||i,null,!0)}(e),rt(e,"beforeCreate"),function(n){var e=ge(n.$options.inject,n);e&&(En(!1),Object.keys(e).forEach((function(t){Tn(n,t,e[t])})),En(!0))}(e),bt(e),function(n){var e=n.$options.provide;e&&(n._provided="function"==typeof e?e.call(n):e)}(e),rt(e,"created"),e.$options.el&&e.$mount(e.$options.el)},function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=jn,n.prototype.$delete=On,n.prototype.$watch=function(n,e,t){if(d(e))return wt(this,n,e,t);(t=t||{}).user=!0;var r=new gt(this,n,e,t);if(t.immediate){var o='callback for immediate watcher "'+r.expression+'"';gn(),Wn(e,this,[r.value],this,o),hn()}return function(){r.teardown()}}}(Et),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)r.$on(n[o],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(n)){for(var r=0,o=n.length;r<o;r++)t.$off(n[r],e);return t}var i,a=t._events[n];if(!a)return t;if(!e)return t._events[n]=null,t;for(var s=a.length;s--;)if((i=a[s])===e||i.fn===e){a.splice(s,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?j(t):t;for(var r=j(arguments,1),o='event handler for "'+n+'"',i=0,a=t.length;i<a;i++)Wn(t[i],e,r,e,o)}return e}}(Et),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,o=t._vnode,i=nt(t);t._vnode=n,t.$el=o?t.__patch__(o,n):t.__patch__(t.$el,n,e,!1),i(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){rt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||x(e.$children,n),n._watcher&&n._watcher.teardown();for(var t=n._watchers.length;t--;)n._watchers[t].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),rt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Et),function(n){Fe(n.prototype),n.prototype.$nextTick=function(n){return ie(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,o=t._parentVnode;o&&(e.$scopedSlots=ye(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{Je=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){Jn(t,e,"render"),n=e._vnode}finally{Je=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof vn||(n=yn()),n.parent=o,n}}(Et);var Pt=[String,RegExp,Array],Rt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Pt,exclude:Pt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var o=t.tag,i=t.componentInstance,a=t.componentOptions;n[r]={name:It(a),tag:o,componentInstance:i},e.push(r),this.max&&e.length>parseInt(this.max)&&Ot(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Ot(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){jt(n,(function(n){return Tt(e,n)}))})),this.$watch("exclude",(function(e){jt(n,(function(n){return!Tt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Ge(n),t=e&&e.componentOptions;if(t){var r=It(t),o=this.include,i=this.exclude;if(o&&(!r||!Tt(o,r))||i&&r&&Tt(i,r))return e;var a=this.cache,s=this.keys,c=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;a[c]?(e.componentInstance=a[c].componentInstance,x(s,c),s.push(c)):(this.vnodeToCache=e,this.keyToCache=c),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return B}};Object.defineProperty(n,"config",e),n.util={warn:pn,extend:O,mergeOptions:$n,defineReactive:Tn},n.set=jn,n.delete=On,n.nextTick=ie,n.observable=function(n){return In(n),n},n.options=Object.create(null),$.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,O(n.options.components,Rt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=j(arguments,1);return t.unshift(this),"function"==typeof n.install?n.install.apply(n,t):"function"==typeof n&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=$n(this.options,n),this}}(n),At(n),function(n){$.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&d(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&"function"==typeof t&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Et),Object.defineProperty(Et.prototype,"$isServer",{get:an}),Object.defineProperty(Et.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Et,"FunctionalRenderContext",{value:Me}),Et.version="2.6.14";var Lt=b("style,class"),qt=b("input,textarea,option,select,progress"),Ft=b("contenteditable,draggable,spellcheck"),Mt=b("events,caret,typing,plaintext-only"),Dt=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),$t="http://www.w3.org/1999/xlink",zt=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},Bt=function(n){return zt(n)?n.slice(6,n.length):""},Nt=function(n){return null==n||!1===n};function Ht(n){for(var e=n.data,t=n,r=n;s(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Ut(r.data,e));for(;s(t=t.parent);)t&&t.data&&(e=Ut(e,t.data));return function(n,e){if(s(n)||s(e))return Vt(n,Jt(e));return""}(e.staticClass,e.class)}function Ut(n,e){return{staticClass:Vt(n.staticClass,e.staticClass),class:s(n.class)?[n.class,e.class]:e.class}}function Vt(n,e){return n?e?n+" "+e:n:e||""}function Jt(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,o=n.length;r<o;r++)s(e=Jt(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):u(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var Wt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Gt=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Kt=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Zt=function(n){return Gt(n)||Kt(n)};var Xt=Object.create(null);var Yt=b("text,number,password,search,email,tel,url");var Qt=Object.freeze({createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(Wt[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),nr={create:function(n,e){er(e)},update:function(n,e){n.data.ref!==e.data.ref&&(er(n,!0),er(e))},destroy:function(n){er(n,!0)}};function er(n,e){var t=n.data.ref;if(s(t)){var r=n.context,o=n.componentInstance||n.elm,i=r.$refs;e?Array.isArray(i[t])?x(i[t],o):i[t]===o&&(i[t]=void 0):n.data.refInFor?Array.isArray(i[t])?i[t].indexOf(o)<0&&i[t].push(o):i[t]=[o]:i[t]=o}}var tr=new vn("",{},[]),rr=["create","activate","update","remove","destroy"];function or(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&s(n.data)===s(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=s(t=n.data)&&s(t=t.attrs)&&t.type,o=s(t=e.data)&&s(t=t.attrs)&&t.type;return r===o||Yt(r)&&Yt(o)}(n,e)||c(n.isAsyncPlaceholder)&&a(e.asyncFactory.error))}function ir(n,e,t){var r,o,i={};for(r=e;r<=t;++r)s(o=n[r].key)&&(i[o]=r);return i}var ar={create:sr,update:sr,destroy:function(n){sr(n,tr)}};function sr(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,o,i=n===tr,a=e===tr,s=lr(n.data.directives,n.context),c=lr(e.data.directives,e.context),l=[],u=[];for(t in c)r=s[t],o=c[t],r?(o.oldValue=r.value,o.oldArg=r.arg,pr(o,"update",e,n),o.def&&o.def.componentUpdated&&u.push(o)):(pr(o,"bind",e,n),o.def&&o.def.inserted&&l.push(o));if(l.length){var p=function(){for(var t=0;t<l.length;t++)pr(l[t],"inserted",e,n)};i?pe(e,"insert",p):p()}u.length&&pe(e,"postpatch",(function(){for(var t=0;t<u.length;t++)pr(u[t],"componentUpdated",e,n)}));if(!i)for(t in s)c[t]||pr(s[t],"unbind",n,n,a)}(n,e)}var cr=Object.create(null);function lr(n,e){var t,r,o=Object.create(null);if(!n)return o;for(t=0;t<n.length;t++)(r=n[t]).modifiers||(r.modifiers=cr),o[ur(r)]=r,r.def=zn(e.$options,"directives",r.name);return o}function ur(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function pr(n,e,t,r,o){var i=n.def&&n.def[e];if(i)try{i(t.elm,n,t,r,o)}catch(r){Jn(r,t.context,"directive "+n.name+" "+e+" hook")}}var dr=[nr,ar];function fr(n,e){var t=e.componentOptions;if(!(s(t)&&!1===t.Ctor.options.inheritAttrs||a(n.data.attrs)&&a(e.data.attrs))){var r,o,i=e.elm,c=n.data.attrs||{},l=e.data.attrs||{};for(r in s(l.__ob__)&&(l=e.data.attrs=O({},l)),l)o=l[r],c[r]!==o&&mr(i,r,o,e.data.pre);for(r in(X||Q)&&l.value!==c.value&&mr(i,"value",l.value),c)a(l[r])&&(zt(r)?i.removeAttributeNS($t,Bt(r)):Ft(r)||i.removeAttribute(r))}}function mr(n,e,t,r){r||n.tagName.indexOf("-")>-1?gr(n,e,t):Dt(e)?Nt(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):Ft(e)?n.setAttribute(e,function(n,e){return Nt(e)||"false"===e?"false":"contenteditable"===n&&Mt(e)?e:"true"}(e,t)):zt(e)?Nt(t)?n.removeAttributeNS($t,Bt(e)):n.setAttributeNS($t,e,t):gr(n,e,t)}function gr(n,e,t){if(Nt(t))n.removeAttribute(e);else{if(X&&!Y&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var hr={create:fr,update:fr};function vr(n,e){var t=e.elm,r=e.data,o=n.data;if(!(a(r.staticClass)&&a(r.class)&&(a(o)||a(o.staticClass)&&a(o.class)))){var i=Ht(e),c=t._transitionClasses;s(c)&&(i=Vt(i,Jt(c))),i!==t._prevClass&&(t.setAttribute("class",i),t._prevClass=i)}}var br,yr={create:vr,update:vr};function xr(n,e,t){var r=br;return function o(){var i=e.apply(null,arguments);null!==i&&wr(n,o,t,r)}}var kr=Xn&&!(en&&Number(en[1])<=53);function Sr(n,e,t,r){if(kr){var o=ut,i=e;e=i._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=o||n.timeStamp<=0||n.target.ownerDocument!==document)return i.apply(this,arguments)}}br.addEventListener(n,e,rn?{capture:t,passive:r}:t)}function wr(n,e,t,r){(r||br).removeEventListener(n,e._wrapper||e,t)}function Cr(n,e){if(!a(n.data.on)||!a(e.data.on)){var t=e.data.on||{},r=n.data.on||{};br=e.elm,function(n){if(s(n.__r)){var e=X?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}s(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),ue(t,r,Sr,wr,xr,e.context),br=void 0}}var _r,Er={create:Cr,update:Cr};function Ar(n,e){if(!a(n.data.domProps)||!a(e.data.domProps)){var t,r,o=e.elm,i=n.data.domProps||{},c=e.data.domProps||{};for(t in s(c.__ob__)&&(c=e.data.domProps=O({},c)),i)t in c||(o[t]="");for(t in c){if(r=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===i[t])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===t&&"PROGRESS"!==o.tagName){o._value=r;var l=a(r)?"":String(r);Ir(o,l)&&(o.value=l)}else if("innerHTML"===t&&Kt(o.tagName)&&a(o.innerHTML)){(_r=_r||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var u=_r.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;u.firstChild;)o.appendChild(u.firstChild)}else if(r!==i[t])try{o[t]=r}catch(n){}}}}function Ir(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(s(r)){if(r.number)return v(t)!==v(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Tr={create:Ar,update:Ar},jr=w((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Or(n){var e=Pr(n.style);return n.staticStyle?O(n.staticStyle,e):e}function Pr(n){return Array.isArray(n)?P(n):"string"==typeof n?jr(n):n}var Rr,Lr=/^--/,qr=/\s*!important$/,Fr=function(n,e,t){if(Lr.test(e))n.style.setProperty(e,t);else if(qr.test(t))n.style.setProperty(I(e),t.replace(qr,""),"important");else{var r=Dr(e);if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)n.style[r]=t[o];else n.style[r]=t}},Mr=["Webkit","Moz","ms"],Dr=w((function(n){if(Rr=Rr||document.createElement("div").style,"filter"!==(n=_(n))&&n in Rr)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<Mr.length;t++){var r=Mr[t]+e;if(r in Rr)return r}}));function $r(n,e){var t=e.data,r=n.data;if(!(a(t.staticStyle)&&a(t.style)&&a(r.staticStyle)&&a(r.style))){var o,i,c=e.elm,l=r.staticStyle,u=r.normalizedStyle||r.style||{},p=l||u,d=Pr(e.data.style)||{};e.data.normalizedStyle=s(d.__ob__)?O({},d):d;var f=function(n,e){var t,r={};if(e)for(var o=n;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(t=Or(o.data))&&O(r,t);(t=Or(n.data))&&O(r,t);for(var i=n;i=i.parent;)i.data&&(t=Or(i.data))&&O(r,t);return r}(e,!0);for(i in p)a(f[i])&&Fr(c,i,"");for(i in f)(o=f[i])!==p[i]&&Fr(c,i,null==o?"":o)}}var zr={create:$r,update:$r},Br=/\s+/;function Nr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Br).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" "+(n.getAttribute("class")||"")+" ";t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function Hr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Br).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" "+(n.getAttribute("class")||"")+" ",r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function Ur(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&O(e,Vr(n.name||"v")),O(e,n),e}return"string"==typeof n?Vr(n):void 0}}var Vr=w((function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}})),Jr=W&&!Y,Wr="transition",Gr="transitionend",Kr="animation",Zr="animationend";Jr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Wr="WebkitTransition",Gr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Kr="WebkitAnimation",Zr="webkitAnimationEnd"));var Xr=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function Yr(n){Xr((function(){Xr(n)}))}function Qr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),Nr(n,e))}function no(n,e){n._transitionClasses&&x(n._transitionClasses,e),Hr(n,e)}function eo(n,e,t){var r=ro(n,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return t();var s="transition"===o?Gr:Zr,c=0,l=function(){n.removeEventListener(s,u),t()},u=function(e){e.target===n&&++c>=a&&l()};setTimeout((function(){c<a&&l()}),i+1),n.addEventListener(s,u)}var to=/\b(transform|all)(,|$)/;function ro(n,e){var t,r=window.getComputedStyle(n),o=(r[Wr+"Delay"]||"").split(", "),i=(r[Wr+"Duration"]||"").split(", "),a=oo(o,i),s=(r[Kr+"Delay"]||"").split(", "),c=(r[Kr+"Duration"]||"").split(", "),l=oo(s,c),u=0,p=0;return"transition"===e?a>0&&(t="transition",u=a,p=i.length):"animation"===e?l>0&&(t="animation",u=l,p=c.length):p=(t=(u=Math.max(a,l))>0?a>l?"transition":"animation":null)?"transition"===t?i.length:c.length:0,{type:t,timeout:u,propCount:p,hasTransform:"transition"===t&&to.test(r[Wr+"Property"])}}function oo(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return io(e)+io(n[t])})))}function io(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function ao(n,e){var t=n.elm;s(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=Ur(n.data.transition);if(!a(r)&&!s(t._enterCb)&&1===t.nodeType){for(var o=r.css,i=r.type,c=r.enterClass,l=r.enterToClass,p=r.enterActiveClass,d=r.appearClass,f=r.appearToClass,m=r.appearActiveClass,g=r.beforeEnter,h=r.enter,b=r.afterEnter,y=r.enterCancelled,x=r.beforeAppear,k=r.appear,S=r.afterAppear,w=r.appearCancelled,C=r.duration,_=Qe,E=Qe.$vnode;E&&E.parent;)_=E.context,E=E.parent;var A=!_._isMounted||!n.isRootInsert;if(!A||k||""===k){var I=A&&d?d:c,T=A&&m?m:p,j=A&&f?f:l,O=A&&x||g,P=A&&"function"==typeof k?k:h,R=A&&S||b,L=A&&w||y,q=v(u(C)?C.enter:C);0;var F=!1!==o&&!Y,M=lo(P),$=t._enterCb=D((function(){F&&(no(t,j),no(t,T)),$.cancelled?(F&&no(t,I),L&&L(t)):R&&R(t),t._enterCb=null}));n.data.show||pe(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),P&&P(t,$)})),O&&O(t),F&&(Qr(t,I),Qr(t,T),Yr((function(){no(t,I),$.cancelled||(Qr(t,j),M||(co(q)?setTimeout($,q):eo(t,i,$)))}))),n.data.show&&(e&&e(),P&&P(t,$)),F||M||$()}}}function so(n,e){var t=n.elm;s(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=Ur(n.data.transition);if(a(r)||1!==t.nodeType)return e();if(!s(t._leaveCb)){var o=r.css,i=r.type,c=r.leaveClass,l=r.leaveToClass,p=r.leaveActiveClass,d=r.beforeLeave,f=r.leave,m=r.afterLeave,g=r.leaveCancelled,h=r.delayLeave,b=r.duration,y=!1!==o&&!Y,x=lo(f),k=v(u(b)?b.leave:b);0;var S=t._leaveCb=D((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(no(t,l),no(t,p)),S.cancelled?(y&&no(t,c),g&&g(t)):(e(),m&&m(t)),t._leaveCb=null}));h?h(w):w()}function w(){S.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),y&&(Qr(t,c),Qr(t,p),Yr((function(){no(t,c),S.cancelled||(Qr(t,l),x||(co(k)?setTimeout(S,k):eo(t,i,S)))}))),f&&f(t,S),y||x||S())}}function co(n){return"number"==typeof n&&!isNaN(n)}function lo(n){if(a(n))return!1;var e=n.fns;return s(e)?lo(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function uo(n,e){!0!==e.data.show&&ao(e)}var po=function(n){var e,t,r={},o=n.modules,i=n.nodeOps;for(e=0;e<rr.length;++e)for(r[rr[e]]=[],t=0;t<o.length;++t)s(o[t][rr[e]])&&r[rr[e]].push(o[t][rr[e]]);function u(n){var e=i.parentNode(n);s(e)&&i.removeChild(e,n)}function p(n,e,t,o,a,l,u){if(s(n.elm)&&s(l)&&(n=l[u]=kn(n)),n.isRootInsert=!a,!function(n,e,t,o){var i=n.data;if(s(i)){var a=s(n.componentInstance)&&i.keepAlive;if(s(i=i.hook)&&s(i=i.init)&&i(n,!1),s(n.componentInstance))return d(n,e),f(t,n.elm,o),c(a)&&function(n,e,t,o){var i,a=n;for(;a.componentInstance;)if(a=a.componentInstance._vnode,s(i=a.data)&&s(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i](tr,a);e.push(a);break}f(t,n.elm,o)}(n,e,t,o),!0}}(n,e,t,o)){var p=n.data,g=n.children,b=n.tag;s(b)?(n.elm=n.ns?i.createElementNS(n.ns,b):i.createElement(b,n),v(n),m(n,g,e),s(p)&&h(n,e),f(t,n.elm,o)):c(n.isComment)?(n.elm=i.createComment(n.text),f(t,n.elm,o)):(n.elm=i.createTextNode(n.text),f(t,n.elm,o))}}function d(n,e){s(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,g(n)?(h(n,e),v(n)):(er(n),e.push(n))}function f(n,e,t){s(n)&&(s(t)?i.parentNode(t)===n&&i.insertBefore(n,e,t):i.appendChild(n,e))}function m(n,e,t){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)p(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&i.appendChild(n.elm,i.createTextNode(String(n.text)))}function g(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return s(n.tag)}function h(n,t){for(var o=0;o<r.create.length;++o)r.create[o](tr,n);s(e=n.data.hook)&&(s(e.create)&&e.create(tr,n),s(e.insert)&&t.push(n))}function v(n){var e;if(s(e=n.fnScopeId))i.setStyleScope(n.elm,e);else for(var t=n;t;)s(e=t.context)&&s(e=e.$options._scopeId)&&i.setStyleScope(n.elm,e),t=t.parent;s(e=Qe)&&e!==n.context&&e!==n.fnContext&&s(e=e.$options._scopeId)&&i.setStyleScope(n.elm,e)}function y(n,e,t,r,o,i){for(;r<=o;++r)p(t[r],i,n,e,!1,t,r)}function x(n){var e,t,o=n.data;if(s(o))for(s(e=o.hook)&&s(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(s(e=n.children))for(t=0;t<n.children.length;++t)x(n.children[t])}function k(n,e,t){for(;e<=t;++e){var r=n[e];s(r)&&(s(r.tag)?(S(r),x(r)):u(r.elm))}}function S(n,e){if(s(e)||s(n.data)){var t,o=r.remove.length+1;for(s(e)?e.listeners+=o:e=function(n,e){function t(){0==--t.listeners&&u(n)}return t.listeners=e,t}(n.elm,o),s(t=n.componentInstance)&&s(t=t._vnode)&&s(t.data)&&S(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);s(t=n.data.hook)&&s(t=t.remove)?t(n,e):e()}else u(n.elm)}function w(n,e,t,r){for(var o=t;o<r;o++){var i=e[o];if(s(i)&&or(n,i))return o}}function C(n,e,t,o,l,u){if(n!==e){s(e.elm)&&s(o)&&(e=o[l]=kn(e));var d=e.elm=n.elm;if(c(n.isAsyncPlaceholder))s(e.asyncFactory.resolved)?A(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(c(e.isStatic)&&c(n.isStatic)&&e.key===n.key&&(c(e.isCloned)||c(e.isOnce)))e.componentInstance=n.componentInstance;else{var f,m=e.data;s(m)&&s(f=m.hook)&&s(f=f.prepatch)&&f(n,e);var h=n.children,v=e.children;if(s(m)&&g(e)){for(f=0;f<r.update.length;++f)r.update[f](n,e);s(f=m.hook)&&s(f=f.update)&&f(n,e)}a(e.text)?s(h)&&s(v)?h!==v&&function(n,e,t,r,o){var c,l,u,d=0,f=0,m=e.length-1,g=e[0],h=e[m],v=t.length-1,b=t[0],x=t[v],S=!o;for(0;d<=m&&f<=v;)a(g)?g=e[++d]:a(h)?h=e[--m]:or(g,b)?(C(g,b,r,t,f),g=e[++d],b=t[++f]):or(h,x)?(C(h,x,r,t,v),h=e[--m],x=t[--v]):or(g,x)?(C(g,x,r,t,v),S&&i.insertBefore(n,g.elm,i.nextSibling(h.elm)),g=e[++d],x=t[--v]):or(h,b)?(C(h,b,r,t,f),S&&i.insertBefore(n,h.elm,g.elm),h=e[--m],b=t[++f]):(a(c)&&(c=ir(e,d,m)),a(l=s(b.key)?c[b.key]:w(b,e,d,m))?p(b,r,n,g.elm,!1,t,f):or(u=e[l],b)?(C(u,b,r,t,f),e[l]=void 0,S&&i.insertBefore(n,u.elm,g.elm)):p(b,r,n,g.elm,!1,t,f),b=t[++f]);d>m?y(n,a(t[v+1])?null:t[v+1].elm,t,f,v,r):f>v&&k(e,d,m)}(d,h,v,t,u):s(v)?(s(n.text)&&i.setTextContent(d,""),y(d,null,v,0,v.length-1,t)):s(h)?k(h,0,h.length-1):s(n.text)&&i.setTextContent(d,""):n.text!==e.text&&i.setTextContent(d,e.text),s(m)&&s(f=m.hook)&&s(f=f.postpatch)&&f(n,e)}}}function _(n,e,t){if(c(t)&&s(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var E=b("attrs,class,staticClass,staticStyle,key");function A(n,e,t,r){var o,i=e.tag,a=e.data,l=e.children;if(r=r||a&&a.pre,e.elm=n,c(e.isComment)&&s(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(s(a)&&(s(o=a.hook)&&s(o=o.init)&&o(e,!0),s(o=e.componentInstance)))return d(e,t),!0;if(s(i)){if(s(l))if(n.hasChildNodes())if(s(o=a)&&s(o=o.domProps)&&s(o=o.innerHTML)){if(o!==n.innerHTML)return!1}else{for(var u=!0,p=n.firstChild,f=0;f<l.length;f++){if(!p||!A(p,l[f],t,r)){u=!1;break}p=p.nextSibling}if(!u||p)return!1}else m(e,l,t);if(s(a)){var g=!1;for(var v in a)if(!E(v)){g=!0,h(e,t);break}!g&&a.class&&se(a.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,o){if(!a(e)){var l,u=!1,d=[];if(a(n))u=!0,p(e,d);else{var f=s(n.nodeType);if(!f&&or(n,e))C(n,e,d,null,null,o);else{if(f){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),c(t)&&A(n,e,d))return _(e,d,!0),n;l=n,n=new vn(i.tagName(l).toLowerCase(),{},[],void 0,l)}var m=n.elm,h=i.parentNode(m);if(p(e,d,m._leaveCb?null:h,i.nextSibling(m)),s(e.parent))for(var v=e.parent,b=g(e);v;){for(var y=0;y<r.destroy.length;++y)r.destroy[y](v);if(v.elm=e.elm,b){for(var S=0;S<r.create.length;++S)r.create[S](tr,v);var w=v.data.hook.insert;if(w.merged)for(var E=1;E<w.fns.length;E++)w.fns[E]()}else er(v);v=v.parent}s(h)?k([n],0,0):s(n.tag)&&x(n)}}return _(e,d,u),e.elm}s(n)&&x(n)}}({nodeOps:Qt,modules:[hr,yr,Er,Tr,zr,W?{create:uo,activate:uo,remove:function(n,e){!0!==n.data.show?so(n,e):e()}}:{}].concat(dr)});Y&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&xo(n,"input")}));var fo={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?pe(t,"postpatch",(function(){fo.componentUpdated(n,e,t)})):mo(n,e,t.context),n._vOptions=[].map.call(n.options,vo)):("textarea"===t.tag||Yt(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",bo),n.addEventListener("compositionend",yo),n.addEventListener("change",yo),Y&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){mo(n,e,t.context);var r=n._vOptions,o=n._vOptions=[].map.call(n.options,vo);if(o.some((function(n,e){return!F(n,r[e])})))(n.multiple?e.value.some((function(n){return ho(n,o)})):e.value!==e.oldValue&&ho(e.value,o))&&xo(n,"change")}}};function mo(n,e,t){go(n,e,t),(X||Q)&&setTimeout((function(){go(n,e,t)}),0)}function go(n,e,t){var r=e.value,o=n.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=n.options.length;s<c;s++)if(a=n.options[s],o)i=M(r,vo(a))>-1,a.selected!==i&&(a.selected=i);else if(F(vo(a),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));o||(n.selectedIndex=-1)}}function ho(n,e){return e.every((function(e){return!F(e,n)}))}function vo(n){return"_value"in n?n._value:n.value}function bo(n){n.target.composing=!0}function yo(n){n.target.composing&&(n.target.composing=!1,xo(n.target,"input"))}function xo(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function ko(n){return!n.componentInstance||n.data&&n.data.transition?n:ko(n.componentInstance._vnode)}var So={model:fo,show:{bind:function(n,e,t){var r=e.value,o=(t=ko(t)).data&&t.data.transition,i=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&o?(t.data.show=!0,ao(t,(function(){n.style.display=i}))):n.style.display=r?i:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=ko(t)).data&&t.data.transition?(t.data.show=!0,r?ao(t,(function(){n.style.display=n.__vOriginalDisplay})):so(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,o){o||(n.style.display=n.__vOriginalDisplay)}}},wo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Co(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Co(Ge(e.children)):n}function _o(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var o=t._parentListeners;for(var i in o)e[_(i)]=o[i];return e}function Eo(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Ao=function(n){return n.tag||be(n)},Io=function(n){return"show"===n.name},To={name:"transition",props:wo,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Ao)).length){0;var r=this.mode;0;var o=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return o;var i=Co(o);if(!i)return o;if(this._leaving)return Eo(n,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:l(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var s=(i.data||(i.data={})).transition=_o(this),c=this._vnode,u=Co(c);if(i.data.directives&&i.data.directives.some(Io)&&(i.data.show=!0),u&&u.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(i,u)&&!be(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var p=u.data.transition=O({},s);if("out-in"===r)return this._leaving=!0,pe(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Eo(n,o);if("in-out"===r){if(be(i))return c;var d,f=function(){d()};pe(s,"afterEnter",f),pe(s,"enterCancelled",f),pe(p,"delayLeave",(function(n){d=n}))}}return o}}},jo=O({tag:String,moveClass:String},wo);function Oo(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Po(n){n.data.newPos=n.elm.getBoundingClientRect()}function Ro(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,o=e.top-t.top;if(r||o){n.data.moved=!0;var i=n.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete jo.mode;var Lo={Transition:To,TransitionGroup:{props:jo,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var o=nt(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,o(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=_o(this),s=0;s<o.length;s++){var c=o[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),t[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(r){for(var l=[],u=[],p=0;p<r.length;p++){var d=r[p];d.data.transition=a,d.data.pos=d.elm.getBoundingClientRect(),t[d.key]?l.push(d):u.push(d)}this.kept=n(e,null,l),this.removed=u}return n(e,null,i)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Oo),n.forEach(Po),n.forEach(Ro),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;Qr(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(Gr,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(Gr,n),t._moveCb=null,no(t,e))})}})))},methods:{hasMove:function(n,e){if(!Jr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){Hr(t,n)})),Nr(t,e),t.style.display="none",this.$el.appendChild(t);var r=ro(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};Et.config.mustUseProp=function(n,e,t){return"value"===t&&qt(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Et.config.isReservedTag=Zt,Et.config.isReservedAttr=Lt,Et.config.getTagNamespace=function(n){return Kt(n)?"svg":"math"===n?"math":void 0},Et.config.isUnknownElement=function(n){if(!W)return!0;if(Zt(n))return!1;if(n=n.toLowerCase(),null!=Xt[n])return Xt[n];var e=document.createElement(n);return n.indexOf("-")>-1?Xt[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Xt[n]=/HTMLUnknownElement/.test(e.toString())},O(Et.options.directives,So),O(Et.options.components,Lo),Et.prototype.__patch__=W?po:R,Et.prototype.$mount=function(n,e){return function(n,e,t){var r;return n.$el=e,n.$options.render||(n.$options.render=yn),rt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new gt(n,r,R,{before:function(){n._isMounted&&!n._isDestroyed&&rt(n,"beforeUpdate")}},!0),t=!1,null==n.$vnode&&(n._isMounted=!0,rt(n,"mounted")),n}(this,n=n&&W?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},W&&setTimeout((function(){B.devtools&&sn&&sn.emit("init",Et)}),0);var qo=Et;
/*!
  * vue-router v3.5.3
  * (c) 2021 Evan You
  * @license MIT
  */function Fo(n,e){for(var t in e)n[t]=e[t];return n}var Mo=/[!'()*]/g,Do=function(n){return"%"+n.charCodeAt(0).toString(16)},$o=/%2C/g,zo=function(n){return encodeURIComponent(n).replace(Mo,Do).replace($o,",")};function Bo(n){try{return decodeURIComponent(n)}catch(n){0}return n}var No=function(n){return null==n||"object"==typeof n?n:String(n)};function Ho(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=Bo(t.shift()),o=t.length>0?Bo(t.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]})),e):e}function Uo(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return zo(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(zo(e)):r.push(zo(e)+"="+zo(n)))})),r.join("&")}return zo(e)+"="+zo(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var Vo=/\/?$/;function Jo(n,e,t,r){var o=r&&r.options.stringifyQuery,i=e.query||{};try{i=Wo(i)}catch(n){}var a={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:Zo(e,o),matched:n?Ko(n):[]};return t&&(a.redirectedFrom=Zo(t,o)),Object.freeze(a)}function Wo(n){if(Array.isArray(n))return n.map(Wo);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=Wo(n[t]);return e}return n}var Go=Jo(null,{path:"/"});function Ko(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function Zo(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var o=n.hash;return void 0===o&&(o=""),(t||"/")+(e||Uo)(r)+o}function Xo(n,e,t){return e===Go?n===e:!!e&&(n.path&&e.path?n.path.replace(Vo,"")===e.path.replace(Vo,"")&&(t||n.hash===e.hash&&Yo(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&Yo(n.query,e.query)&&Yo(n.params,e.params))))}function Yo(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,o){var i=n[t];if(r[o]!==t)return!1;var a=e[t];return null==i||null==a?i===a:"object"==typeof i&&"object"==typeof a?Yo(i,a):String(i)===String(a)}))}function Qo(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var o=t.instances[r],i=t.enteredCbs[r];if(o&&i){delete t.enteredCbs[r];for(var a=0;a<i.length;a++)o._isBeingDestroyed||i[a](o)}}}}var ni={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,o=e.parent,i=e.data;i.routerView=!0;for(var a=o.$createElement,s=t.name,c=o.$route,l=o._routerViewCache||(o._routerViewCache={}),u=0,p=!1;o&&o._routerRoot!==o;){var d=o.$vnode?o.$vnode.data:{};d.routerView&&u++,d.keepAlive&&o._directInactive&&o._inactive&&(p=!0),o=o.$parent}if(i.routerViewDepth=u,p){var f=l[s],m=f&&f.component;return m?(f.configProps&&ei(m,i,f.route,f.configProps),a(m,i,r)):a()}var g=c.matched[u],h=g&&g.components[s];if(!g||!h)return l[s]=null,a();l[s]={component:h},i.registerRouteInstance=function(n,e){var t=g.instances[s];(e&&t!==n||!e&&t===n)&&(g.instances[s]=e)},(i.hook||(i.hook={})).prepatch=function(n,e){g.instances[s]=e.componentInstance},i.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==g.instances[s]&&(g.instances[s]=n.componentInstance),Qo(c)};var v=g.props&&g.props[s];return v&&(Fo(l[s],{route:c,configProps:v}),ei(h,i,c,v)),a(h,i,r)}};function ei(n,e,t,r){var o=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(o){o=e.props=Fo({},o);var i=e.attrs=e.attrs||{};for(var a in o)n.props&&a in n.props||(i[a]=o[a],delete o[a])}}function ti(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var o=e.split("/");t&&o[o.length-1]||o.pop();for(var i=n.replace(/^\//,"").split("/"),a=0;a<i.length;a++){var s=i[a];".."===s?o.pop():"."!==s&&o.push(s)}return""!==o[0]&&o.unshift(""),o.join("/")}function ri(n){return n.replace(/\/+/g,"/")}var oi=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},ii=yi,ai=pi,si=function(n,e){return fi(pi(n,e),e)},ci=fi,li=bi,ui=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function pi(n,e){for(var t,r=[],o=0,i=0,a="",s=e&&e.delimiter||"/";null!=(t=ui.exec(n));){var c=t[0],l=t[1],u=t.index;if(a+=n.slice(i,u),i=u+c.length,l)a+=l[1];else{var p=n[i],d=t[2],f=t[3],m=t[4],g=t[5],h=t[6],v=t[7];a&&(r.push(a),a="");var b=null!=d&&null!=p&&p!==d,y="+"===h||"*"===h,x="?"===h||"*"===h,k=t[2]||s,S=m||g;r.push({name:f||o++,prefix:d||"",delimiter:k,optional:x,repeat:y,partial:b,asterisk:!!v,pattern:S?gi(S):v?".*":"[^"+mi(k)+"]+?"})}}return i<n.length&&(a+=n.substr(i)),a&&r.push(a),r}function di(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function fi(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",vi(e)));return function(e,r){for(var o="",i=e||{},a=(r||{}).pretty?di:encodeURIComponent,s=0;s<n.length;s++){var c=n[s];if("string"!=typeof c){var l,u=i[c.name];if(null==u){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(oi(u)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<u.length;p++){if(l=a(u[p]),!t[s].test(l))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(l)+"`");o+=(0===p?c.prefix:c.delimiter)+l}}else{if(l=c.asterisk?encodeURI(u).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):a(u),!t[s].test(l))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+l+'"');o+=c.prefix+l}}else o+=c}return o}}function mi(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function gi(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function hi(n,e){return n.keys=e,n}function vi(n){return n&&n.sensitive?"":"i"}function bi(n,e,t){oi(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,o=!1!==t.end,i="",a=0;a<n.length;a++){var s=n[a];if("string"==typeof s)i+=mi(s);else{var c=mi(s.prefix),l="(?:"+s.pattern+")";e.push(s),s.repeat&&(l+="(?:"+c+l+")*"),i+=l=s.optional?s.partial?c+"("+l+")?":"(?:"+c+"("+l+"))?":c+"("+l+")"}}var u=mi(t.delimiter||"/"),p=i.slice(-u.length)===u;return r||(i=(p?i.slice(0,-u.length):i)+"(?:"+u+"(?=$))?"),i+=o?"$":r&&p?"":"(?="+u+"|$)",hi(new RegExp("^"+i,vi(t)),e)}function yi(n,e,t){return oi(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return hi(n,e)}(n,e):oi(n)?function(n,e,t){for(var r=[],o=0;o<n.length;o++)r.push(yi(n[o],e,t).source);return hi(new RegExp("(?:"+r.join("|")+")",vi(t)),e)}(n,e,t):function(n,e,t){return bi(pi(n,t),e,t)}(n,e,t)}ii.parse=ai,ii.compile=si,ii.tokensToFunction=ci,ii.tokensToRegExp=li;var xi=Object.create(null);function ki(n,e,t){e=e||{};try{var r=xi[n]||(xi[n]=ii.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function Si(n,e,t,r){var o="string"==typeof n?{path:n}:n;if(o._normalized)return o;if(o.name){var i=(o=Fo({},n)).params;return i&&"object"==typeof i&&(o.params=Fo({},i)),o}if(!o.path&&o.params&&e){(o=Fo({},o))._normalized=!0;var a=Fo(Fo({},e.params),o.params);if(e.name)o.name=e.name,o.params=a;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;o.path=ki(s,a,e.path)}else 0;return o}var c=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var o=n.indexOf("?");return o>=0&&(t=n.slice(o+1),n=n.slice(0,o)),{path:n,query:t,hash:e}}(o.path||""),l=e&&e.path||"/",u=c.path?ti(c.path,l,t||o.append):l,p=function(n,e,t){void 0===e&&(e={});var r,o=t||Ho;try{r=o(n||"")}catch(n){r={}}for(var i in e){var a=e[i];r[i]=Array.isArray(a)?a.map(No):No(a)}return r}(c.query,o.query,r&&r.options.parseQuery),d=o.hash||c.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:u,query:p,hash:d}}var wi,Ci=function(){},_i={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,o=t.resolve(this.to,r,this.append),i=o.location,a=o.route,s=o.href,c={},l=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==l?"router-link-active":l,d=null==u?"router-link-exact-active":u,f=null==this.activeClass?p:this.activeClass,m=null==this.exactActiveClass?d:this.exactActiveClass,g=a.redirectedFrom?Jo(null,Si(a.redirectedFrom),null,t):a;c[m]=Xo(r,g,this.exactPath),c[f]=this.exact||this.exactPath?c[m]:function(n,e){return 0===n.path.replace(Vo,"/").indexOf(e.path.replace(Vo,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,g);var h=c[m]?this.ariaCurrentValue:null,v=function(n){Ei(n)&&(e.replace?t.replace(i,Ci):t.push(i,Ci))},b={click:Ei};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var y={class:c},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:a,navigate:v,isActive:c[f],isExactActive:c[m]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)y.on=b,y.attrs={href:s,"aria-current":h};else{var k=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(k){k.isStatic=!1;var S=k.data=Fo({},k.data);for(var w in S.on=S.on||{},S.on){var C=S.on[w];w in b&&(S.on[w]=Array.isArray(C)?C:[C])}for(var _ in b)_ in S.on?S.on[_].push(b[_]):S.on[_]=v;var E=k.data.attrs=Fo({},k.data.attrs);E.href=s,E["aria-current"]=h}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Ei(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Ai="undefined"!=typeof window;function Ii(n,e,t,r,o){var i=e||[],a=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,o,i,a){var s=o.path,c=o.name;0;var l=o.pathToRegexpOptions||{},u=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ri(e.path+"/"+n)}(s,i,l.strict);"boolean"==typeof o.caseSensitive&&(l.sensitive=o.caseSensitive);var p={path:u,regex:Ti(u,l),components:o.components||{default:o.component},alias:o.alias?"string"==typeof o.alias?[o.alias]:o.alias:[],instances:{},enteredCbs:{},name:c,parent:i,matchAs:a,redirect:o.redirect,beforeEnter:o.beforeEnter,meta:o.meta||{},props:null==o.props?{}:o.components?o.props:{default:o.props}};o.children&&o.children.forEach((function(o){var i=a?ri(a+"/"+o.path):void 0;n(e,t,r,o,p,i)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==o.alias)for(var d=Array.isArray(o.alias)?o.alias:[o.alias],f=0;f<d.length;++f){0;var m={path:d[f],children:o.children};n(e,t,r,m,i,p.path||"/")}c&&(r[c]||(r[c]=p))}(i,a,s,n,o)}));for(var c=0,l=i.length;c<l;c++)"*"===i[c]&&(i.push(i.splice(c,1)[0]),l--,c--);return{pathList:i,pathMap:a,nameMap:s}}function Ti(n,e){return ii(n,[],e)}function ji(n,e){var t=Ii(n),r=t.pathList,o=t.pathMap,i=t.nameMap;function a(n,t,a){var s=Si(n,t,!1,e),l=s.name;if(l){var u=i[l];if(!u)return c(null,s);var p=u.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in s.params)&&p.indexOf(d)>-1&&(s.params[d]=t.params[d]);return s.path=ki(u.path,s.params),c(u,s,a)}if(s.path){s.params={};for(var f=0;f<r.length;f++){var m=r[f],g=o[m];if(Oi(g.regex,s.path,s.params))return c(g,s,a)}}return c(null,s)}function s(n,t){var r=n.redirect,o="function"==typeof r?r(Jo(n,t,null,e)):r;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return c(null,t);var s=o,l=s.name,u=s.path,p=t.query,d=t.hash,f=t.params;if(p=s.hasOwnProperty("query")?s.query:p,d=s.hasOwnProperty("hash")?s.hash:d,f=s.hasOwnProperty("params")?s.params:f,l){i[l];return a({_normalized:!0,name:l,query:p,hash:d,params:f},void 0,t)}if(u){var m=function(n,e){return ti(n,e.parent?e.parent.path:"/",!0)}(u,n);return a({_normalized:!0,path:ki(m,f),query:p,hash:d},void 0,t)}return c(null,t)}function c(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=a({_normalized:!0,path:ki(t,e.params)});if(r){var o=r.matched,i=o[o.length-1];return e.params=r.params,c(i,e)}return c(null,e)}(0,t,n.matchAs):Jo(n,t,r,e)}return{match:a,addRoute:function(n,e){var t="object"!=typeof n?i[n]:void 0;Ii([e||n],r,o,i,t),t&&t.alias.length&&Ii(t.alias.map((function(n){return{path:n,children:[e]}})),r,o,i,t)},getRoutes:function(){return r.map((function(n){return o[n]}))},addRoutes:function(n){Ii(n,r,o,i)}}}function Oi(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var o=1,i=r.length;o<i;++o){var a=n.keys[o-1];a&&(t[a.name||"pathMatch"]="string"==typeof r[o]?Bo(r[o]):r[o])}return!0}var Pi=Ai&&window.performance&&window.performance.now?window.performance:Date;function Ri(){return Pi.now().toFixed(3)}var Li=Ri();function qi(){return Li}function Fi(n){return Li=n}var Mi=Object.create(null);function Di(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=Fo({},window.history.state);return t.key=qi(),window.history.replaceState(t,"",e),window.addEventListener("popstate",Bi),function(){window.removeEventListener("popstate",Bi)}}function $i(n,e,t,r){if(n.app){var o=n.options.scrollBehavior;o&&n.app.$nextTick((function(){var i=function(){var n=qi();if(n)return Mi[n]}(),a=o.call(n,e,t,r?i:null);a&&("function"==typeof a.then?a.then((function(n){Ji(n,i)})).catch((function(n){0})):Ji(a,i))}))}}function zi(){var n=qi();n&&(Mi[n]={x:window.pageXOffset,y:window.pageYOffset})}function Bi(n){zi(),n.state&&n.state.key&&Fi(n.state.key)}function Ni(n){return Ui(n.x)||Ui(n.y)}function Hi(n){return{x:Ui(n.x)?n.x:window.pageXOffset,y:Ui(n.y)?n.y:window.pageYOffset}}function Ui(n){return"number"==typeof n}var Vi=/^#\d/;function Ji(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var o=Vi.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(o){var i=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(o,i={x:Ui((t=i).x)?t.x:0,y:Ui(t.y)?t.y:0})}else Ni(n)&&(e=Hi(n))}else r&&Ni(n)&&(e=Hi(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var Wi,Gi=Ai&&((-1===(Wi=window.navigator.userAgent).indexOf("Android 2.")&&-1===Wi.indexOf("Android 4.0")||-1===Wi.indexOf("Mobile Safari")||-1!==Wi.indexOf("Chrome")||-1!==Wi.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function Ki(n,e){zi();var t=window.history;try{if(e){var r=Fo({},t.state);r.key=qi(),t.replaceState(r,"",n)}else t.pushState({key:Fi(Ri())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function Zi(n){Ki(n,!0)}function Xi(n,e,t){var r=function(o){o>=n.length?t():n[o]?e(n[o],(function(){r(o+1)})):r(o+1)};r(0)}var Yi={redirected:2,aborted:4,cancelled:8,duplicated:16};function Qi(n,e){return ea(n,e,Yi.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return ta.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function na(n,e){return ea(n,e,Yi.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function ea(n,e,t,r){var o=new Error(r);return o._isRouter=!0,o.from=n,o.to=e,o.type=t,o}var ta=["params","query","hash"];function ra(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function oa(n,e){return ra(n)&&n._isRouter&&(null==e||n.type===e)}function ia(n){return function(e,t,r){var o=!1,i=0,a=null;aa(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){o=!0,i++;var c,l=la((function(e){var o;((o=e).__esModule||ca&&"Module"===o[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:wi.extend(e),t.components[s]=e,--i<=0&&r()})),u=la((function(n){var e="Failed to resolve async component "+s+": "+n;a||(a=ra(n)?n:new Error(e),r(a))}));try{c=n(l,u)}catch(n){u(n)}if(c)if("function"==typeof c.then)c.then(l,u);else{var p=c.component;p&&"function"==typeof p.then&&p.then(l,u)}}})),o||r()}}function aa(n,e){return sa(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function sa(n){return Array.prototype.concat.apply([],n)}var ca="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function la(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var ua=function(n,e){this.router=n,this.base=function(n){if(!n)if(Ai){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=Go,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function pa(n,e,t,r){var o=aa(n,(function(n,r,o,i){var a=function(n,e){"function"!=typeof n&&(n=wi.extend(n));return n.options[e]}(n,e);if(a)return Array.isArray(a)?a.map((function(n){return t(n,r,o,i)})):t(a,r,o,i)}));return sa(r?o.reverse():o)}function da(n,e){if(e)return function(){return n.apply(e,arguments)}}ua.prototype.listen=function(n){this.cb=n},ua.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},ua.prototype.onError=function(n){this.errorCbs.push(n)},ua.prototype.transitionTo=function(n,e,t){var r,o=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var i=this.current;this.confirmTransition(r,(function(){o.updateRoute(r),e&&e(r),o.ensureURL(),o.router.afterHooks.forEach((function(n){n&&n(r,i)})),o.ready||(o.ready=!0,o.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!o.ready&&(oa(n,Yi.redirected)&&i===Go||(o.ready=!0,o.readyErrorCbs.forEach((function(e){e(n)}))))}))},ua.prototype.confirmTransition=function(n,e,t){var r=this,o=this.current;this.pending=n;var i,a,s=function(n){!oa(n)&&ra(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},c=n.matched.length-1,l=o.matched.length-1;if(Xo(n,o)&&c===l&&n.matched[c]===o.matched[l])return this.ensureURL(),n.hash&&$i(this.router,o,n,!1),s(((a=ea(i=o,n,Yi.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",a));var u=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=u.updated,d=u.deactivated,f=u.activated,m=[].concat(function(n){return pa(n,"beforeRouteLeave",da,!0)}(d),this.router.beforeHooks,function(n){return pa(n,"beforeRouteUpdate",da)}(p),f.map((function(n){return n.beforeEnter})),ia(f)),g=function(e,t){if(r.pending!==n)return s(na(o,n));try{e(n,o,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return ea(n,e,Yi.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(o,n))):ra(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(Qi(o,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Xi(m,g,(function(){Xi(function(n){return pa(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,o,i){return n(r,o,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),i(n)}))}}(n,t,r)}))}(f).concat(r.router.resolveHooks),g,(function(){if(r.pending!==n)return s(na(o,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){Qo(n)}))}))}))},ua.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},ua.prototype.setupListeners=function(){},ua.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=Go,this.pending=null};var fa=function(n){function e(e,t){n.call(this,e,t),this._startLocation=ma(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=Gi&&t;r&&this.listeners.push(Di());var o=function(){var t=n.current,o=ma(n.base);n.current===Go&&o===n._startLocation||n.transitionTo(o,(function(n){r&&$i(e,n,t,!0)}))};window.addEventListener("popstate",o),this.listeners.push((function(){window.removeEventListener("popstate",o)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Ki(ri(r.base+n.fullPath)),$i(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Zi(ri(r.base+n.fullPath)),$i(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(ma(this.base)!==this.current.fullPath){var e=ri(this.base+this.current.fullPath);n?Ki(e):Zi(e)}},e.prototype.getCurrentLocation=function(){return ma(this.base)},e}(ua);function ma(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(ri(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var ga=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=ma(n);if(!/^\/#/.test(e))return window.location.replace(ri(n+"/#"+e)),!0}(this.base)||ha()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=Gi&&e;t&&this.listeners.push(Di());var r=function(){var e=n.current;ha()&&n.transitionTo(va(),(function(r){t&&$i(n.router,r,e,!0),Gi||xa(r.fullPath)}))},o=Gi?"popstate":"hashchange";window.addEventListener(o,r),this.listeners.push((function(){window.removeEventListener(o,r)}))}},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){ya(n.fullPath),$i(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){xa(n.fullPath),$i(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;va()!==e&&(n?ya(e):xa(e))},e.prototype.getCurrentLocation=function(){return va()},e}(ua);function ha(){var n=va();return"/"===n.charAt(0)||(xa("/"+n),!1)}function va(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function ba(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function ya(n){Gi?Ki(ba(n)):window.location.hash=n}function xa(n){Gi?Zi(ba(n)):window.location.replace(ba(n))}var ka=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){oa(n,Yi.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(ua),Sa=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=ji(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!Gi&&!1!==n.fallback,this.fallback&&(e="hash"),Ai||(e="abstract"),this.mode=e,e){case"history":this.history=new fa(this,n.base);break;case"hash":this.history=new ga(this,n.base,this.fallback);break;case"abstract":this.history=new ka(this,n.base);break;default:0}},wa={currentRoute:{configurable:!0}};function Ca(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Sa.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},wa.currentRoute.get=function(){return this.history&&this.history.current},Sa.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof fa||t instanceof ga){var r=function(n){t.setupListeners(),function(n){var r=t.current,o=e.options.scrollBehavior;Gi&&o&&"fullPath"in n&&$i(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Sa.prototype.beforeEach=function(n){return Ca(this.beforeHooks,n)},Sa.prototype.beforeResolve=function(n){return Ca(this.resolveHooks,n)},Sa.prototype.afterEach=function(n){return Ca(this.afterHooks,n)},Sa.prototype.onReady=function(n,e){this.history.onReady(n,e)},Sa.prototype.onError=function(n){this.history.onError(n)},Sa.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Sa.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Sa.prototype.go=function(n){this.history.go(n)},Sa.prototype.back=function(){this.go(-1)},Sa.prototype.forward=function(){this.go(1)},Sa.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Sa.prototype.resolve=function(n,e,t){var r=Si(n,e=e||this.history.current,t,this),o=this.match(r,e),i=o.redirectedFrom||o.fullPath;return{location:r,route:o,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?ri(n+"/"+r):r}(this.history.base,i,this.mode),normalizedTo:r,resolved:o}},Sa.prototype.getRoutes=function(){return this.matcher.getRoutes()},Sa.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==Go&&this.history.transitionTo(this.history.getCurrentLocation())},Sa.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==Go&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Sa.prototype,wa),Sa.install=function n(e){if(!n.installed||wi!==e){n.installed=!0,wi=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",ni),e.component("RouterLink",_i);var o=e.config.optionMergeStrategies;o.beforeRouteEnter=o.beforeRouteLeave=o.beforeRouteUpdate=o.created}},Sa.version="3.5.3",Sa.isNavigationFailure=oa,Sa.NavigationFailureType=Yi,Sa.START_LOCATION=Go,Ai&&window.Vue&&window.Vue.use(Sa);var _a=Sa;t(218),t(166),t(245),t(129),t(247),t(41),t(42),t(248);function Ea(n){n.locales&&Object.keys(n.locales).forEach((function(e){n.locales[e].path=e})),Object.freeze(n)}t(71),t(86),t(114);function Aa(n){return(Aa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var Ia=t(66),Ta=(t(176),t(19),t(50),t(220),t(221),t(38),t(27),{NotFound:function(){return Promise.all([t.e(0),t.e(4)]).then(t.bind(null,457))},Layout:function(){return Promise.all([t.e(0),t.e(2)]).then(t.bind(null,456))}}),ja={"v-4230f2b8":function(){return t.e(5).then(t.bind(null,458))},"v-27650964":function(){return t.e(7).then(t.bind(null,459))},"v-a6c825f6":function(){return t.e(8).then(t.bind(null,460))},"v-5e86f964":function(){return t.e(6).then(t.bind(null,461))},"v-132872a4":function(){return t.e(12).then(t.bind(null,462))},"v-0f4686bd":function(){return t.e(9).then(t.bind(null,463))},"v-1b130856":function(){return t.e(11).then(t.bind(null,464))},"v-8eca6630":function(){return t.e(10).then(t.bind(null,465))},"v-23a14f94":function(){return t.e(15).then(t.bind(null,466))},"v-5a25e37c":function(){return t.e(13).then(t.bind(null,467))},"v-5adbd3ee":function(){return t.e(14).then(t.bind(null,468))},"v-77ea87d1":function(){return t.e(16).then(t.bind(null,469))},"v-4a1ffff1":function(){return t.e(18).then(t.bind(null,470))},"v-75e52150":function(){return t.e(17).then(t.bind(null,471))},"v-0f543b28":function(){return t.e(21).then(t.bind(null,472))},"v-e19de712":function(){return t.e(20).then(t.bind(null,473))},"v-6d052887":function(){return t.e(22).then(t.bind(null,474))},"v-9e56b172":function(){return t.e(19).then(t.bind(null,475))},"v-04e28f5d":function(){return t.e(27).then(t.bind(null,476))},"v-28e19cf6":function(){return t.e(23).then(t.bind(null,477))},"v-756e17ea":function(){return t.e(28).then(t.bind(null,478))},"v-12f03108":function(){return t.e(25).then(t.bind(null,479))},"v-eb17e3ba":function(){return t.e(24).then(t.bind(null,480))},"v-5b6ab6f4":function(){return t.e(30).then(t.bind(null,481))},"v-60856549":function(){return t.e(29).then(t.bind(null,482))},"v-3dc354ce":function(){return t.e(26).then(t.bind(null,483))},"v-58424274":function(){return t.e(31).then(t.bind(null,484))},"v-615a1077":function(){return t.e(34).then(t.bind(null,485))},"v-580b7546":function(){return t.e(32).then(t.bind(null,486))},"v-71e974f6":function(){return t.e(33).then(t.bind(null,487))},"v-7c51b72e":function(){return t.e(37).then(t.bind(null,488))},"v-01559c4f":function(){return t.e(35).then(t.bind(null,489))},"v-0132317e":function(){return t.e(36).then(t.bind(null,490))},"v-d562bad8":function(){return t.e(38).then(t.bind(null,491))},"v-70126c55":function(){return t.e(39).then(t.bind(null,492))},"v-7f59dca8":function(){return t.e(40).then(t.bind(null,493))},"v-fbbdbad4":function(){return t.e(44).then(t.bind(null,494))},"v-378ffdba":function(){return t.e(41).then(t.bind(null,495))},"v-1a06a0e3":function(){return t.e(42).then(t.bind(null,496))},"v-3a0bf3ea":function(){return t.e(46).then(t.bind(null,497))},"v-0eeea534":function(){return t.e(45).then(t.bind(null,498))},"v-81d0fc34":function(){return t.e(43).then(t.bind(null,499))},"v-69e94cdb":function(){return t.e(48).then(t.bind(null,500))},"v-22703206":function(){return t.e(47).then(t.bind(null,501))},"v-223c1c3d":function(){return t.e(49).then(t.bind(null,502))},"v-0d152759":function(){return t.e(50).then(t.bind(null,503))},"v-5cb7a644":function(){return t.e(51).then(t.bind(null,504))},"v-68b5e90a":function(){return t.e(52).then(t.bind(null,505))},"v-c2d1e070":function(){return t.e(53).then(t.bind(null,506))},"v-55050ab4":function(){return t.e(55).then(t.bind(null,507))},"v-2f18dbfd":function(){return t.e(56).then(t.bind(null,508))},"v-6b9fdb5d":function(){return t.e(57).then(t.bind(null,509))},"v-5c32397d":function(){return t.e(58).then(t.bind(null,510))},"v-75b04329":function(){return t.e(59).then(t.bind(null,511))},"v-5cfae26a":function(){return t.e(54).then(t.bind(null,512))}};function Oa(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var Pa=/-(\w)/g,Ra=Oa((function(n){return n.replace(Pa,(function(n,e){return e?e.toUpperCase():""}))})),La=/\B([A-Z])/g,qa=Oa((function(n){return n.replace(La,"-$1").toLowerCase()})),Fa=Oa((function(n){return n.charAt(0).toUpperCase()+n.slice(1)}));function Ma(n,e){if(e)return n(e)?n(e):e.includes("-")?n(Fa(Ra(e))):n(Fa(e))||n(qa(e))}var Da=Object.assign({},Ta,ja),$a=function(n){return Da[n]},za=function(n){return ja[n]},Ba=function(n){return Ta[n]},Na=function(n){return qo.component(n)};function Ha(n){return Ma(za,n)}function Ua(n){return Ma(Ba,n)}function Va(n){return Ma($a,n)}function Ja(n){return Ma(Na,n)}function Wa(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return Promise.all(e.filter((function(n){return n})).map(function(){var n=o(regeneratorRuntime.mark((function n(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(Ja(e)||!Va(e)){n.next=5;break}return n.next=3,Va(e)();case 3:t=n.sent,qo.component(e,t.default);case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()))}function Ga(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}t(72);var Ka=t(93);function Za(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i=[],a=!0,s=!1;try{for(t=t.call(n);!(a=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(n){s=!0,o=n}finally{try{a||null==t.return||t.return()}finally{if(s)throw o}}return i}}(n,e)||Object(Ka.a)(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}t(261),t(177),t(95);var Xa=t(207),Ya=t.n(Xa),Qa=t(208),ns=t.n(Qa),es={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(n){return"meta"===Za(n,1)[0]})).map((function(n){var e=Za(n,2);e[0];return e[1]})),this.$ssrContext){var n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map((function(n){var e="<meta";return Object.keys(n).forEach((function(t){e+=" ".concat(t,'="').concat(ns()(n[t]),'"')})),e+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=rs(this.$canonicalUrl)}var e},mounted:function(){this.currentMetaTags=Object(Ia.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var n=this.getMergedMetaTags();this.currentMetaTags=os(n,this.currentMetaTags)},getMergedMetaTags:function(){var n=this.$page.frontmatter.meta||[];return Ya()([{name:"description",content:this.$description}],n,this.siteMeta,is)},updateCanonicalLink:function(){ts(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",rs(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){os(null,this.currentMetaTags),ts()}};function ts(){var n=document.querySelector("link[rel='canonical']");n&&n.remove()}function rs(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return n?'<link href="'.concat(n,'" rel="canonical" />'):""}function os(n,e){if(e&&Object(Ia.a)(e).filter((function(n){return n.parentNode===document.head})).forEach((function(n){return document.head.removeChild(n)})),n)return n.map((function(n){var e=document.createElement("meta");return Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),document.head.appendChild(e),e}))}function is(n){for(var e=0,t=["name","property","itemprop"];e<t.length;e++){var r=t[e];if(n.hasOwnProperty(r))return n[r]+r}return JSON.stringify(n)}t(127);var as=t(137),ss={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(as)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var n=this,e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(n){return e.some((function(e){return e.hash===n.hash}))})),r=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),o=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+r,a=0;a<t.length;a++){var s=t[a],c=t[a+1],l=0===a&&0===r||r>=s.parentElement.offsetTop+10&&(!c||r<c.parentElement.offsetTop-10),u=decodeURIComponent(this.$route.hash);if(l&&u!==decodeURIComponent(s.hash)){var p=s;if(i===o)for(var d=a+1;d<t.length;d++)if(u===decodeURIComponent(t[d].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(p.hash),(function(){n.$nextTick((function(){n.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},cs=(t(98),t(94)),ls=t.n(cs),us={mounted:function(){var n=this;ls.a.configure({showSpinner:!1}),this.$router.beforeEach((function(n,e,t){n.path===e.path||qo.component(n.name)||ls.a.start(),t()})),this.$router.afterEach((function(){ls.a.done(),n.isSidebarOpen=!1}))}};t(69),t(96),t(356);function ps(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}t(130);function ds(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function fs(n,e,t){return e&&ds(n.prototype,e),t&&ds(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}t(357);var ms=function(){function n(){ps(this,n);this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}return fs(n,[{key:"show",value:function(n){var e=this,t=n.text,r=void 0===t?"":t,o=n.duration,i=void 0===o?3e3:o,a=document.createElement("div");a.className="message move-in",a.innerHTML='\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">'.concat(r,"</div>\n    "),this.containerEl.appendChild(a),i>0&&setTimeout((function(){e.close(a)}),i)}},{key:"close",value:function(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",(function(){n.remove()}))}}]),n}(),gs={mounted:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy:function(){var n=this;setTimeout((function(){(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach((function(e){document.querySelectorAll(e).forEach(n.generateCopyButton)}))}),1e3)},generateCopyButton:function(n){var e=this;if(!n.classList.contains("codecopy-enabled")){var t=document.createElement("i");t.className="code-copy",t.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',t.title="Copy to clipboard",t.addEventListener("click",(function(){e.copyToClipboard(n.innerText)})),n.appendChild(t),n.classList.add("codecopy-enabled")}},copyToClipboard:function(n){var e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);var t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy"),(new ms).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}},hs=(t(211),"auto"),vs="zoom-in",bs="zoom-out",ys="grab",xs="move";function ks(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o={passive:!1};r?n.addEventListener(e,t,o):n.removeEventListener(e,t,o)}function Ss(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function ws(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Cs(n,e,t){!function(n){var e=_s,t=Es;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var o=n.transform;delete n.transform,n[t]=o}}(e);var r=n.style,o={};for(var i in e)t&&(o[i]=r[i]||""),r[i]=e[i];return o}var _s="transition",Es="transform",As="transform",Is="transitionend";var Ts=function(){},js={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Ts,onClose:Ts,onGrab:Ts,onMove:Ts,onRelease:Ts,onBeforeOpen:Ts,onBeforeClose:Ts,onBeforeGrab:Ts,onBeforeRelease:Ts,onImageLoading:Ts,onImageLoaded:Ts},Os={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),Rs(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,o=this.lastScrollPosition.y-t,i=this.options.scrollThreshold;(Math.abs(o)>=i||Math.abs(r)>=i)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(Ps(n)&&!Rs(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){Ps(n)&&!Rs(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Ps(n){return 0===n.button}function Rs(n){return n.metaKey||n.ctrlKey}var Ls={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Cs(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),ks(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Cs(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},qs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Fs=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),Ms=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Ds={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=ws(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,o=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?ys:bs,transition:As+"\n        "+r+"s\n        "+o,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Cs(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Cs(this.el,{transform:"none"})},grab:function(n,e,t){var r=$s(),o=r.x-n,i=r.y-e;Cs(this.el,{cursor:xs,transform:"translate3d(\n        "+(this.translate.x+o)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=$s(),o=r.x-n,i=r.y-e;Cs(this.el,{transition:As,transform:"translate3d(\n        "+(this.translate.x+o)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Cs(this.el,this.styleClose)},restoreOpenStyle:function(){Cs(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=$s(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,o=r.customSize,i=r.scaleBase;if(!o&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(o&&"object"===(void 0===o?"undefined":qs(o)))return{x:o.width/this.rect.width,y:o.height/this.rect.height};var a=this.rect.width/2,s=this.rect.height/2,c=$s(),l={x:c.x-a,y:c.y-s},u=l.x/a,p=l.y/s,d=i+Math.min(u,p);if(o&&"string"==typeof o){var f=t||this.el.naturalWidth,m=e||this.el.naturalHeight,g=parseFloat(o)*f/(100*this.rect.width),h=parseFloat(o)*m/(100*this.rect.height);if(d>g||d>h)return{x:g,y:h}}return{x:d,y:d}}};function $s(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function zs(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){ks(n,r,e[r],t)}))}var Bs=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(Ds),this.overlay=Object.create(Ls),this.handler=Object.create(Os),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=Ms({},js,e),this.overlay.init(this),this.handler.init(this)}return Fs(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=vs,ks(n,"click",this.handler.click),this.options.preloadImage&&Ss(ws(n)));return this}},{key:"config",value:function(n){return n?(Ms(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var o=this.target.srcOriginal;null!=o&&(this.options.onImageLoading(r),Ss(o,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),ks(document,"scroll",this.handler.scroll),ks(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&ks(window,"resize",this.handler.resizeWindow);var i=function n(){ks(r,Is,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&zs(document,e.handler,!0),t(r)};return ks(r,Is,i),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=hs,this.overlay.fadeOut(),this.target.zoomOut(),ks(document,"scroll",this.handler.scroll,!1),ks(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&ks(window,"resize",this.handler.resizeWindow,!1);var r=function r(){ks(t,Is,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&zs(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return ks(t,Is,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var o=this.target.el;this.options.onBeforeGrab(o),this.released=!1,this.target.grab(n,e,t);var i=function n(){ks(o,Is,n,!1),r(o)};return ks(o,Is,i),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=xs,this.target.move(n,e,t);var o=this.target.el,i=function n(){ks(o,Is,n,!1),r(o)};return ks(o,Is,i),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=hs,this.target.restoreOpenStyle();var r=function r(){ks(t,Is,r,!1),n.lock=!1,n.released=!0,e(t)};return ks(t,Is,r),this}}}]),n}(),Ns=".theme-vdoing-content img:not(.no-zoom)",Hs=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),Us=Number("500"),Vs=function(){function n(){ps(this,n),this.instance=new Bs(Hs)}return fs(n,[{key:"update",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ns;"undefined"!=typeof window&&this.instance.listen(n)}},{key:"updateDelay",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ns,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Us;setTimeout((function(){return n.update(e)}),t)}}]),n}(),Js=[es,ss,us,gs,{watch:{"$page.path":function(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted:function(){this.$vuepress.zooming=new Vs,this.$vuepress.zooming.updateDelay()}}],Ws={name:"GlobalLayout",computed:{layout:function(){var n=this.getLayout();return Ga("layout",n),qo.component(n)}},methods:{getLayout:function(){if(this.$page.path){var n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},Gs=t(29),Ks=Object(Gs.a)(Ws,(function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){var r;switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),(r=n[e]).push.apply(r,Object(Ia.a)(t));break;default:throw new Error("Unknown option name.")}}(Ks,"mixins",Js);var Zs=[{name:"v-4230f2b8",path:"/Java/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-4230f2b8").then(t)}},{path:"/Java/index.html",redirect:"/Java/"},{path:"/00.目录页/01.Java.html",redirect:"/Java/"},{name:"v-27650964",path:"/SpringCloud/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-27650964").then(t)}},{path:"/SpringCloud/index.html",redirect:"/SpringCloud/"},{path:"/00.目录页/03.SpringCloud.html",redirect:"/SpringCloud/"},{name:"v-a6c825f6",path:"/密码学/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-a6c825f6").then(t)}},{path:"/密码学/index.html",redirect:"/密码学/"},{path:"/00.目录页/06.密码学.html",redirect:"/密码学/"},{name:"v-5e86f964",path:"/Spring/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-5e86f964").then(t)}},{path:"/Spring/index.html",redirect:"/Spring/"},{path:"/00.目录页/02.Spring.html",redirect:"/Spring/"},{name:"v-132872a4",path:"/pages/fb2fde/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-132872a4").then(t)}},{path:"/pages/fb2fde/index.html",redirect:"/pages/fb2fde/"},{path:"/01.Java/03.Other/1.Mybatis.html",redirect:"/pages/fb2fde/"},{name:"v-0f4686bd",path:"/pages/83a8c8/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-0f4686bd").then(t)}},{path:"/pages/83a8c8/index.html",redirect:"/pages/83a8c8/"},{path:"/01.Java/01.File/1.断点续传.html",redirect:"/pages/83a8c8/"},{name:"v-1b130856",path:"/pages/90bb0f/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-1b130856").then(t)}},{path:"/pages/90bb0f/index.html",redirect:"/pages/90bb0f/"},{path:"/01.Java/02.IO/1.first.html",redirect:"/pages/90bb0f/"},{name:"v-8eca6630",path:"/pages/88c5f2/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-8eca6630").then(t)}},{path:"/pages/88c5f2/index.html",redirect:"/pages/88c5f2/"},{path:"/01.Java/01.final关键字.html",redirect:"/pages/88c5f2/"},{name:"v-23a14f94",path:"/pages/6c093d/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-23a14f94").then(t)}},{path:"/pages/6c093d/index.html",redirect:"/pages/6c093d/"},{path:"/02.Spring/1.事务.html",redirect:"/pages/6c093d/"},{name:"v-5a25e37c",path:"/pages/fbfd38/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-5a25e37c").then(t)}},{path:"/pages/fbfd38/index.html",redirect:"/pages/fbfd38/"},{path:"/01.Java/04.多线程/01.线程.html",redirect:"/pages/fbfd38/"},{name:"v-5adbd3ee",path:"/pages/7eb1e2/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-5adbd3ee").then(t)}},{path:"/pages/7eb1e2/index.html",redirect:"/pages/7eb1e2/"},{path:"/01.Java/04.多线程/02.线程池.html",redirect:"/pages/7eb1e2/"},{name:"v-77ea87d1",path:"/pages/9e7171/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-77ea87d1").then(t)}},{path:"/pages/9e7171/index.html",redirect:"/pages/9e7171/"},{path:"/02.Spring/2.Spring.html",redirect:"/pages/9e7171/"},{name:"v-4a1ffff1",path:"/pages/cc1465/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-4a1ffff1").then(t)}},{path:"/pages/cc1465/index.html",redirect:"/pages/cc1465/"},{path:"/03.SpringCloud/02.服务消费.html",redirect:"/pages/cc1465/"},{name:"v-75e52150",path:"/pages/6d3e7e/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-75e52150").then(t)}},{path:"/pages/6d3e7e/index.html",redirect:"/pages/6d3e7e/"},{path:"/03.SpringCloud/01.服务治理.html",redirect:"/pages/6d3e7e/"},{name:"v-0f543b28",path:"/pages/e3f7fb/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-0f543b28").then(t)}},{path:"/pages/e3f7fb/index.html",redirect:"/pages/e3f7fb/"},{path:"/03.SpringCloud/05.配置中心.html",redirect:"/pages/e3f7fb/"},{name:"v-e19de712",path:"/pages/e27e3e/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-e19de712").then(t)}},{path:"/pages/e27e3e/index.html",redirect:"/pages/e27e3e/"},{path:"/03.SpringCloud/04.服务消费Feign.html",redirect:"/pages/e27e3e/"},{name:"v-6d052887",path:"/pages/e610d6/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-6d052887").then(t)}},{path:"/pages/e610d6/index.html",redirect:"/pages/e610d6/"},{path:"/03.SpringCloud/06.服务网关.html",redirect:"/pages/e610d6/"},{name:"v-9e56b172",path:"/pages/e51ccb/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-9e56b172").then(t)}},{path:"/pages/e51ccb/index.html",redirect:"/pages/e51ccb/"},{path:"/03.SpringCloud/03.服务消费Ribbon.html",redirect:"/pages/e51ccb/"},{name:"v-04e28f5d",path:"/pages/8e2a17/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-04e28f5d").then(t)}},{path:"/pages/8e2a17/index.html",redirect:"/pages/8e2a17/"},{path:"/04.SpringMvc/01.SpringMvc.html",redirect:"/pages/8e2a17/"},{name:"v-28e19cf6",path:"/pages/de500c/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-28e19cf6").then(t)}},{path:"/pages/de500c/index.html",redirect:"/pages/de500c/"},{path:"/03.SpringCloud/07.服务容错保护.html",redirect:"/pages/de500c/"},{name:"v-756e17ea",path:"/pages/cd20a8/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-756e17ea").then(t)}},{path:"/pages/cd20a8/index.html",redirect:"/pages/cd20a8/"},{path:"/05.高并发/NIO/ServerSocketChannel.html",redirect:"/pages/cd20a8/"},{name:"v-12f03108",path:"/pages/984609/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-12f03108").then(t)}},{path:"/pages/984609/index.html",redirect:"/pages/984609/"},{path:"/03.SpringCloud/20.SpringCloud Alibaba/nacos注册中心.html",redirect:"/pages/984609/"},{name:"v-eb17e3ba",path:"/pages/d2881b/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-eb17e3ba").then(t)}},{path:"/pages/d2881b/index.html",redirect:"/pages/d2881b/"},{path:"/03.SpringCloud/08.消息驱动的微服务.html",redirect:"/pages/d2881b/"},{name:"v-5b6ab6f4",path:"/pages/632cd0/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-5b6ab6f4").then(t)}},{path:"/pages/632cd0/index.html",redirect:"/pages/632cd0/"},{path:"/06.密码学/02.DES.html",redirect:"/pages/632cd0/"},{name:"v-60856549",path:"/pages/0a5fd0/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-60856549").then(t)}},{path:"/pages/0a5fd0/index.html",redirect:"/pages/0a5fd0/"},{path:"/06.密码学/01.基本概念.html",redirect:"/pages/0a5fd0/"},{name:"v-3dc354ce",path:"/pages/8c87bf/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-3dc354ce").then(t)}},{path:"/pages/8c87bf/index.html",redirect:"/pages/8c87bf/"},{path:"/03.SpringCloud/20.SpringCloud Alibaba/nacos配置中心.html",redirect:"/pages/8c87bf/"},{name:"v-58424274",path:"/pages/a8ace8/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-58424274").then(t)}},{path:"/pages/a8ace8/index.html",redirect:"/pages/a8ace8/"},{path:"/06.密码学/03.AES.html",redirect:"/pages/a8ace8/"},{name:"v-615a1077",path:"/pages/6c426c/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-615a1077").then(t)}},{path:"/pages/6c426c/index.html",redirect:"/pages/6c426c/"},{path:"/06.密码学/06.数字签名.html",redirect:"/pages/6c426c/"},{name:"v-580b7546",path:"/pages/4271c7/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-580b7546").then(t)}},{path:"/pages/4271c7/index.html",redirect:"/pages/4271c7/"},{path:"/06.密码学/04.SM4.html",redirect:"/pages/4271c7/"},{name:"v-71e974f6",path:"/pages/7f359a/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-71e974f6").then(t)}},{path:"/pages/7f359a/index.html",redirect:"/pages/7f359a/"},{path:"/06.密码学/05.公钥密码.html",redirect:"/pages/7f359a/"},{name:"v-7c51b72e",path:"/pages/e461a5/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-7c51b72e").then(t)}},{path:"/pages/e461a5/index.html",redirect:"/pages/e461a5/"},{path:"/08.docker/00.安装.html",redirect:"/pages/e461a5/"},{name:"v-01559c4f",path:"/pages/59ddb2/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-01559c4f").then(t)}},{path:"/pages/59ddb2/index.html",redirect:"/pages/59ddb2/"},{path:"/07.服务器/01.SSL协议.html",redirect:"/pages/59ddb2/"},{name:"v-0132317e",path:"/pages/1f9026/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-0132317e").then(t)}},{path:"/pages/1f9026/index.html",redirect:"/pages/1f9026/"},{path:"/07.服务器/02.生成证书.html",redirect:"/pages/1f9026/"},{name:"v-d562bad8",path:"/pages/3d5d30/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-d562bad8").then(t)}},{path:"/pages/3d5d30/index.html",redirect:"/pages/3d5d30/"},{path:"/08.docker/01.常用命令.html",redirect:"/pages/3d5d30/"},{name:"v-70126c55",path:"/pages/7bcbbc/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-70126c55").then(t)}},{path:"/pages/7bcbbc/index.html",redirect:"/pages/7bcbbc/"},{path:"/08.docker/02.镜像.html",redirect:"/pages/7bcbbc/"},{name:"v-7f59dca8",path:"/pages/21041c/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-7f59dca8").then(t)}},{path:"/pages/21041c/index.html",redirect:"/pages/21041c/"},{path:"/08.docker/03.搭建私服.html",redirect:"/pages/21041c/"},{name:"v-fbbdbad4",path:"/pages/8149aa/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-fbbdbad4").then(t)}},{path:"/pages/8149aa/index.html",redirect:"/pages/8149aa/"},{path:"/09.k8s/01.基本概念.html",redirect:"/pages/8149aa/"},{name:"v-378ffdba",path:"/pages/bb3e9a/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-378ffdba").then(t)}},{path:"/pages/bb3e9a/index.html",redirect:"/pages/bb3e9a/"},{path:"/08.docker/04.常用软件安装.html",redirect:"/pages/bb3e9a/"},{name:"v-1a06a0e3",path:"/pages/17d707/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-1a06a0e3").then(t)}},{path:"/pages/17d707/index.html",redirect:"/pages/17d707/"},{path:"/08.docker/05.DockerFile.html",redirect:"/pages/17d707/"},{name:"v-3a0bf3ea",path:"/pages/ec9bd7/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-3a0bf3ea").then(t)}},{path:"/pages/ec9bd7/index.html",redirect:"/pages/ec9bd7/"},{path:"/09.k8s/03.资源编排.html",redirect:"/pages/ec9bd7/"},{name:"v-0eeea534",path:"/pages/566d32/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-0eeea534").then(t)}},{path:"/pages/566d32/index.html",redirect:"/pages/566d32/"},{path:"/09.k8s/02.安装部署.html",redirect:"/pages/566d32/"},{name:"v-81d0fc34",path:"/pages/d0fb24/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-81d0fc34").then(t)}},{path:"/pages/d0fb24/index.html",redirect:"/pages/d0fb24/"},{path:"/08.docker/07.docker compose.html",redirect:"/pages/d0fb24/"},{name:"v-69e94cdb",path:"/pages/892142/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-69e94cdb").then(t)}},{path:"/pages/892142/index.html",redirect:"/pages/892142/"},{path:"/09.k8s/05.controller.html",redirect:"/pages/892142/"},{name:"v-22703206",path:"/pages/bb4118/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-22703206").then(t)}},{path:"/pages/bb4118/index.html",redirect:"/pages/bb4118/"},{path:"/09.k8s/04.pod.html",redirect:"/pages/bb4118/"},{name:"v-223c1c3d",path:"/pages/48d106/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-223c1c3d").then(t)}},{path:"/pages/48d106/index.html",redirect:"/pages/48d106/"},{path:"/09.k8s/06.Service.html",redirect:"/pages/48d106/"},{name:"v-0d152759",path:"/pages/5ac46f/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-0d152759").then(t)}},{path:"/pages/5ac46f/index.html",redirect:"/pages/5ac46f/"},{path:"/09.k8s/07.Jobs&CronJob.html",redirect:"/pages/5ac46f/"},{name:"v-5cb7a644",path:"/pages/777b8e/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-5cb7a644").then(t)}},{path:"/pages/777b8e/index.html",redirect:"/pages/777b8e/"},{path:"/09.k8s/99.其他.html",redirect:"/pages/777b8e/"},{name:"v-68b5e90a",path:"/pages/bfe5e8/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-68b5e90a").then(t)}},{path:"/pages/bfe5e8/index.html",redirect:"/pages/bfe5e8/"},{path:"/51.other/01.随笔.html",redirect:"/pages/bfe5e8/"},{name:"v-c2d1e070",path:"/pages/f58086/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-c2d1e070").then(t)}},{path:"/pages/f58086/index.html",redirect:"/pages/f58086/"},{path:"/51.other/02.杂记.html",redirect:"/pages/f58086/"},{name:"v-55050ab4",path:"/pages/5fd56a/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-55050ab4").then(t)}},{path:"/pages/5fd56a/index.html",redirect:"/pages/5fd56a/"},{path:"/99.设计模式/01.Reactor.html",redirect:"/pages/5fd56a/"},{name:"v-2f18dbfd",path:"/archives/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-2f18dbfd").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-6b9fdb5d",path:"/categories/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-6b9fdb5d").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{name:"v-5c32397d",path:"/tags/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-5c32397d").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-75b04329",path:"/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-75b04329").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-5cfae26a",path:"/pages/7d1775/",component:Ks,beforeEnter:function(n,e,t){Wa("Layout","v-5cfae26a").then(t)}},{path:"/pages/7d1775/index.html",redirect:"/pages/7d1775/"},{path:"/51.other/99.面试题.html",redirect:"/pages/7d1775/"},{path:"*",component:Ks}],Xs={title:"notes",description:"web前端技术博客,专注web前端学习与总结。JavaScript,js,ES6,TypeScript,vue,React,python,css3,html5,Node,git,github等技术文章。",base:"/notes/",headTags:[["meta",{name:"keywords",content:"Java,Spring,SpringBoot,git,github,markdown"}],["meta",{name:"theme-color",content:"#11a8cd"}]],pages:[{title:"Java",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"01.Java",imgUrl:"/img/web.png",description:"Java"}},title:"Java",date:null,permalink:"/Java",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/01.Java.html",relativePath:"00.目录页/01.Java.md",key:"v-4230f2b8",path:"/Java/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2021/12/12, 22:33:36",lastUpdatedTimestamp:1639319616e3},{title:"SpringCloud",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"03.SpringCloud",imgUrl:"/img/other.png",description:"SpringCloud"}},title:"SpringCloud",date:null,permalink:"/SpringCloud",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/03.SpringCloud.html",relativePath:"00.目录页/03.SpringCloud.md",key:"v-27650964",path:"/SpringCloud/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2021/12/12, 22:33:36",lastUpdatedTimestamp:1639319616e3},{title:"密码学",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"06.密码学",imgUrl:"/img/other.png",description:"密码学"}},title:"密码学",date:null,permalink:"/密码学",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/06.%E5%AF%86%E7%A0%81%E5%AD%A6.html",relativePath:"00.目录页/06.密码学.md",key:"v-a6c825f6",path:"/密码学/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Spring",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"02.Spring",imgUrl:"/img/ui.png",description:"html(5)/css(3)，前端页面相关技术"}},title:"Spring",date:null,permalink:"/Spring",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/02.Spring.html",relativePath:"00.目录页/02.Spring.md",key:"v-5e86f964",path:"/Spring/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2021/12/12, 22:33:36",lastUpdatedTimestamp:1639319616e3},{title:"Mybatis",frontmatter:{title:"Mybatis",date:"2021-12-12T12:48:26.000Z",permalink:"/pages/fb2fde/",categories:["Other"],tags:[null]},regularPath:"/01.Java/03.Other/1.Mybatis.html",relativePath:"01.Java/03.Other/1.Mybatis.md",key:"v-132872a4",path:"/pages/fb2fde/",headersStr:null,content:"# Mybatis\n\n * #{ } & ${ }\n   \n   * #{ }是占位符， ${ }是拼接字符串\n   * #{ }可以防止SQL注入\n   * #{ }会自动添加单引号\n   * 传入表名、order by 的字段名必须用${}",normalizedContent:"# mybatis\n\n * #{ } & ${ }\n   \n   * #{ }是占位符， ${ }是拼接字符串\n   * #{ }可以防止sql注入\n   * #{ }会自动添加单引号\n   * 传入表名、order by 的字段名必须用${}",charsets:{cjk:!0},lastUpdated:"2021/12/12, 22:33:36",lastUpdatedTimestamp:1639319616e3},{title:"断点续传",frontmatter:{title:"断点续传",date:"2021-12-12T12:48:26.000Z",permalink:"/pages/83a8c8/",categories:["File"],tags:[null]},regularPath:"/01.Java/01.File/1.%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0.html",relativePath:"01.Java/01.File/1.断点续传.md",key:"v-0f4686bd",path:"/pages/83a8c8/",headersStr:null,content:'\npackage com.seeyouweb.mvc;\n \nimport org.apache.catalina.connector.ClientAbortException;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestHeader;\nimport org.springframework.web.bind.annotation.RequestMapping;\n \nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\n \n@Controller\npublic class Main {\n \n    public static void main(String[] args) {\n        SpringApplication.run(Main.class, args);\n    }\n \n    @RequestMapping("/")\n    void home(HttpServletRequest request, HttpServletResponse response, @RequestHeader(required = false) String range) {\n        //文件位置\n        File music = new File("E:\\\\CloudMusic\\\\林子祥 - 街头霸王榜.mp3");\n \n \n        //开始下载位置\n        long startByte = 0;\n        //结束下载位置\n        long endByte = music.length() - 1;\n \n        //有range的话\n        if (range != null && range.contains("bytes=") && range.contains("-")) {\n            //坑爹地方一：http状态码要为206\n            response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);\n \n            range = range.substring(range.lastIndexOf("=") + 1).trim();\n            String[] ranges = range.split("-");\n            try {\n                //判断range的类型\n                if (ranges.length == 1) {\n                    //类型一：bytes=-2343\n                    if (range.startsWith("-")) {\n                        endByte = Long.parseLong(ranges[0]);\n                    }\n                    //类型二：bytes=2343-\n                    else if (range.endsWith("-")) {\n                        startByte = Long.parseLong(ranges[0]);\n                    }\n                }\n                //类型三：bytes=22-2343\n                else if (ranges.length == 2) {\n                    startByte = Long.parseLong(ranges[0]);\n                    endByte = Long.parseLong(ranges[1]);\n                }\n \n            } catch (NumberFormatException e) {\n                startByte = 0;\n                endByte = music.length() - 1;\n            }\n        } else {\n            //没有ranges即全部一次性传输，需要用200状态码，这一行应该可以省掉，因为默认返回是200状态码\n            response.setStatus(HttpServletResponse.SC_OK);\n        }\n \n        //要下载的长度（endByte为总长度-1，这时候要加回去）\n        long contentLength = endByte - startByte + 1;\n        //文件名\n        String fileName = music.getName();\n        //文件类型\n        String contentType = request.getServletContext().getMimeType(fileName);\n \n \n        //各种响应头设置\n        //参考资料：https://www.ibm.com/developerworks/cn/java/joy-down/index.html\n        //坑爹地方二：看代码\n        response.setHeader("Accept-Ranges", "bytes");\n        response.setContentType(contentType);\n        response.setHeader("Content-Type", contentType);\n        //这里文件名换你想要的，inline表示浏览器可以直接使用（比如播放音乐，我方便测试用的）\n        //参考资料：http://hw1287789687.iteye.com/blog/2188500\n        response.setHeader("Content-Disposition", "inline;filename=test.mp3");\n        response.setHeader("Content-Length", String.valueOf(contentLength));\n        //坑爹地方三：Content-Range，格式为\n        // [要下载的开始位置]-[结束位置]/[文件总大小]\n        response.setHeader("Content-Range", "bytes " + startByte + "-" + endByte + "/" + music.length());\n \n \n        BufferedOutputStream outputStream = null;\n        RandomAccessFile randomAccessFile = null;\n        //已传送数据大小\n        long transmitted = 0;\n        try {\n            randomAccessFile = new RandomAccessFile(music, "r");\n            outputStream = new BufferedOutputStream(response.getOutputStream());\n            byte[] buff = new byte[4096];\n            int len = 0;\n            randomAccessFile.seek(startByte);\n            //坑爹地方四：判断是否到了最后不足4096（buff的length）个byte这个逻辑（(transmitted + len) <= contentLength）要放前面！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！\n            //不然会先读取randomAccessFile，造成后面读取位置出错，找了一天才发现问题所在\n            while ((transmitted + len) <= contentLength && (len = randomAccessFile.read(buff)) != -1) {\n                outputStream.write(buff, 0, len);\n                transmitted += len;\n                //停一下，方便测试（本地下载传输速度特别快，没反应过来就下载好了），实际生产环境中用的时候需要删除这一行\n                Thread.sleep(10);\n            }\n            //处理不足buff.length部分\n            if (transmitted < contentLength) {\n                len = randomAccessFile.read(buff, 0, (int) (contentLength - transmitted));\n                outputStream.write(buff, 0, len);\n                transmitted += len;\n            }\n \n            outputStream.flush();\n            response.flushBuffer();\n            randomAccessFile.close();\n            System.out.println("下载完毕：" + startByte + "-" + endByte + "：" + transmitted);\n \n        } catch (ClientAbortException e) {\n            System.out.println("用户停止下载：" + startByte + "-" + endByte + "：" + transmitted);\n            //捕获此异常表示拥护停止下载\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (randomAccessFile != null) {\n                    randomAccessFile.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n \n    }\n \n \n}\n',normalizedContent:'\npackage com.seeyouweb.mvc;\n \nimport org.apache.catalina.connector.clientabortexception;\nimport org.springframework.boot.springapplication;\nimport org.springframework.stereotype.controller;\nimport org.springframework.web.bind.annotation.requestheader;\nimport org.springframework.web.bind.annotation.requestmapping;\n \nimport javax.servlet.http.httpservletrequest;\nimport javax.servlet.http.httpservletresponse;\nimport java.io.bufferedoutputstream;\nimport java.io.file;\nimport java.io.ioexception;\nimport java.io.randomaccessfile;\n \n@controller\npublic class main {\n \n    public static void main(string[] args) {\n        springapplication.run(main.class, args);\n    }\n \n    @requestmapping("/")\n    void home(httpservletrequest request, httpservletresponse response, @requestheader(required = false) string range) {\n        //文件位置\n        file music = new file("e:\\\\cloudmusic\\\\林子祥 - 街头霸王榜.mp3");\n \n \n        //开始下载位置\n        long startbyte = 0;\n        //结束下载位置\n        long endbyte = music.length() - 1;\n \n        //有range的话\n        if (range != null && range.contains("bytes=") && range.contains("-")) {\n            //坑爹地方一：http状态码要为206\n            response.setstatus(httpservletresponse.sc_partial_content);\n \n            range = range.substring(range.lastindexof("=") + 1).trim();\n            string[] ranges = range.split("-");\n            try {\n                //判断range的类型\n                if (ranges.length == 1) {\n                    //类型一：bytes=-2343\n                    if (range.startswith("-")) {\n                        endbyte = long.parselong(ranges[0]);\n                    }\n                    //类型二：bytes=2343-\n                    else if (range.endswith("-")) {\n                        startbyte = long.parselong(ranges[0]);\n                    }\n                }\n                //类型三：bytes=22-2343\n                else if (ranges.length == 2) {\n                    startbyte = long.parselong(ranges[0]);\n                    endbyte = long.parselong(ranges[1]);\n                }\n \n            } catch (numberformatexception e) {\n                startbyte = 0;\n                endbyte = music.length() - 1;\n            }\n        } else {\n            //没有ranges即全部一次性传输，需要用200状态码，这一行应该可以省掉，因为默认返回是200状态码\n            response.setstatus(httpservletresponse.sc_ok);\n        }\n \n        //要下载的长度（endbyte为总长度-1，这时候要加回去）\n        long contentlength = endbyte - startbyte + 1;\n        //文件名\n        string filename = music.getname();\n        //文件类型\n        string contenttype = request.getservletcontext().getmimetype(filename);\n \n \n        //各种响应头设置\n        //参考资料：https://www.ibm.com/developerworks/cn/java/joy-down/index.html\n        //坑爹地方二：看代码\n        response.setheader("accept-ranges", "bytes");\n        response.setcontenttype(contenttype);\n        response.setheader("content-type", contenttype);\n        //这里文件名换你想要的，inline表示浏览器可以直接使用（比如播放音乐，我方便测试用的）\n        //参考资料：http://hw1287789687.iteye.com/blog/2188500\n        response.setheader("content-disposition", "inline;filename=test.mp3");\n        response.setheader("content-length", string.valueof(contentlength));\n        //坑爹地方三：content-range，格式为\n        // [要下载的开始位置]-[结束位置]/[文件总大小]\n        response.setheader("content-range", "bytes " + startbyte + "-" + endbyte + "/" + music.length());\n \n \n        bufferedoutputstream outputstream = null;\n        randomaccessfile randomaccessfile = null;\n        //已传送数据大小\n        long transmitted = 0;\n        try {\n            randomaccessfile = new randomaccessfile(music, "r");\n            outputstream = new bufferedoutputstream(response.getoutputstream());\n            byte[] buff = new byte[4096];\n            int len = 0;\n            randomaccessfile.seek(startbyte);\n            //坑爹地方四：判断是否到了最后不足4096（buff的length）个byte这个逻辑（(transmitted + len) <= contentlength）要放前面！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！\n            //不然会先读取randomaccessfile，造成后面读取位置出错，找了一天才发现问题所在\n            while ((transmitted + len) <= contentlength && (len = randomaccessfile.read(buff)) != -1) {\n                outputstream.write(buff, 0, len);\n                transmitted += len;\n                //停一下，方便测试（本地下载传输速度特别快，没反应过来就下载好了），实际生产环境中用的时候需要删除这一行\n                thread.sleep(10);\n            }\n            //处理不足buff.length部分\n            if (transmitted < contentlength) {\n                len = randomaccessfile.read(buff, 0, (int) (contentlength - transmitted));\n                outputstream.write(buff, 0, len);\n                transmitted += len;\n            }\n \n            outputstream.flush();\n            response.flushbuffer();\n            randomaccessfile.close();\n            system.out.println("下载完毕：" + startbyte + "-" + endbyte + "：" + transmitted);\n \n        } catch (clientabortexception e) {\n            system.out.println("用户停止下载：" + startbyte + "-" + endbyte + "：" + transmitted);\n            //捕获此异常表示拥护停止下载\n        } catch (ioexception | interruptedexception e) {\n            e.printstacktrace();\n        } finally {\n            try {\n                if (randomaccessfile != null) {\n                    randomaccessfile.close();\n                }\n            } catch (ioexception e) {\n                e.printstacktrace();\n            }\n        }\n \n    }\n \n \n}\n',charsets:{cjk:!0},lastUpdated:"2021/12/12, 22:33:36",lastUpdatedTimestamp:1639319616e3},{title:"first",frontmatter:{title:"first",date:"2021-12-12T12:48:26.000Z",permalink:"/pages/90bb0f/",categories:["IO"],tags:[null]},regularPath:"/01.Java/02.IO/1.first.html",relativePath:"01.Java/02.IO/1.first.md",key:"v-1b130856",path:"/pages/90bb0f/",headersStr:null,content:'# IO\n\n用户程序进行IO读写依赖read,write两个系统调用\nread系统调用:\n\ngraph TB\n用户程序 --调用--\x3e A["系统调用: read"]\nA --\x3e 内核缓存\n内核缓存 --\x3e 应用程序的进程缓冲区\n\n\nwrite系统调用：\n\ngraph TB\n用户程序 --调用--\x3e A["系统调用: write"]\nA --\x3e 应用程序的进程缓冲区\n应用程序的进程缓冲区 --\x3e 内核缓存\n\n\n----------------------------------------\n\n应用程序的IO操作实际上并不是物理设备级别的读写，而是缓存的复制\n\nread & write 两个系统调用都不负责内核缓冲区和物理设备之间的交换 所有底层的读写操作，是由操作系统内核完成的',normalizedContent:'# io\n\n用户程序进行io读写依赖read,write两个系统调用\nread系统调用:\n\ngraph tb\n用户程序 --调用--\x3e a["系统调用: read"]\na --\x3e 内核缓存\n内核缓存 --\x3e 应用程序的进程缓冲区\n\n\nwrite系统调用：\n\ngraph tb\n用户程序 --调用--\x3e a["系统调用: write"]\na --\x3e 应用程序的进程缓冲区\n应用程序的进程缓冲区 --\x3e 内核缓存\n\n\n----------------------------------------\n\n应用程序的io操作实际上并不是物理设备级别的读写，而是缓存的复制\n\nread & write 两个系统调用都不负责内核缓冲区和物理设备之间的交换 所有底层的读写操作，是由操作系统内核完成的',charsets:{cjk:!0},lastUpdated:"2021/12/24, 22:35:49",lastUpdatedTimestamp:1640356549e3},{title:"final关键字",frontmatter:{title:"final关键字",date:"2022-04-11T09:39:12.000Z",permalink:"/pages/88c5f2/",categories:["Java"],tags:[null]},regularPath:"/01.Java/01.final%E5%85%B3%E9%94%AE%E5%AD%97.html",relativePath:"01.Java/01.final关键字.md",key:"v-8eca6630",path:"/pages/88c5f2/",headersStr:null,content:" * final关键字\n   * 修饰类：final类将不可被继承\n   * 修饰方法：final方法不可以被子类重写\n   * 修饰变量：被final修饰的变量属于常量，只能被赋值一次\n   * final参数：当方法参数为final时，只可以使用，不能更改",normalizedContent:" * final关键字\n   * 修饰类：final类将不可被继承\n   * 修饰方法：final方法不可以被子类重写\n   * 修饰变量：被final修饰的变量属于常量，只能被赋值一次\n   * final参数：当方法参数为final时，只可以使用，不能更改",charsets:{cjk:!0}},{title:"Spring",frontmatter:{title:"Spring",date:"2021-12-12T12:48:26.000Z",permalink:"/pages/6c093d/",categories:["Spring"],tags:[null]},regularPath:"/02.Spring/1.%E4%BA%8B%E5%8A%A1.html",relativePath:"02.Spring/1.事务.md",key:"v-23a14f94",path:"/pages/6c093d/",headers:[{level:2,title:"特性",slug:"特性",normalizedTitle:"特性",charIndex:15},{level:2,title:"事务的传播机制",slug:"事务的传播机制",normalizedTitle:"事务的传播机制",charIndex:51},{level:2,title:"事务可能引发的问题",slug:"事务可能引发的问题",normalizedTitle:"事务可能引发的问题",charIndex:590},{level:2,title:"隔离级别",slug:"隔离级别",normalizedTitle:"隔离级别",charIndex:861},{level:2,title:"Spring声明式事务配置",slug:"spring声明式事务配置",normalizedTitle:"spring声明式事务配置",charIndex:1128},{level:2,title:"@Transactional失效",slug:"transactional失效",normalizedTitle:"@transactional失效",charIndex:1276},{level:2,title:"同一个类中事务方法调用解决方法",slug:"同一个类中事务方法调用解决方法",normalizedTitle:"同一个类中事务方法调用解决方法",charIndex:2243}],headersStr:"特性 事务的传播机制 事务可能引发的问题 隔离级别 Spring声明式事务配置 @Transactional失效 同一个类中事务方法调用解决方法",content:"# Spring事务\n\n\n# 特性\n\n * 原子性\n * 一致性\n * 隔离性\n * 持久性\n\n\n# 事务的传播机制\n\n * REQUIRED:\n   \n   Spring默认的传播机制，能满足绝大部分业务需求，如果外层有事务，则当前事务加入到外层事务，一块提交，一块回滚。如果外层没有事务，新建一个事务执行\n\n * REQUES_NEW:\n   \n   该事务传播机制是每次都会新开启一个事务，同时把外层事务挂起，当当前事务执行完毕，恢复上层事务的执行。如果外层没有事务，执行当前新开启的事务即可\n\n * SUPPORT:\n   \n   如果外层有事务，则加入外层事务，如果外层没有事务，则直接使用非事务方式执行。完全依赖外层的事务\n\n * NOT_SUPPORT\n   \n   该传播机制不支持事务，如果外层存在事务则挂起，执行完当前代码，则恢复外层事务，无论是否异常都不会回滚当前的代码\n\n * NEVER\n   \n   该传播机制不支持外层事务，即如果外层有事务就抛出异常\n\n * MANDATORY\n   \n   与NEVER相反，如果外层没有事务，则抛出异常\n\n * NESTED\n   \n   该传播机制的特点是可以保存状态保存点，当前事务回滚到某一个点，从而避免所有的嵌套事务都回滚，即各自回滚各自的，如果子事务没有把异常吃掉，基本还是会引起全部回滚的。\n\n\n# 事务可能引发的问题\n\n * 脏读：\n   \n   脏读发生在一个事务读取了被另一个事务改写但尚未提交的数据时。如果这些改变在稍后被回滚了，那么第一个事务读取的数据就会是无效的。\n\n * 幻读：\n   \n   当一个事务（T1）读取几行记录后，另一个并发事务（T2）插入了一些记录时，幻读就发生了。在后来的查询中，第一个事务（T1）就会发现一些原来没有的额外记录。\n\n * 不可重复读：\n   \n   不可重复读发生在一个事务执行相同的查询两次或两次以上，但每次查询结果都不相同时。这通常是由于另一个并发事务在两次查询之间更新了数据。\n\n\n# 隔离级别\n\n * 读未提交\n   \n   允许读取尚未提交的更改。可能导致脏读、幻读或不可重复读。\n\n * 读提交\n   \n   允许从已经提交的并发事务读取。可防止脏读，但幻读和不可重复读仍可能会发生。\n\n * 可重复读\n   \n   对相同字段的多次读取的结果是一致的，除非数据被当前事务本身改变。可防止脏读和不可重复读，但幻读仍可能发生\n\n * 序列化\n   \n   完全服从ACID的隔离级别，确保不发生脏读、不可重复读和幻影读。这在所有隔离级别中也是最慢的，因为它通常是通过完全锁定当前事务所涉及的数据表来完成的。\n\n\n# Spring声明式事务配置\n\n 1. 事务的传播性： @Transactional(propagation=Propagation.REQUIRED)\n 2. 事务的隔离级别： @Transactional(isolation = Isolation.READ_UNCOMMITTED)\n\n\n# @Transactional失效\n\n * 异常被捕获 Spring中事务提交还是回滚是根据调用的方法是否抛出异常来决定的，因此如果把异常捕获之后又不抛出的话，即使出了问题，事务还是会提交。\n   \n     @Autowired\n     private ClassB b;\n   \n     @Autowired\n     private ClassC c;\n   \n     @Transactional\n     public void methodA(){\n         try {\n             b.methodB();\n             c.methodC();\n         } catch (Exception e) {\n             \n         }\n     }\n   \n\n * @Transactional修饰了非public方法 @Transactional只能用于 public 的方法上，否则事务不会失效，如果要用在非 public 方法上，可以开启AspectJ 代理模式。（默认代理模式CGlib）\n\n * 同一个类中的方法调用\n   \n     @Component\n     public class A{\n         @Transactional\n         public void methodA() {\n             methodB();\n         }\n         \n         @Transactional\n         public void methodB() {\n             // do something\n         }\n     }\n   \n   \n   methodB的事务是不生效的，因为这里是同一个类中的调用（更确切的说是同一个类同一个对象中），Spring事务的原理是调用时检查@Transactional注解，然后生成代理类进行事务管理，但是内部调用时不会生成代理类（或者说默认不会），因此也就无法进行事务管理。\n\n * 同一个类中, 一个未标注 @Transactional 的方法去调用标有 @Transactional 的方法, 事务会失效\n\n\n# 同一个类中事务方法调用解决方法\n\n * 方法拆分 这是一种最简单的方法，也就是把上面例子中的methodB拆分到一个单独的类里面，这样就是一般情况下的事务调用\n * 下面三种方法都是在methodB上添加@Transactional(propagation = Propagation.REQUIRES_NEW)之后进行的测试\n   * 使用AspectJ代理 具体操作就是，application.yml中需要配置spring.aop.auto ：true，然后在启动类开启AspectJ代理，并暴露代理类：@EnableAspectJAutoProxy(exposeProxy = true) 这样的话就可以在调用的时候获取到代理类，并进行方法调用：\n     \n         ((TestClassA)AopContext.currentProxy()).insertB();\n     \n   \n   * 从ApplicationContext获取Bean 这个原理应该是和上面一样的，直从ApplicationContext中获取到当前Bean，然后再调用方法：\n     \n     // applicationContext 可以自动注入\n      applicationContext.getBean(TestClassA.class).insertB();\n     \n   \n   * 注入自身\n     \n       @Component\n       public class TestClassA {\n           @Autowired\n           private TestClassA testClassA;\n       }\n     \n     \n     用这种方法也可以使methodB的事务生效，但是需要注意的是，第一次生成的代理类和自动注入的代理类不是一个对象，也就是代码中this和testClassA不是同一个对象，并且testclassA中不会再次自动注入。 所以如果methodB插入数据时需要当前对象的属性，这种方法便不能再使用",normalizedContent:"# spring事务\n\n\n# 特性\n\n * 原子性\n * 一致性\n * 隔离性\n * 持久性\n\n\n# 事务的传播机制\n\n * required:\n   \n   spring默认的传播机制，能满足绝大部分业务需求，如果外层有事务，则当前事务加入到外层事务，一块提交，一块回滚。如果外层没有事务，新建一个事务执行\n\n * reques_new:\n   \n   该事务传播机制是每次都会新开启一个事务，同时把外层事务挂起，当当前事务执行完毕，恢复上层事务的执行。如果外层没有事务，执行当前新开启的事务即可\n\n * support:\n   \n   如果外层有事务，则加入外层事务，如果外层没有事务，则直接使用非事务方式执行。完全依赖外层的事务\n\n * not_support\n   \n   该传播机制不支持事务，如果外层存在事务则挂起，执行完当前代码，则恢复外层事务，无论是否异常都不会回滚当前的代码\n\n * never\n   \n   该传播机制不支持外层事务，即如果外层有事务就抛出异常\n\n * mandatory\n   \n   与never相反，如果外层没有事务，则抛出异常\n\n * nested\n   \n   该传播机制的特点是可以保存状态保存点，当前事务回滚到某一个点，从而避免所有的嵌套事务都回滚，即各自回滚各自的，如果子事务没有把异常吃掉，基本还是会引起全部回滚的。\n\n\n# 事务可能引发的问题\n\n * 脏读：\n   \n   脏读发生在一个事务读取了被另一个事务改写但尚未提交的数据时。如果这些改变在稍后被回滚了，那么第一个事务读取的数据就会是无效的。\n\n * 幻读：\n   \n   当一个事务（t1）读取几行记录后，另一个并发事务（t2）插入了一些记录时，幻读就发生了。在后来的查询中，第一个事务（t1）就会发现一些原来没有的额外记录。\n\n * 不可重复读：\n   \n   不可重复读发生在一个事务执行相同的查询两次或两次以上，但每次查询结果都不相同时。这通常是由于另一个并发事务在两次查询之间更新了数据。\n\n\n# 隔离级别\n\n * 读未提交\n   \n   允许读取尚未提交的更改。可能导致脏读、幻读或不可重复读。\n\n * 读提交\n   \n   允许从已经提交的并发事务读取。可防止脏读，但幻读和不可重复读仍可能会发生。\n\n * 可重复读\n   \n   对相同字段的多次读取的结果是一致的，除非数据被当前事务本身改变。可防止脏读和不可重复读，但幻读仍可能发生\n\n * 序列化\n   \n   完全服从acid的隔离级别，确保不发生脏读、不可重复读和幻影读。这在所有隔离级别中也是最慢的，因为它通常是通过完全锁定当前事务所涉及的数据表来完成的。\n\n\n# spring声明式事务配置\n\n 1. 事务的传播性： @transactional(propagation=propagation.required)\n 2. 事务的隔离级别： @transactional(isolation = isolation.read_uncommitted)\n\n\n# @transactional失效\n\n * 异常被捕获 spring中事务提交还是回滚是根据调用的方法是否抛出异常来决定的，因此如果把异常捕获之后又不抛出的话，即使出了问题，事务还是会提交。\n   \n     @autowired\n     private classb b;\n   \n     @autowired\n     private classc c;\n   \n     @transactional\n     public void methoda(){\n         try {\n             b.methodb();\n             c.methodc();\n         } catch (exception e) {\n             \n         }\n     }\n   \n\n * @transactional修饰了非public方法 @transactional只能用于 public 的方法上，否则事务不会失效，如果要用在非 public 方法上，可以开启aspectj 代理模式。（默认代理模式cglib）\n\n * 同一个类中的方法调用\n   \n     @component\n     public class a{\n         @transactional\n         public void methoda() {\n             methodb();\n         }\n         \n         @transactional\n         public void methodb() {\n             // do something\n         }\n     }\n   \n   \n   methodb的事务是不生效的，因为这里是同一个类中的调用（更确切的说是同一个类同一个对象中），spring事务的原理是调用时检查@transactional注解，然后生成代理类进行事务管理，但是内部调用时不会生成代理类（或者说默认不会），因此也就无法进行事务管理。\n\n * 同一个类中, 一个未标注 @transactional 的方法去调用标有 @transactional 的方法, 事务会失效\n\n\n# 同一个类中事务方法调用解决方法\n\n * 方法拆分 这是一种最简单的方法，也就是把上面例子中的methodb拆分到一个单独的类里面，这样就是一般情况下的事务调用\n * 下面三种方法都是在methodb上添加@transactional(propagation = propagation.requires_new)之后进行的测试\n   * 使用aspectj代理 具体操作就是，application.yml中需要配置spring.aop.auto ：true，然后在启动类开启aspectj代理，并暴露代理类：@enableaspectjautoproxy(exposeproxy = true) 这样的话就可以在调用的时候获取到代理类，并进行方法调用：\n     \n         ((testclassa)aopcontext.currentproxy()).insertb();\n     \n   \n   * 从applicationcontext获取bean 这个原理应该是和上面一样的，直从applicationcontext中获取到当前bean，然后再调用方法：\n     \n     // applicationcontext 可以自动注入\n      applicationcontext.getbean(testclassa.class).insertb();\n     \n   \n   * 注入自身\n     \n       @component\n       public class testclassa {\n           @autowired\n           private testclassa testclassa;\n       }\n     \n     \n     用这种方法也可以使methodb的事务生效，但是需要注意的是，第一次生成的代理类和自动注入的代理类不是一个对象，也就是代码中this和testclassa不是同一个对象，并且testclassa中不会再次自动注入。 所以如果methodb插入数据时需要当前对象的属性，这种方法便不能再使用",charsets:{cjk:!0},lastUpdated:"2022/02/05, 17:38:25",lastUpdatedTimestamp:1644053905e3},{title:"线程",frontmatter:{title:"线程",date:"2022-04-11T09:39:12.000Z",permalink:"/pages/fbfd38/",categories:["Java","多线程"],tags:[null]},regularPath:"/01.Java/04.%E5%A4%9A%E7%BA%BF%E7%A8%8B/01.%E7%BA%BF%E7%A8%8B.html",relativePath:"01.Java/04.多线程/01.线程.md",key:"v-5a25e37c",path:"/pages/fbfd38/",headers:[{level:2,title:"线程的状态",slug:"线程的状态",normalizedTitle:"线程的状态",charIndex:9}],headersStr:"线程的状态",content:"# 线程\n\n\n# 线程的状态\n\n 1. 新建(new)\n\n 2. 可运行(runnable)\n\n 3. 运行(running)\n\n 4. 阻塞(blocked)\n    \n    a. 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中\n    \n    b. 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n    \n    c. 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n\n 5. 死亡(dead)",normalizedContent:"# 线程\n\n\n# 线程的状态\n\n 1. 新建(new)\n\n 2. 可运行(runnable)\n\n 3. 运行(running)\n\n 4. 阻塞(blocked)\n    \n    a. 等待阻塞：运行(running)的线程执行o.wait()方法，jvm会把该线程放入等待队列(waitting queue)中\n    \n    b. 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则jvm会把该线程放入锁池(lock pool)中。\n    \n    c. 其他阻塞：运行(running)的线程执行thread.sleep(long ms)或t.join()方法，或者发出了i/o请求时，jvm会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者i/o处理完毕时，线程重新转入可运行(runnable)状态。\n\n 5. 死亡(dead)",charsets:{cjk:!0}},{title:"线程池",frontmatter:{title:"线程池",date:"2022-04-11T09:39:12.000Z",permalink:"/pages/7eb1e2/",categories:["Java","多线程"],tags:[null]},regularPath:"/01.Java/04.%E5%A4%9A%E7%BA%BF%E7%A8%8B/02.%E7%BA%BF%E7%A8%8B%E6%B1%A0.html",relativePath:"01.Java/04.多线程/02.线程池.md",key:"v-5adbd3ee",path:"/pages/7eb1e2/",headers:[{level:2,title:"线程池状态",slug:"线程池状态",normalizedTitle:"线程池状态",charIndex:10},{level:2,title:"创建线程池",slug:"创建线程池",normalizedTitle:"创建线程池",charIndex:36}],headersStr:"线程池状态 创建线程池",content:"# 线程池\n\n\n# 线程池状态\n\n * RUNNING：\n   \n   创建线程池后，初始时，线程池处于RUNNING状态\n\n * SHUTDOWN：\n   \n   如果调用了shutdown()方法，则线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；\n\n * STOP：\n   \n   如果调用了shutdownNow()方法，则线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；\n\n * TERMINATED：\n   \n   当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态\n\n\n# 创建线程池",normalizedContent:"# 线程池\n\n\n# 线程池状态\n\n * running：\n   \n   创建线程池后，初始时，线程池处于running状态\n\n * shutdown：\n   \n   如果调用了shutdown()方法，则线程池处于shutdown状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；\n\n * stop：\n   \n   如果调用了shutdownnow()方法，则线程池处于stop状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；\n\n * terminated：\n   \n   当线程池处于shutdown或stop状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为terminated状态\n\n\n# 创建线程池",charsets:{cjk:!0}},{title:"Spring",frontmatter:{title:"Spring",date:"2022-03-09T08:46:27.000Z",permalink:"/pages/9e7171/",categories:["Spring"],tags:[null]},regularPath:"/02.Spring/2.Spring.html",relativePath:"02.Spring/2.Spring.md",key:"v-77ea87d1",path:"/pages/9e7171/",headers:[{level:2,title:"bean作用域",slug:"bean作用域",normalizedTitle:"bean作用域",charIndex:63},{level:2,title:"bean生命周期",slug:"bean生命周期",normalizedTitle:"bean生命周期",charIndex:298}],headersStr:"bean作用域 bean生命周期",content:"[toc]\n\n\n# Spring\n\n----------------------------------------\n\n\n# bean作用域\n\n * Spring 中 bean 默认是单实例 singleton\n   \n   * 在单例模式中时，在加载Spring配置文件时就会创建bean对象\n\n * 另外还有 多实例 prototype\n   \n   * 在调用getbean()方法时才创建对象\n   * 每次调用getbean()时都创建一个新的对象\n\n * request\n   \n   * 在每次请求时创建对象\n\n * session\n   \n   * 在一次会话中创建对象\n\n\n# bean生命周期\n\n1. bean实例化\n2. 注入属性\n3. 后置处理器\n4. 初始化\n5. 使用bean\n6. 后置处理器\n7. 销毁",normalizedContent:"[toc]\n\n\n# spring\n\n----------------------------------------\n\n\n# bean作用域\n\n * spring 中 bean 默认是单实例 singleton\n   \n   * 在单例模式中时，在加载spring配置文件时就会创建bean对象\n\n * 另外还有 多实例 prototype\n   \n   * 在调用getbean()方法时才创建对象\n   * 每次调用getbean()时都创建一个新的对象\n\n * request\n   \n   * 在每次请求时创建对象\n\n * session\n   \n   * 在一次会话中创建对象\n\n\n# bean生命周期\n\n1. bean实例化\n2. 注入属性\n3. 后置处理器\n4. 初始化\n5. 使用bean\n6. 后置处理器\n7. 销毁",charsets:{cjk:!0}},{title:"服务消费",frontmatter:{title:"服务消费",date:"2021-12-12T12:48:26.000Z",permalink:"/pages/cc1465/",categories:["SpringCloud"],tags:[null]},regularPath:"/03.SpringCloud/02.%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9.html",relativePath:"03.SpringCloud/02.服务消费.md",key:"v-4a1ffff1",path:"/pages/cc1465/",headersStr:null,content:'# 服务消费\n\n> 在前面完成了服务发现及服务提供者，在本章将完成服务消费者\n\n添加依赖 pom.xml\n\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n    </dependency>\n\n\n配置文件 application.yml\n\nserver:\n  port: 9001\nspring:\n  application:\n    name: eureka-consumer\neureka:\n  client:\n    service-url:\n      defaultZone: http://127.0.0.1:1001/eureka/\n\n\n在主类中添加注解@EnableEurekaClient, 创建RestTemplate Bean, 用于真正发起REST请求\n\n@EnableEurekaClient\n@SpringBootApplication\npublic class EurekaConsumerApplication {\n    @Bean\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaConsumerApplication.class, args);\n    }\n\n}\n\n\n创建Controller\n\n@RestController\npublic class DCController {\n    @Autowired\n    LoadBalancerClient loadBalancerClient;\n    @Autowired\n    RestTemplate restTemplate;\n\n    @GetMapping("/consumer")\n    public String dc(){\n        ServiceInstance instance = loadBalancerClient.choose("eureka-client");\n        String url = "http://"+instance.getHost()+":"+instance.getPort()+"/dc";\n        System.out.println(url);\n        return restTemplate.getForObject(url,String.class);\n    }\n}\n\n\nLoadBalancerClient 与 DiscoveryClient 一样作为SpringCloud提供的抽象层接口，LoadBalancerClient如其名，可以看出是一个负载均衡客户端的抽象定义，在这里使用了SpringCloud提供的负载均衡客户端的实现BlockingLoadBalancerClient。\n\n----------------------------------------\n\n在消费者的controller中，注入了LoadBalancerClient和RestTemplate, 在\'/consumer\'的实现中，先通过 loadBalancerClient 的 choose 获取到一个 eureka-client的实例，然后通过对象中的信息拼接处\'/dc\'接口的详细信息，最后再利用RestTemplate的对象完成对服务提供者接口的调用',normalizedContent:'# 服务消费\n\n> 在前面完成了服务发现及服务提供者，在本章将完成服务消费者\n\n添加依赖 pom.xml\n\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-web</artifactid>\n    </dependency>\n    <dependency>\n        <groupid>org.springframework.cloud</groupid>\n        <artifactid>spring-cloud-starter-netflix-eureka-client</artifactid>\n    </dependency>\n\n\n配置文件 application.yml\n\nserver:\n  port: 9001\nspring:\n  application:\n    name: eureka-consumer\neureka:\n  client:\n    service-url:\n      defaultzone: http://127.0.0.1:1001/eureka/\n\n\n在主类中添加注解@enableeurekaclient, 创建resttemplate bean, 用于真正发起rest请求\n\n@enableeurekaclient\n@springbootapplication\npublic class eurekaconsumerapplication {\n    @bean\n    public resttemplate resttemplate(){\n        return new resttemplate();\n    }\n\n    public static void main(string[] args) {\n        springapplication.run(eurekaconsumerapplication.class, args);\n    }\n\n}\n\n\n创建controller\n\n@restcontroller\npublic class dccontroller {\n    @autowired\n    loadbalancerclient loadbalancerclient;\n    @autowired\n    resttemplate resttemplate;\n\n    @getmapping("/consumer")\n    public string dc(){\n        serviceinstance instance = loadbalancerclient.choose("eureka-client");\n        string url = "http://"+instance.gethost()+":"+instance.getport()+"/dc";\n        system.out.println(url);\n        return resttemplate.getforobject(url,string.class);\n    }\n}\n\n\nloadbalancerclient 与 discoveryclient 一样作为springcloud提供的抽象层接口，loadbalancerclient如其名，可以看出是一个负载均衡客户端的抽象定义，在这里使用了springcloud提供的负载均衡客户端的实现blockingloadbalancerclient。\n\n----------------------------------------\n\n在消费者的controller中，注入了loadbalancerclient和resttemplate, 在\'/consumer\'的实现中，先通过 loadbalancerclient 的 choose 获取到一个 eureka-client的实例，然后通过对象中的信息拼接处\'/dc\'接口的详细信息，最后再利用resttemplate的对象完成对服务提供者接口的调用',charsets:{cjk:!0},lastUpdated:"2021/12/12, 22:33:36",lastUpdatedTimestamp:1639319616e3},{title:"服务治理",frontmatter:{title:"服务治理",date:"2022-02-25T23:13:57.000Z",permalink:"/pages/6d3e7e/",categories:"SpringCloud",tags:[null]},regularPath:"/03.SpringCloud/01.%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86.html",relativePath:"03.SpringCloud/01.服务治理.md",key:"v-75e52150",path:"/pages/6d3e7e/",headers:[{level:2,title:"SpringCloud Eureka",slug:"springcloud-eureka",normalizedTitle:"springcloud eureka",charIndex:939},{level:3,title:"服务注册中心",slug:"服务注册中心",normalizedTitle:"服务注册中心",charIndex:1076},{level:3,title:"创建服务提供者（Provider）",slug:"创建服务提供者-provider",normalizedTitle:"创建服务提供者（provider）",charIndex:2586},{level:3,title:"eureka的自我保护机制",slug:"eureka的自我保护机制",normalizedTitle:"eureka的自我保护机制",charIndex:4503},{level:2,title:"SpringCloud Consul",slug:"springcloud-consul",normalizedTitle:"springcloud consul",charIndex:5075},{level:3,title:"安装Consul",slug:"安装consul",normalizedTitle:"安装consul",charIndex:5211},{level:3,title:"修改服务提供者（Provider）",slug:"修改服务提供者-provider",normalizedTitle:"修改服务提供者（provider）",charIndex:5298},{level:2,title:"Zookeeper",slug:"zookeeper",normalizedTitle:"zookeeper",charIndex:97},{level:2,title:"附录",slug:"附录",normalizedTitle:"附录",charIndex:6751},{level:3,title:"注册中心原理",slug:"注册中心原理",normalizedTitle:"注册中心原理",charIndex:6758}],headersStr:"SpringCloud Eureka 服务注册中心 创建服务提供者（Provider） eureka的自我保护机制 SpringCloud Consul 安装Consul 修改服务提供者（Provider） Zookeeper 附录 注册中心原理",content:'[TOC]\n\n\n# 服务治理\n\nSpringCloud为服务治理提供了一层抽象接口，所以在SpringCloud应用中可以支持多种不同的服务治理框架：Netflix Eureka Consul Zookeeper。在SpringCloud服务治理抽象层的作用下，可以无缝切换服务治理实现，而不影响服务注册、服务发现、服务调用等逻辑。\n\nFEATURE          EUREKA                  CONSUL              ZOOKEEPER\n服务健康检查           可配支持                    服务状态，内存，硬盘等         \n多数据中心            —                       支持                  支持\nkv 存储服务          —                       支持                  支持\n一致性              —                       raft                -\ncap              ap                      cp                  cp\n使用接口(多语言能力)      http（sidecar）           支持 http 和 dns       \nwatch支持          支持 long polling/大部分增量   全量/支持long polling   \n自身监控             metrics                 metrics             \n安全               —                       acl/https           \n编程语言             Java                    go                  Java\nSpring Cloud集成   已支持                     已支持                 已支持\n\n\n# SpringCloud Eureka\n\nSpringCloud Eureka 是 SpringCloud Netflix项目下的服务治理模块，此子项目主要提供的模块：服务发现（Eureka） 断路器（Hystrix） 智能路由（Zuul） 负载均衡（Ribbon）\n\n\n# 服务注册中心\n\n创建SpringBoot项目，在pom.xml引入依赖（需要注意SpringCloud版本和Springboot版本对应）\n\n  <parent>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-parent</artifactId>\n      <version>2.5.4</version>\n      <relativePath/> \x3c!-- lookup parent from repository --\x3e\n  </parent>\n\n  <dependencies>\n      <dependency>\n          <groupId>org.springframework.cloud</groupId>\n          <artifactId>spring-cloud-starter-consul-discovery</artifactId>\n      </dependency>\n  </dependencies>\n  <dependencyManagement>\n      <dependencies>\n          <dependency>\n              <groupId>org.springframework.cloud</groupId>\n              <artifactId>spring-cloud-dependencies</artifactId>\n              <version>2020.0.3</version>\n              <type>pom</type>\n              <scope>import</scope>\n          </dependency>\n      </dependencies>\n  </dependencyManagement>\n\n\n通过@EnableEurekaServer注解启动一个服务注册中心\n\n    @EnableEurekaServer\n    @SpringBootApplication\n    public class EurekaServerApplication {\n\n        public static void main(String[] args) {\n            SpringApplication.run(EurekaServerApplication.class, args);\n        }\n\n    }\n\n\n在默认配置下Eureka服务中心会将自己作为客户端进行注册，所以需要禁用它的客户端注册行为，在application.yml配置文件中进行配置\n\nserver:\n  port: 1001    //应用端口\nspring:\n  application:\n    name: eureka-server\n\neureka:\n  instance:\n    hostname: localhost\n  client:\n    register-with-eureka: false\n    fetch-registry: false\n  server:\n    enable-self-preservation: false //关闭自我保护\n\n\n启动项目后，访问 http://127.0.0.1:1001,可以看到下面画面\n\n\n\n\n# 创建服务提供者（Provider）\n\n创建一个SpringBoot项目，也可以在上个服务中心项目中添加module,在pom.xml中添加以下依赖\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.4</version>\n        <relativePath/> \x3c!-- lookup parent from repository --\x3e\n    </parent>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>2020.0.3</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n\n创建Controller\n\n@RestController\npublic class DCController {\n    @Autowired\n    DiscoveryClient discoveryClient;    //SpringCloud提供的抽象借口，依赖此接口可以随意更换服务治理实现而不修改代码\n\n    @GetMapping("/dc")\n    public String dc(){\n        String services = "Services: " + discoveryClient.getServices();\n        System.out.println(services);\n        return services;\n    }\n}\n\n\n在应用主类上添加@EnableEurekaClient注解\n\n@EnableEurekaClient\n@SpringBootApplication\npublic class EurekaClientApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaClientApplication.class, args);\n    }\n\n}\n\n\n做完这些后，还需要配置application.yml文件\n\nspring:\n  application:\n    name: eureka-client\n\nserver:\n  port: 8001\neureka:\n  client:\n    service-url:\n      defaultZone: http://127.0.0.1:1001/eureka/\n\n\n\n启动该项目后，在此进入 http://127.0.0.1:1001，可以看到创建的服务成功进行了注册\n\n\n# eureka的自我保护机制\n\n> 当Eureka Server在短时间内丢失过多客户端时，将进入自我保护模式，进入该模式后，Eureka Server将不再删除服务注册表中的数据\n\n * expectedNumberOfRenewsPerMin 期望最大每分钟续租次数\n * numberOfRenewsPerMinThreshold 期望最小每分钟续租次数\n\n当每分钟心跳书小于 numberOfRenewsPerMinThreshold(期望最小每分钟续租次数)时，将出发自我保护机制，不再自动过期续租\n\n`expectedNumberOfRenewsPerMin` = 当前注册的应用实例数 x 2 `numberOfRenewsPerMinThreshold` = `expectedNumberOfRenewsPerMin` * 续租百分比( `eureka.renewalPercentThreshold` )\n\n在eureka-server初始化、定时重置、应用实例注册、应用实例下线时重新计算expectedNumberOfRenewsPerMin，numberOfRenewsPerMinThreshold\n\n定时重置由eureka.renewalThresholdUpdateIntervalMs配置，默认15分钟\n\n\n# SpringCloud Consul\n\n> Spring Cloud Consul 项目是针对 Consul 的服务治理实现。Consul 是一个分布式高可用的系统，它包含多个组件，但是作为一个整体，在微服务架构中，为我们的基础设施提供服务发现和服务配置的工具。\n\n\n# 安装Consul\n\n在官网下载：下载\n\n解压后，得到consul.exe程序，在当前路径下打开命令行窗口 使用consul agent -dev启动consul\n\n\n\n\n# 修改服务提供者（Provider）\n\n在pom.xml添加依赖，并移除Eureka Client依赖\n\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-consul-discovery</artifactId>\n        <version>3.0.3</version>\n    </dependency>\n\n\n添加配置application.yml,不需要移除 eureka 的配置\n\nspring:\n  application:\n    name: eureka-client\n  cloud:\n    consul:\n      host: localhost\n      port: 8500\nserver:\n  port: 8001\neureka:\n  client:\n    service-url:\n      defaultZone: http://127.0.0.1:1001/eureka/\n\n\n移除主类中@EnableEurekaClient注解即可，得益于SpringCloud对服务治理的抽象层，该项目已经完成转换Consul作为服务治理的实现。\n\n\n\n\n# Zookeeper\n\n添加pom\n\n\x3c!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-zookeeper-discovery --\x3e\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-zookeeper-discovery</artifactId>\n        </dependency>\n\n\nyml\n\nserver:\n  port: 8003\n\nspring:\n  application:\n    name: cloud-payment-service\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/iot?characterEncoding=utf-8&serverTimezone=GMT%2B8\n    username: root\n    password: 123456\n  cloud:\n    zookeeper:\n      connect-string: localhost:2181\n\nmybatis:\n  mapper-locations: classpath:mapper/*.xml\n  type-aliases-package: com.nanami.common.entities\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n\n\n\n\n----------------------------------------\n\n\n# 附录\n\n\n# 注册中心原理\n\n在使用注册中心时，存在三种角色：服务提供者(provider)、服务消费者(consumer)、注册中心(registry)。\n\n * provider在启动时，向register注册自己为一个服务，同时，定期向register发送心跳，保持存活。关闭时，向register取消注册\n * consumer在启动时，向register订阅使用到的服务，并在内存中缓存服务的实例列表。后续，consumer向对应服务的provider发起调用时，从内存中该服务的实例列表中选取一个进行远程调用，关闭时取消订阅\n * register在一定时间内没有收到provider的心跳，从服务的实例列表中移除provider。服务的实例列表发生变化时，通知订阅该服务的consumer刷新本地缓存。 eureka注册中心没有通知功能，而是让client定期轮询，以更新本地缓存',normalizedContent:'[toc]\n\n\n# 服务治理\n\nspringcloud为服务治理提供了一层抽象接口，所以在springcloud应用中可以支持多种不同的服务治理框架：netflix eureka consul zookeeper。在springcloud服务治理抽象层的作用下，可以无缝切换服务治理实现，而不影响服务注册、服务发现、服务调用等逻辑。\n\nfeature          eureka                  consul              zookeeper\n服务健康检查           可配支持                    服务状态，内存，硬盘等         \n多数据中心            —                       支持                  支持\nkv 存储服务          —                       支持                  支持\n一致性              —                       raft                -\ncap              ap                      cp                  cp\n使用接口(多语言能力)      http（sidecar）           支持 http 和 dns       \nwatch支持          支持 long polling/大部分增量   全量/支持long polling   \n自身监控             metrics                 metrics             \n安全               —                       acl/https           \n编程语言             java                    go                  java\nspring cloud集成   已支持                     已支持                 已支持\n\n\n# springcloud eureka\n\nspringcloud eureka 是 springcloud netflix项目下的服务治理模块，此子项目主要提供的模块：服务发现（eureka） 断路器（hystrix） 智能路由（zuul） 负载均衡（ribbon）\n\n\n# 服务注册中心\n\n创建springboot项目，在pom.xml引入依赖（需要注意springcloud版本和springboot版本对应）\n\n  <parent>\n      <groupid>org.springframework.boot</groupid>\n      <artifactid>spring-boot-starter-parent</artifactid>\n      <version>2.5.4</version>\n      <relativepath/> \x3c!-- lookup parent from repository --\x3e\n  </parent>\n\n  <dependencies>\n      <dependency>\n          <groupid>org.springframework.cloud</groupid>\n          <artifactid>spring-cloud-starter-consul-discovery</artifactid>\n      </dependency>\n  </dependencies>\n  <dependencymanagement>\n      <dependencies>\n          <dependency>\n              <groupid>org.springframework.cloud</groupid>\n              <artifactid>spring-cloud-dependencies</artifactid>\n              <version>2020.0.3</version>\n              <type>pom</type>\n              <scope>import</scope>\n          </dependency>\n      </dependencies>\n  </dependencymanagement>\n\n\n通过@enableeurekaserver注解启动一个服务注册中心\n\n    @enableeurekaserver\n    @springbootapplication\n    public class eurekaserverapplication {\n\n        public static void main(string[] args) {\n            springapplication.run(eurekaserverapplication.class, args);\n        }\n\n    }\n\n\n在默认配置下eureka服务中心会将自己作为客户端进行注册，所以需要禁用它的客户端注册行为，在application.yml配置文件中进行配置\n\nserver:\n  port: 1001    //应用端口\nspring:\n  application:\n    name: eureka-server\n\neureka:\n  instance:\n    hostname: localhost\n  client:\n    register-with-eureka: false\n    fetch-registry: false\n  server:\n    enable-self-preservation: false //关闭自我保护\n\n\n启动项目后，访问 http://127.0.0.1:1001,可以看到下面画面\n\n\n\n\n# 创建服务提供者（provider）\n\n创建一个springboot项目，也可以在上个服务中心项目中添加module,在pom.xml中添加以下依赖\n\n    <parent>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-parent</artifactid>\n        <version>2.5.4</version>\n        <relativepath/> \x3c!-- lookup parent from repository --\x3e\n    </parent>\n    <dependencies>\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-web</artifactid>\n        </dependency>\n        <dependency>\n            <groupid>org.springframework.cloud</groupid>\n            <artifactid>spring-cloud-starter-netflix-eureka-client</artifactid>\n        </dependency>\n    </dependencies>\n    <dependencymanagement>\n        <dependencies>\n            <dependency>\n                <groupid>org.springframework.cloud</groupid>\n                <artifactid>spring-cloud-dependencies</artifactid>\n                <version>2020.0.3</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencymanagement>\n\n\n创建controller\n\n@restcontroller\npublic class dccontroller {\n    @autowired\n    discoveryclient discoveryclient;    //springcloud提供的抽象借口，依赖此接口可以随意更换服务治理实现而不修改代码\n\n    @getmapping("/dc")\n    public string dc(){\n        string services = "services: " + discoveryclient.getservices();\n        system.out.println(services);\n        return services;\n    }\n}\n\n\n在应用主类上添加@enableeurekaclient注解\n\n@enableeurekaclient\n@springbootapplication\npublic class eurekaclientapplication {\n\n    public static void main(string[] args) {\n        springapplication.run(eurekaclientapplication.class, args);\n    }\n\n}\n\n\n做完这些后，还需要配置application.yml文件\n\nspring:\n  application:\n    name: eureka-client\n\nserver:\n  port: 8001\neureka:\n  client:\n    service-url:\n      defaultzone: http://127.0.0.1:1001/eureka/\n\n\n\n启动该项目后，在此进入 http://127.0.0.1:1001，可以看到创建的服务成功进行了注册\n\n\n# eureka的自我保护机制\n\n> 当eureka server在短时间内丢失过多客户端时，将进入自我保护模式，进入该模式后，eureka server将不再删除服务注册表中的数据\n\n * expectednumberofrenewspermin 期望最大每分钟续租次数\n * numberofrenewsperminthreshold 期望最小每分钟续租次数\n\n当每分钟心跳书小于 numberofrenewsperminthreshold(期望最小每分钟续租次数)时，将出发自我保护机制，不再自动过期续租\n\n`expectednumberofrenewspermin` = 当前注册的应用实例数 x 2 `numberofrenewsperminthreshold` = `expectednumberofrenewspermin` * 续租百分比( `eureka.renewalpercentthreshold` )\n\n在eureka-server初始化、定时重置、应用实例注册、应用实例下线时重新计算expectednumberofrenewspermin，numberofrenewsperminthreshold\n\n定时重置由eureka.renewalthresholdupdateintervalms配置，默认15分钟\n\n\n# springcloud consul\n\n> spring cloud consul 项目是针对 consul 的服务治理实现。consul 是一个分布式高可用的系统，它包含多个组件，但是作为一个整体，在微服务架构中，为我们的基础设施提供服务发现和服务配置的工具。\n\n\n# 安装consul\n\n在官网下载：下载\n\n解压后，得到consul.exe程序，在当前路径下打开命令行窗口 使用consul agent -dev启动consul\n\n\n\n\n# 修改服务提供者（provider）\n\n在pom.xml添加依赖，并移除eureka client依赖\n\n    <dependency>\n        <groupid>org.springframework.cloud</groupid>\n        <artifactid>spring-cloud-starter-consul-discovery</artifactid>\n        <version>3.0.3</version>\n    </dependency>\n\n\n添加配置application.yml,不需要移除 eureka 的配置\n\nspring:\n  application:\n    name: eureka-client\n  cloud:\n    consul:\n      host: localhost\n      port: 8500\nserver:\n  port: 8001\neureka:\n  client:\n    service-url:\n      defaultzone: http://127.0.0.1:1001/eureka/\n\n\n移除主类中@enableeurekaclient注解即可，得益于springcloud对服务治理的抽象层，该项目已经完成转换consul作为服务治理的实现。\n\n\n\n\n# zookeeper\n\n添加pom\n\n\x3c!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-zookeeper-discovery --\x3e\n        <dependency>\n            <groupid>org.springframework.cloud</groupid>\n            <artifactid>spring-cloud-starter-zookeeper-discovery</artifactid>\n        </dependency>\n\n\nyml\n\nserver:\n  port: 8003\n\nspring:\n  application:\n    name: cloud-payment-service\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.driver\n    url: jdbc:mysql://localhost:3306/iot?characterencoding=utf-8&servertimezone=gmt%2b8\n    username: root\n    password: 123456\n  cloud:\n    zookeeper:\n      connect-string: localhost:2181\n\nmybatis:\n  mapper-locations: classpath:mapper/*.xml\n  type-aliases-package: com.nanami.common.entities\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.stdoutimpl\n\n\n\n\n----------------------------------------\n\n\n# 附录\n\n\n# 注册中心原理\n\n在使用注册中心时，存在三种角色：服务提供者(provider)、服务消费者(consumer)、注册中心(registry)。\n\n * provider在启动时，向register注册自己为一个服务，同时，定期向register发送心跳，保持存活。关闭时，向register取消注册\n * consumer在启动时，向register订阅使用到的服务，并在内存中缓存服务的实例列表。后续，consumer向对应服务的provider发起调用时，从内存中该服务的实例列表中选取一个进行远程调用，关闭时取消订阅\n * register在一定时间内没有收到provider的心跳，从服务的实例列表中移除provider。服务的实例列表发生变化时，通知订阅该服务的consumer刷新本地缓存。 eureka注册中心没有通知功能，而是让client定期轮询，以更新本地缓存',charsets:{cjk:!0},lastUpdated:"2022/01/27, 12:53:38",lastUpdatedTimestamp:1643259218e3},{title:"配置中心",frontmatter:{title:"配置中心",date:"2021-12-12T12:48:26.000Z",permalink:"/pages/e3f7fb/",categories:["SpringCloud"],tags:[null]},regularPath:"/03.SpringCloud/05.%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html",relativePath:"03.SpringCloud/05.配置中心.md",key:"v-0f543b28",path:"/pages/e3f7fb/",headers:[{level:2,title:"准备配置仓库",slug:"准备配置仓库",normalizedTitle:"准备配置仓库",charIndex:498},{level:2,title:"构建配置中心",slug:"构建配置中心",normalizedTitle:"构建配置中心",charIndex:721},{level:2,title:"构建客户端",slug:"构建客户端",normalizedTitle:"构建客户端",charIndex:2621},{level:2,title:"高可用配置中心",slug:"高可用配置中心",normalizedTitle:"高可用配置中心",charIndex:3872},{level:3,title:"接入注册中心与配置刷新",slug:"接入注册中心与配置刷新",normalizedTitle:"接入注册中心与配置刷新",charIndex:3884}],headersStr:"准备配置仓库 构建配置中心 构建客户端 高可用配置中心 接入注册中心与配置刷新",content:'# 配置中心\n\n> Spring Cloud Config是Spring Cloud团队创建的一个全新项目，用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持，它分为服务端与客户端两个部分。其中服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置仓库并为客户端提供获取配置信息、加密/解密信息等访问接口；而客户端则是微服务架构中的各个微服务应用或基础设施，它们通过指定的配置中心来管理应用资源与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。Spring Cloud Config实现了对服务端和客户端中环境变量和属性配置的抽象映射，所以它除了适用于Spring构建的应用程序之外，也可以在任何其他语言运行的应用程序中使用。由于Spring Cloud Config实现的配置中心默认采用Git来存储配置信息，所以使用Spring Cloud Config构建的配置服务器，天然就支持对微服务应用配置信息的版本管理，并且可以通过Git客户端工具来方便的管理和访问配置内容。当然它也提供了对其他存储方式的支持，比如：SVN仓库、本地化文件系统。\n\n\n# 准备配置仓库\n\n在github或gitee上创建一个仓库，然后创建文件，配置文件的名字需要和config的client端的application name一致\n\nconfig-client.yml:\n\ninfo:\n    profile: default\n\n\nconfig-client-dev.yml\n\ninfo:\n    profile: dev\n\n\n----------------------------------------\n\n\n# 构建配置中心\n\n * 创建SpringBoot工程，命名为：config-server-git，添加依赖\n\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-config-server</artifactId>\n</dependency>\n\n\n * 在主类上添加@EnableConfigServer注解\n\n@EnableConfigServer\n@SpringBootApplication\npublic class ConfigServerGitApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ConfigServerGitApplication.class, args);\n    }\n\n}\n\n\n * 在application.yml中添加配置服务相关信息\n\nserver:\n  port: 10001\nspring:\n  application:\n    name: config-server\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://gitee.com/gevikhn/config-repo-demp.git\n\n\n\n至此，已经可以通过Config Server来访问配置内容了，不过SpringCloud Config有着它特有的一套访问规则\n\n/{application}/{profile}[/{label}]\n/{application}-{profile}.yml\n/{label}/{application}-{profile}.yml\n/{application}-{profile}.properties\n/{label}/{application}-{profile}.properties\n\n\napplication即应用名称，也为配置文件的文件名 profile是配置文件的版本，项目存在开发环境版本、测试环境版本、生产环境版本，配置文件也存在对应的版本，使用application-{profile}.yml 加以区分, 如application-dev.yml、application-sit.yml、application-prod.yml\n\n访问http://localhost:10001/config-client/dev\n\n{\n    "name": "config-client",\n    "profiles": [\n        "dev"\n    ],\n    "label": null,\n    "version": "46f37b16392eb82553fe427db66f93fc83de55f3",\n    "state": null,\n    "propertySources": [\n        {\n            "name": "https://gitee.com/gevikhn/config-repo-demp.git/file:C:\\\\Users\\\\ciallo\\\\AppData\\\\Local\\\\Temp\\\\config-repo-7200414626278387742\\\\config-client-dev.yml",\n            "source": {\n                "info.profile": "dev"\n            }\n        },\n        {\n            "name": "https://gitee.com/gevikhn/config-repo-demp.git/file:C:\\\\Users\\\\ciallo\\\\AppData\\\\Local\\\\Temp\\\\config-repo-7200414626278387742\\\\config-client.yml",\n            "source": {\n                "info.profile": "default"\n            }\n        }\n    ]\n}\n\n\n----------------------------------------\n\n\n# 构建客户端\n\n * 创建一个SpringBoot工程，命名为config-client，并引入依赖\n\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-config</artifactId>\n    </dependency>\n\n\n创建Bootstrap.xml文件，指定获取配置文件的config-server-git位置\n\nspring:\n  application:\n    name: config-client\n  cloud:\n    config:\n      uri: http://127.0.0.1:10001\n      profile: dev\n      label: master\nserver:\n  port: 2001\n\ninfo:\n  profile: NaN\n\n\n其中\n\ninfo:\n  profile: NaN\n\n\n对应配置文件中的属性\n\nSpringBoot在启动时我、会先加载Bootstrap.xml,然后再加载application.xml,但是在SpringCloud2.0后，SpringBoot不会默认加载Bootst.xml,需要引入依赖\n\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-bootstrap</artifactId>\n    </dependency>\n\n\n要访问配置文件的属性，可以通过@Value()注解进行\n\n@RestController\n@SpringBootApplication\npublic class ConfigClientApplication {\n    @Value("${info.profile}")   //配置文件属性\n    String msg;\n\n    public static void main(String[] args) {\n        SpringApplication.run(ConfigClientApplication.class, args);\n    }\n\n    @GetMapping("/show")\n    public Object show(){\n        return msg;\n    }\n}\n\n\n\n# 高可用配置中心\n\n\n# 接入注册中心与配置刷新\n\n * config-server 首先，在pom.xml中添加eureka依赖\n   \n   <dependency>\n       <groupId>org.springframework.cloud</groupId>\n       <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n   </dependency>\n   \n   \n   然后在主类添加@EnableDiscoverClient注解，在application.yml中添加Eureka配置信息\n   \n   server:\n   port: 10001\n   spring:\n     application:\n       name: config-server\n     cloud:\n       config:\n         server:\n           git:\n             uri: https://gitee.com/gevikhn/config-repo-demp.git\n   \n   encrypt:\n     key: 666666\n     \n   eureka:\n     client:\n       service-url:\n         defaultZone: http://127.0.0.1:1001/eureka/\n   \n\n * config-client 同上面一样，添加eureka client 依赖，并在主类上添加@EnableDiscoverClient注解\n   \n   <dependency>\n       <groupId>org.springframework.cloud</groupId>\n       <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n       <version>3.0.4</version>\n   </dependency>\n   \n   <dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-web</artifactId>\n   </dependency>\n   <dependency>\n       <groupId>org.springframework.cloud</groupId>\n       <artifactId>spring-cloud-starter-config</artifactId>\n   </dependency>\n   \n   <dependency>\n       <groupId>org.springframework.cloud</groupId>\n       <artifactId>spring-cloud-starter-bootstrap</artifactId>\n   </dependency>\n   \n   \x3c!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator --\x3e\n   <dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-actuator</artifactId>\n   </dependency>\n   \n   \n   在bootstrap.yml中添加配置\n   \n   spring:\n   application:\n     name: config-client\n   cloud:\n     config:\n       discovery:\n         enabled: true\n         service-id: config-server\n       profile: dev\n   server:\n     port: 2001\n   \n   info:\n     profile: NaN\n   \n   eureka:\n     client:\n       service-url:\n         defaultZone: http://127.0.0.1:1001/eureka/\n   management:\n     endpoints:\n       web:\n         exposure:\n           include: refresh,health,info\n   \n   \n   需要注意需要配置 management.endpoints.web.exposure.include以开启actuator来进行刷新Config\n   \n   在Controller上添加@RefreshScope注解\n   \n   @RefreshScope\n   @RestController\n   public class GetConfig {\n       @Value("${info.profile}")\n       String msg;\n   \n       @GetMapping("/show")\n       public Object show(){\n           return msg;\n       }\n   }\n   \n\n在修改配置文件后，访问http://127.0.0.1:2001/actuator/refresh即可刷新配置，访问该链接后返回\n\n[\n    "config.client.version",\n    "info.profile"\n]\n',normalizedContent:'# 配置中心\n\n> spring cloud config是spring cloud团队创建的一个全新项目，用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持，它分为服务端与客户端两个部分。其中服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置仓库并为客户端提供获取配置信息、加密/解密信息等访问接口；而客户端则是微服务架构中的各个微服务应用或基础设施，它们通过指定的配置中心来管理应用资源与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。spring cloud config实现了对服务端和客户端中环境变量和属性配置的抽象映射，所以它除了适用于spring构建的应用程序之外，也可以在任何其他语言运行的应用程序中使用。由于spring cloud config实现的配置中心默认采用git来存储配置信息，所以使用spring cloud config构建的配置服务器，天然就支持对微服务应用配置信息的版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。当然它也提供了对其他存储方式的支持，比如：svn仓库、本地化文件系统。\n\n\n# 准备配置仓库\n\n在github或gitee上创建一个仓库，然后创建文件，配置文件的名字需要和config的client端的application name一致\n\nconfig-client.yml:\n\ninfo:\n    profile: default\n\n\nconfig-client-dev.yml\n\ninfo:\n    profile: dev\n\n\n----------------------------------------\n\n\n# 构建配置中心\n\n * 创建springboot工程，命名为：config-server-git，添加依赖\n\n<dependency>\n    <groupid>org.springframework.cloud</groupid>\n    <artifactid>spring-cloud-config-server</artifactid>\n</dependency>\n\n\n * 在主类上添加@enableconfigserver注解\n\n@enableconfigserver\n@springbootapplication\npublic class configservergitapplication {\n\n    public static void main(string[] args) {\n        springapplication.run(configservergitapplication.class, args);\n    }\n\n}\n\n\n * 在application.yml中添加配置服务相关信息\n\nserver:\n  port: 10001\nspring:\n  application:\n    name: config-server\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://gitee.com/gevikhn/config-repo-demp.git\n\n\n\n至此，已经可以通过config server来访问配置内容了，不过springcloud config有着它特有的一套访问规则\n\n/{application}/{profile}[/{label}]\n/{application}-{profile}.yml\n/{label}/{application}-{profile}.yml\n/{application}-{profile}.properties\n/{label}/{application}-{profile}.properties\n\n\napplication即应用名称，也为配置文件的文件名 profile是配置文件的版本，项目存在开发环境版本、测试环境版本、生产环境版本，配置文件也存在对应的版本，使用application-{profile}.yml 加以区分, 如application-dev.yml、application-sit.yml、application-prod.yml\n\n访问http://localhost:10001/config-client/dev\n\n{\n    "name": "config-client",\n    "profiles": [\n        "dev"\n    ],\n    "label": null,\n    "version": "46f37b16392eb82553fe427db66f93fc83de55f3",\n    "state": null,\n    "propertysources": [\n        {\n            "name": "https://gitee.com/gevikhn/config-repo-demp.git/file:c:\\\\users\\\\ciallo\\\\appdata\\\\local\\\\temp\\\\config-repo-7200414626278387742\\\\config-client-dev.yml",\n            "source": {\n                "info.profile": "dev"\n            }\n        },\n        {\n            "name": "https://gitee.com/gevikhn/config-repo-demp.git/file:c:\\\\users\\\\ciallo\\\\appdata\\\\local\\\\temp\\\\config-repo-7200414626278387742\\\\config-client.yml",\n            "source": {\n                "info.profile": "default"\n            }\n        }\n    ]\n}\n\n\n----------------------------------------\n\n\n# 构建客户端\n\n * 创建一个springboot工程，命名为config-client，并引入依赖\n\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-web</artifactid>\n    </dependency>\n    <dependency>\n        <groupid>org.springframework.cloud</groupid>\n        <artifactid>spring-cloud-starter-config</artifactid>\n    </dependency>\n\n\n创建bootstrap.xml文件，指定获取配置文件的config-server-git位置\n\nspring:\n  application:\n    name: config-client\n  cloud:\n    config:\n      uri: http://127.0.0.1:10001\n      profile: dev\n      label: master\nserver:\n  port: 2001\n\ninfo:\n  profile: nan\n\n\n其中\n\ninfo:\n  profile: nan\n\n\n对应配置文件中的属性\n\nspringboot在启动时我、会先加载bootstrap.xml,然后再加载application.xml,但是在springcloud2.0后，springboot不会默认加载bootst.xml,需要引入依赖\n\n    <dependency>\n        <groupid>org.springframework.cloud</groupid>\n        <artifactid>spring-cloud-starter-bootstrap</artifactid>\n    </dependency>\n\n\n要访问配置文件的属性，可以通过@value()注解进行\n\n@restcontroller\n@springbootapplication\npublic class configclientapplication {\n    @value("${info.profile}")   //配置文件属性\n    string msg;\n\n    public static void main(string[] args) {\n        springapplication.run(configclientapplication.class, args);\n    }\n\n    @getmapping("/show")\n    public object show(){\n        return msg;\n    }\n}\n\n\n\n# 高可用配置中心\n\n\n# 接入注册中心与配置刷新\n\n * config-server 首先，在pom.xml中添加eureka依赖\n   \n   <dependency>\n       <groupid>org.springframework.cloud</groupid>\n       <artifactid>spring-cloud-starter-netflix-eureka-client</artifactid>\n   </dependency>\n   \n   \n   然后在主类添加@enablediscoverclient注解，在application.yml中添加eureka配置信息\n   \n   server:\n   port: 10001\n   spring:\n     application:\n       name: config-server\n     cloud:\n       config:\n         server:\n           git:\n             uri: https://gitee.com/gevikhn/config-repo-demp.git\n   \n   encrypt:\n     key: 666666\n     \n   eureka:\n     client:\n       service-url:\n         defaultzone: http://127.0.0.1:1001/eureka/\n   \n\n * config-client 同上面一样，添加eureka client 依赖，并在主类上添加@enablediscoverclient注解\n   \n   <dependency>\n       <groupid>org.springframework.cloud</groupid>\n       <artifactid>spring-cloud-starter-netflix-eureka-client</artifactid>\n       <version>3.0.4</version>\n   </dependency>\n   \n   <dependency>\n       <groupid>org.springframework.boot</groupid>\n       <artifactid>spring-boot-starter-web</artifactid>\n   </dependency>\n   <dependency>\n       <groupid>org.springframework.cloud</groupid>\n       <artifactid>spring-cloud-starter-config</artifactid>\n   </dependency>\n   \n   <dependency>\n       <groupid>org.springframework.cloud</groupid>\n       <artifactid>spring-cloud-starter-bootstrap</artifactid>\n   </dependency>\n   \n   \x3c!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator --\x3e\n   <dependency>\n       <groupid>org.springframework.boot</groupid>\n       <artifactid>spring-boot-starter-actuator</artifactid>\n   </dependency>\n   \n   \n   在bootstrap.yml中添加配置\n   \n   spring:\n   application:\n     name: config-client\n   cloud:\n     config:\n       discovery:\n         enabled: true\n         service-id: config-server\n       profile: dev\n   server:\n     port: 2001\n   \n   info:\n     profile: nan\n   \n   eureka:\n     client:\n       service-url:\n         defaultzone: http://127.0.0.1:1001/eureka/\n   management:\n     endpoints:\n       web:\n         exposure:\n           include: refresh,health,info\n   \n   \n   需要注意需要配置 management.endpoints.web.exposure.include以开启actuator来进行刷新config\n   \n   在controller上添加@refreshscope注解\n   \n   @refreshscope\n   @restcontroller\n   public class getconfig {\n       @value("${info.profile}")\n       string msg;\n   \n       @getmapping("/show")\n       public object show(){\n           return msg;\n       }\n   }\n   \n\n在修改配置文件后，访问http://127.0.0.1:2001/actuator/refresh即可刷新配置，访问该链接后返回\n\n[\n    "config.client.version",\n    "info.profile"\n]\n',charsets:{cjk:!0},lastUpdated:"2022/01/27, 12:53:38",lastUpdatedTimestamp:1643259218e3},{title:"服务消费Feign",frontmatter:{title:"服务消费Feign",date:"2021-12-12T12:48:26.000Z",permalink:"/pages/e27e3e/",categories:["SpringCloud"],tags:[null]},regularPath:"/03.SpringCloud/04.%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9Feign.html",relativePath:"03.SpringCloud/04.服务消费Feign.md",key:"v-e19de712",path:"/pages/e27e3e/",headers:[{level:2,title:"openfeign",slug:"openfeign-2",normalizedTitle:"openfeign",charIndex:256},{level:2,title:"OpenFeign 超时控制",slug:"openfeign-超时控制",normalizedTitle:"openfeign 超时控制",charIndex:1314},{level:2,title:"OpenFeign 日志增强",slug:"openfeign日志增强",normalizedTitle:"openfeign 日志增强",charIndex:null}],headersStr:"openfeign OpenFeign 超时控制 OpenFeign 日志增强",content:'[TOC]\n\n\n# OpenFeign\n\n> Spring Cloud Feign是一套基于Netflix Feign实现的声明式服务调用客户端。它使得编写Web服务客户端变得更加简单。我们只需要通过创建接口并用注解来配置它既可完成对Web服务接口的绑定。它具备可插拔的注解支持，包括Feign注解、JAX-RS注解。它也支持可插拔的编码器和解码器。Spring Cloud Feign还扩展了对Spring MVC注解的支持，同时还整合了Ribbon和Eureka来提供均衡负载的HTTP客户端实现。\n\n\n# openfeign\n\n复制一份eureka-consumer工程，命名为eureka-consuner-feign 在pom.xml中添加依赖\n\n    \x3c!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-openfeign --\x3e\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-openfeign</artifactId>\n    </dependency>\n\n\n修改主类，添加@EnableFeignClients注解开启扫描Feigin客户端的功能\n\n@EnableDiscoveryClient\n@EnableFeignClients\n@SpringBootApplication\npublic class EurekaConsumerFeignApplication {\n    @Bean\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaConsumerFeignApplication.class, args);\n    }\n\n}\n\n\n创建Feign客户端接口\n\n@FeignClient("eureka-client")\npublic interface DcClient {\n    @GetMapping("/dc")\n    String consumer();\n}\n\n\n修改Controller,通过Feign客户端来调用服务提供方的接口\n\n@RestController\npublic class DCController {\n\n    @Autowired\n    DcClient dcClient;\n\n    @GetMapping("/consumer")\n    public String dc(){\n        return  dcClient.consumer();\n    }\n}\n\n\n\n# OpenFeign 超时控制\n\n配置文件中配置ribbon 的 ReadTimeout 与 ConnectTimeout 属性\n\nribbon:\n  ReadTimeout: 5000\n  ConnectTimeout: 5000\n\n\n\n# OpenFeign日志增强\n\n * 配置类\n   \n   import feign.Logger;\n   import org.springframework.context.annotation.Bean;\n   import org.springframework.context.annotation.Configuration;\n   \n   @Configuration\n   public class FeignConfig {\n       @Bean\n       Logger.Level feignLoggerLevel(){\n           return Logger.Level.FULL;\n       }\n   }\n   \n\n * 配置文件\n   \n   logging:\n     level:\n       com.nanami.order.Interface.PayClient: debug\n   ',normalizedContent:'[toc]\n\n\n# openfeign\n\n> spring cloud feign是一套基于netflix feign实现的声明式服务调用客户端。它使得编写web服务客户端变得更加简单。我们只需要通过创建接口并用注解来配置它既可完成对web服务接口的绑定。它具备可插拔的注解支持，包括feign注解、jax-rs注解。它也支持可插拔的编码器和解码器。spring cloud feign还扩展了对spring mvc注解的支持，同时还整合了ribbon和eureka来提供均衡负载的http客户端实现。\n\n\n# openfeign\n\n复制一份eureka-consumer工程，命名为eureka-consuner-feign 在pom.xml中添加依赖\n\n    \x3c!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-openfeign --\x3e\n    <dependency>\n        <groupid>org.springframework.cloud</groupid>\n        <artifactid>spring-cloud-starter-openfeign</artifactid>\n    </dependency>\n\n\n修改主类，添加@enablefeignclients注解开启扫描feigin客户端的功能\n\n@enablediscoveryclient\n@enablefeignclients\n@springbootapplication\npublic class eurekaconsumerfeignapplication {\n    @bean\n    public resttemplate resttemplate(){\n        return new resttemplate();\n    }\n\n    public static void main(string[] args) {\n        springapplication.run(eurekaconsumerfeignapplication.class, args);\n    }\n\n}\n\n\n创建feign客户端接口\n\n@feignclient("eureka-client")\npublic interface dcclient {\n    @getmapping("/dc")\n    string consumer();\n}\n\n\n修改controller,通过feign客户端来调用服务提供方的接口\n\n@restcontroller\npublic class dccontroller {\n\n    @autowired\n    dcclient dcclient;\n\n    @getmapping("/consumer")\n    public string dc(){\n        return  dcclient.consumer();\n    }\n}\n\n\n\n# openfeign 超时控制\n\n配置文件中配置ribbon 的 readtimeout 与 connecttimeout 属性\n\nribbon:\n  readtimeout: 5000\n  connecttimeout: 5000\n\n\n\n# openfeign日志增强\n\n * 配置类\n   \n   import feign.logger;\n   import org.springframework.context.annotation.bean;\n   import org.springframework.context.annotation.configuration;\n   \n   @configuration\n   public class feignconfig {\n       @bean\n       logger.level feignloggerlevel(){\n           return logger.level.full;\n       }\n   }\n   \n\n * 配置文件\n   \n   logging:\n     level:\n       com.nanami.order.interface.payclient: debug\n   ',charsets:{cjk:!0},lastUpdated:"2021/12/23, 23:20:56",lastUpdatedTimestamp:1640272856e3},{title:"服务网关",frontmatter:{title:"服务网关",date:"2021-12-12T12:48:26.000Z",permalink:"/pages/e610d6/",categories:["SpringCloud"],tags:[null]},regularPath:"/03.SpringCloud/06.%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3.html",relativePath:"03.SpringCloud/06.服务网关.md",key:"v-6d052887",path:"/pages/e610d6/",headers:[{level:2,title:"路由配置",slug:"路由配置",normalizedTitle:"路由配置",charIndex:1165},{level:3,title:"传统路由配置",slug:"传统路由配置",normalizedTitle:"传统路由配置",charIndex:1174},{level:3,title:"服务路由配置",slug:"服务路由配置",normalizedTitle:"服务路由配置",charIndex:1992}],headersStr:"路由配置 传统路由配置 服务路由配置",content:'[TOC]\n\n\n# Zuul服务网关\n\n构建服务网关 在pom.xml中添加依赖\n\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n\n\x3c!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-zuul --\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\n</dependency>\n\n\n在主类添加@EnableZuulProxy和@EnableDiscoveryClient注解\n\n@EnableZuulProxy\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class ApiGatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ApiGatewayApplication.class, args);\n    }\n\n}\n\n\n添加配置文件application.yml\n\nserver:\n  port: 1111\n\nspring:\n  application:\n    name: api-gateway\neureka:\n  client:\n    service-url:\n      defaultZone: http://127.0.0.1:1001/eureka/\n\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n\n\n访问http://localhost:1111/actuator/routes查看当前路由节点\n\n{\n    "/eureka-consumer/**": "eureka-consumer",\n    "/eureka-client/**": "eureka-client"\n}\n\n\n访问http://localhost:1111/eureka-consumer/consumer可以像之前一样访问消费者接口\n\n\n# 路由配置\n\n\n# 传统路由配置\n\n * 单实例配置：通过一组zuul.routes.<route>.path与zuul.routes.<route>.url参数对的方式配置\n   \n   "zuul.routes.user-service.path=/user-service/**"\n   "zuul.routes.user-service.url=http://localhost:8080/"\n   \n\n * 多实例配置：通过一组zuul.routes.<route>.path与zuul.routes.<route>.serviceId参数对的方式配置\n   \n   zuul.routes.user-service.path=/user-service/**\n   zuul.routes.user-service.serviceId=user-service\n   \n   ribbon.eureka.enabled=false\n   user-service.ribbon.listOfServers=http://localhost:8080/,http://localhost:8081/\n   \n\n * ribbon.eureka.enabled：由于zuul.routes.<route>.serviceId指定的是服务名称，默认情况下Ribbon会根据服务发现机制来获取配置服务名对应的实例清单。但是，若没有整合类似Eureka之类的服务治理框架，需要将该参数设置为false，不然配置的serviceId是获取不到对应实例清单的。\n\n * user-service.ribbon.listOfServers：该参数内容与zuul.routes.<route>.serviceId的配置相对应，开头的user-service对应了serviceId的值，这两个参数的配置相当于在该应用内部手工维护了服务与实例的对应关系。\n\n\n# 服务路由配置\n\n> Spring Cloud Zuul通过与Spring Cloud Eureka的整合，实现了对服务实例的自动化维护，所以在使用服务路由配置的时候，我们不需要向传统路由配置方式那样为serviceId去指定具体的服务实例地址，只需要通过一组zuul.routes.<route>.path与zuul.routes.<route>.serviceId参数对的方式配置即可\n\nzuul.routes.user-service.path=/user-service/**\nzuul.routes.user-service.serviceId=user-service\n\n\n对于面向服务的路由配置，除了使用path与serviceId映射的配置方式之外，还有一种更简洁的配置方式：zuul.routes.<serviceId>=<path>，其中<serviceId>用来指定路由的具体服务名，<path>用来配置匹配的请求表达式。\n\nzuul.routes.user-service=/user-service/**\n\n\n----------------------------------------\n\n\n# Gateway',normalizedContent:'[toc]\n\n\n# zuul服务网关\n\n构建服务网关 在pom.xml中添加依赖\n\n<dependency>\n    <groupid>org.springframework.cloud</groupid>\n    <artifactid>spring-cloud-starter-netflix-eureka-client</artifactid>\n</dependency>\n\n\x3c!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-zuul --\x3e\n<dependency>\n    <groupid>org.springframework.cloud</groupid>\n    <artifactid>spring-cloud-starter-netflix-zuul</artifactid>\n</dependency>\n\n\n在主类添加@enablezuulproxy和@enablediscoveryclient注解\n\n@enablezuulproxy\n@enablediscoveryclient\n@springbootapplication\npublic class apigatewayapplication {\n\n    public static void main(string[] args) {\n        springapplication.run(apigatewayapplication.class, args);\n    }\n\n}\n\n\n添加配置文件application.yml\n\nserver:\n  port: 1111\n\nspring:\n  application:\n    name: api-gateway\neureka:\n  client:\n    service-url:\n      defaultzone: http://127.0.0.1:1001/eureka/\n\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n\n\n访问http://localhost:1111/actuator/routes查看当前路由节点\n\n{\n    "/eureka-consumer/**": "eureka-consumer",\n    "/eureka-client/**": "eureka-client"\n}\n\n\n访问http://localhost:1111/eureka-consumer/consumer可以像之前一样访问消费者接口\n\n\n# 路由配置\n\n\n# 传统路由配置\n\n * 单实例配置：通过一组zuul.routes.<route>.path与zuul.routes.<route>.url参数对的方式配置\n   \n   "zuul.routes.user-service.path=/user-service/**"\n   "zuul.routes.user-service.url=http://localhost:8080/"\n   \n\n * 多实例配置：通过一组zuul.routes.<route>.path与zuul.routes.<route>.serviceid参数对的方式配置\n   \n   zuul.routes.user-service.path=/user-service/**\n   zuul.routes.user-service.serviceid=user-service\n   \n   ribbon.eureka.enabled=false\n   user-service.ribbon.listofservers=http://localhost:8080/,http://localhost:8081/\n   \n\n * ribbon.eureka.enabled：由于zuul.routes.<route>.serviceid指定的是服务名称，默认情况下ribbon会根据服务发现机制来获取配置服务名对应的实例清单。但是，若没有整合类似eureka之类的服务治理框架，需要将该参数设置为false，不然配置的serviceid是获取不到对应实例清单的。\n\n * user-service.ribbon.listofservers：该参数内容与zuul.routes.<route>.serviceid的配置相对应，开头的user-service对应了serviceid的值，这两个参数的配置相当于在该应用内部手工维护了服务与实例的对应关系。\n\n\n# 服务路由配置\n\n> spring cloud zuul通过与spring cloud eureka的整合，实现了对服务实例的自动化维护，所以在使用服务路由配置的时候，我们不需要向传统路由配置方式那样为serviceid去指定具体的服务实例地址，只需要通过一组zuul.routes.<route>.path与zuul.routes.<route>.serviceid参数对的方式配置即可\n\nzuul.routes.user-service.path=/user-service/**\nzuul.routes.user-service.serviceid=user-service\n\n\n对于面向服务的路由配置，除了使用path与serviceid映射的配置方式之外，还有一种更简洁的配置方式：zuul.routes.<serviceid>=<path>，其中<serviceid>用来指定路由的具体服务名，<path>用来配置匹配的请求表达式。\n\nzuul.routes.user-service=/user-service/**\n\n\n----------------------------------------\n\n\n# gateway',charsets:{cjk:!0},lastUpdated:"2022/01/27, 12:53:38",lastUpdatedTimestamp:1643259218e3},{title:"服务消费Ribbon",frontmatter:{title:"服务消费Ribbon",date:"2021-12-12T12:48:26.000Z",permalink:"/pages/e51ccb/",categories:["SpringCloud"],tags:[null]},regularPath:"/03.SpringCloud/03.%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9Ribbon.html",relativePath:"03.SpringCloud/03.服务消费Ribbon.md",key:"v-9e56b172",path:"/pages/e51ccb/",headers:[{level:2,title:"Ribbon",slug:"ribbon",normalizedTitle:"ribbon",charIndex:7},{level:2,title:"开始配置Ribbon",slug:"开始配置ribbon",normalizedTitle:"开始配置ribbon",charIndex:702},{level:2,title:"启动服务",slug:"启动服务",normalizedTitle:"启动服务",charIndex:1727}],headersStr:"Ribbon 开始配置Ribbon 启动服务",content:'# 服务消费(Ribbon)\n\n> 在服务消费中，通过LoadBalancerClient接口来获取某个服务的实例，并根据实例信息来发起服务接口消费请求，通过手动的去编写服务选取、链接拼接，这些有点太过繁琐，\n\n\n# Ribbon\n\nSpringCloud Ribbon是Netflix Ribbon实现的一套客户端负载均衡工具。它是基于HTTP和TCP的客户端负载均衡器，可以通过在客户端中配置ribbonServerList来设置服务端列表去轮询访问以达到均衡负载的作用。\n\n> 当Ribbon与Eureka联合使用时，ribbonServerList会被DiscoveryEnabledNIWSServerList重写，扩展成从Eureka注册中心中获取服务实例列表。同时它也会用NIWSDiscoveryPing来取代IPing，它将职责委托给Eureka来确定服务端是否已经启动。\n> \n> 而当Ribbon与Consul联合使用时，ribbonServerList会被ConsulServerList来扩展成从Consul获取服务实例列表。同时由ConsulPing来作为IPing接口的实现。\n\n在使用Spring Cloud Ribbon的时候，不论是与Eureka还是Consul结合，都会在引入Spring Cloud Eureka或Spring Cloud Consul依赖的时候通过自动化配置来加载上述所说的配置内容，所以我们可以快速在Spring Cloud中实现服务间调用的负载均衡\n\n----------------------------------------\n\n\n# 开始配置Ribbon\n\n复制eureka-consumer项目，命名为eureka-consumer-ribbon，在pom.xml文件中引入依赖\n\n\x3c!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-ribbon --\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>\n    <version>2.2.9.RELEASE</version>\n</dependency>\n\n\n注意！这里将会出现问题 修改主类，为RestTemplate添加@LoadBalanced注解\n\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class EurekaConsumerribbonApplication {\n    @Bean\n    @LoadBalanced\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaConsumerribbonApplication.class, args);\n    }\n\n}\n\n\n修改Controller，移除LoadBalancerClient相关代码\n\n@RestController\npublic class DCController {\n\n    @Autowired\n    RestTemplate restTemplate;\n\n    @GetMapping("/consumer")\n    public String dc(){\n\n        return restTemplate.getForObject("http://eureka-client/dc",String.class);\n    }\n}\n\n\n\n# 启动服务\n\n依次开启eureka-server,eureka-client,eureka-consumer-ribbon,访问http://localhost:9001/consumer 发现错误！\n\njava.lang.IllegalStateException: No instances available for eureka-client\n\tat org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient.execute(RibbonLoadBalancerClient.java:119) ~[spring-cloud-netflix-ribbon-2.2.9.RELEASE.jar:2.2.9.RELEASE]\n\tat org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient.execute(RibbonLoadBalancerClient.java:99) ~[spring-cloud-netflix-ribbon-2.2.9.RELEASE.jar:2.2.9.RELEASE]\n\tat org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor.intercept(LoadBalancerInterceptor.java:56) ~[spring-cloud-commons-3.0.3.jar:3.0.3]\n\tat org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:93) ~[spring-web-5.3.9.jar:5.3.9]\n\tat org.springframework.http.client.InterceptingClientHttpRequest.executeInternal(InterceptingClientHttpRequest.java:77) ~[spring-web-5.3.9.jar:5.3.9]\n........\n\n\n原因是导入的spring-cloud-starter-netflix-eureka-client包中已经包含Ribbon,移除Ribbon依赖即可。 最终的pom.xml文件\n\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.4</version>\n        <relativePath/> \x3c!-- lookup parent from repository --\x3e\n    </parent>\n    <groupId>com.example</groupId>\n    <artifactId>eureka-consumer-ribbon</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>eureka-consumer-ribbon</name>\n    <description>eureka-consumer-ribbon</description>\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>2020.0.3</spring-cloud.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n',normalizedContent:'# 服务消费(ribbon)\n\n> 在服务消费中，通过loadbalancerclient接口来获取某个服务的实例，并根据实例信息来发起服务接口消费请求，通过手动的去编写服务选取、链接拼接，这些有点太过繁琐，\n\n\n# ribbon\n\nspringcloud ribbon是netflix ribbon实现的一套客户端负载均衡工具。它是基于http和tcp的客户端负载均衡器，可以通过在客户端中配置ribbonserverlist来设置服务端列表去轮询访问以达到均衡负载的作用。\n\n> 当ribbon与eureka联合使用时，ribbonserverlist会被discoveryenabledniwsserverlist重写，扩展成从eureka注册中心中获取服务实例列表。同时它也会用niwsdiscoveryping来取代iping，它将职责委托给eureka来确定服务端是否已经启动。\n> \n> 而当ribbon与consul联合使用时，ribbonserverlist会被consulserverlist来扩展成从consul获取服务实例列表。同时由consulping来作为iping接口的实现。\n\n在使用spring cloud ribbon的时候，不论是与eureka还是consul结合，都会在引入spring cloud eureka或spring cloud consul依赖的时候通过自动化配置来加载上述所说的配置内容，所以我们可以快速在spring cloud中实现服务间调用的负载均衡\n\n----------------------------------------\n\n\n# 开始配置ribbon\n\n复制eureka-consumer项目，命名为eureka-consumer-ribbon，在pom.xml文件中引入依赖\n\n\x3c!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-ribbon --\x3e\n<dependency>\n    <groupid>org.springframework.cloud</groupid>\n    <artifactid>spring-cloud-starter-netflix-ribbon</artifactid>\n    <version>2.2.9.release</version>\n</dependency>\n\n\n注意！这里将会出现问题 修改主类，为resttemplate添加@loadbalanced注解\n\n@enablediscoveryclient\n@springbootapplication\npublic class eurekaconsumerribbonapplication {\n    @bean\n    @loadbalanced\n    public resttemplate resttemplate(){\n        return new resttemplate();\n    }\n\n    public static void main(string[] args) {\n        springapplication.run(eurekaconsumerribbonapplication.class, args);\n    }\n\n}\n\n\n修改controller，移除loadbalancerclient相关代码\n\n@restcontroller\npublic class dccontroller {\n\n    @autowired\n    resttemplate resttemplate;\n\n    @getmapping("/consumer")\n    public string dc(){\n\n        return resttemplate.getforobject("http://eureka-client/dc",string.class);\n    }\n}\n\n\n\n# 启动服务\n\n依次开启eureka-server,eureka-client,eureka-consumer-ribbon,访问http://localhost:9001/consumer 发现错误！\n\njava.lang.illegalstateexception: no instances available for eureka-client\n\tat org.springframework.cloud.netflix.ribbon.ribbonloadbalancerclient.execute(ribbonloadbalancerclient.java:119) ~[spring-cloud-netflix-ribbon-2.2.9.release.jar:2.2.9.release]\n\tat org.springframework.cloud.netflix.ribbon.ribbonloadbalancerclient.execute(ribbonloadbalancerclient.java:99) ~[spring-cloud-netflix-ribbon-2.2.9.release.jar:2.2.9.release]\n\tat org.springframework.cloud.client.loadbalancer.loadbalancerinterceptor.intercept(loadbalancerinterceptor.java:56) ~[spring-cloud-commons-3.0.3.jar:3.0.3]\n\tat org.springframework.http.client.interceptingclienthttprequest$interceptingrequestexecution.execute(interceptingclienthttprequest.java:93) ~[spring-web-5.3.9.jar:5.3.9]\n\tat org.springframework.http.client.interceptingclienthttprequest.executeinternal(interceptingclienthttprequest.java:77) ~[spring-web-5.3.9.jar:5.3.9]\n........\n\n\n原因是导入的spring-cloud-starter-netflix-eureka-client包中已经包含ribbon,移除ribbon依赖即可。 最终的pom.xml文件\n\n<?xml version="1.0" encoding="utf-8"?>\n<project xmlns="http://maven.apache.org/pom/4.0.0" xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n         xsi:schemalocation="http://maven.apache.org/pom/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelversion>4.0.0</modelversion>\n    <parent>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-parent</artifactid>\n        <version>2.5.4</version>\n        <relativepath/> \x3c!-- lookup parent from repository --\x3e\n    </parent>\n    <groupid>com.example</groupid>\n    <artifactid>eureka-consumer-ribbon</artifactid>\n    <version>0.0.1-snapshot</version>\n    <name>eureka-consumer-ribbon</name>\n    <description>eureka-consumer-ribbon</description>\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>2020.0.3</spring-cloud.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-web</artifactid>\n        </dependency>\n        <dependency>\n            <groupid>org.springframework.cloud</groupid>\n            <artifactid>spring-cloud-starter-netflix-eureka-client</artifactid>\n        </dependency>\n\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-test</artifactid>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <dependencymanagement>\n        <dependencies>\n            <dependency>\n                <groupid>org.springframework.cloud</groupid>\n                <artifactid>spring-cloud-dependencies</artifactid>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencymanagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-maven-plugin</artifactid>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n',charsets:{cjk:!0},lastUpdated:"2021/12/12, 22:33:36",lastUpdatedTimestamp:1639319616e3},{title:"SpringMvc",frontmatter:{title:"SpringMvc",date:"2022-03-09T08:49:24.000Z",permalink:"/pages/8e2a17/",categories:["SpringMvc"],tags:[null]},regularPath:"/04.SpringMvc/01.SpringMvc.html",relativePath:"04.SpringMvc/01.SpringMvc.md",key:"v-04e28f5d",path:"/pages/8e2a17/",headers:[{level:2,title:"SpringMvc流程",slug:"springmvc流程",normalizedTitle:"springmvc流程",charIndex:24}],headersStr:"SpringMvc流程",content:"[toc]\n\n\n# SpringMvc\n\n\n# SpringMvc流程\n\n（1）用户发送请求至前端控制器DispatcherServlet； （2）DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handler； （3）处理器映射器根据请求url找到具体的处理器Handler，生成处理器对象及处理器拦截器(如果有则生成)，一并返回给DispatcherServlet； （4）DispatcherServlet 调用 HandlerAdapter处理器适配器，请求执行Handler； （5）HandlerAdapter 经过适配调用 具体处理器进行处理业务逻辑； （6）Handler执行完成返回ModelAndView； （7）HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet； （8）DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析； （9）ViewResolver解析后返回具体View； （10）DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中） （11）DispatcherServlet响应用户。",normalizedContent:"[toc]\n\n\n# springmvc\n\n\n# springmvc流程\n\n（1）用户发送请求至前端控制器dispatcherservlet； （2）dispatcherservlet收到请求后，调用handlermapping处理器映射器，请求获取handler； （3）处理器映射器根据请求url找到具体的处理器handler，生成处理器对象及处理器拦截器(如果有则生成)，一并返回给dispatcherservlet； （4）dispatcherservlet 调用 handleradapter处理器适配器，请求执行handler； （5）handleradapter 经过适配调用 具体处理器进行处理业务逻辑； （6）handler执行完成返回modelandview； （7）handleradapter将handler执行结果modelandview返回给dispatcherservlet； （8）dispatcherservlet将modelandview传给viewresolver视图解析器进行解析； （9）viewresolver解析后返回具体view； （10）dispatcherservlet对view进行渲染视图（即将模型数据填充至视图中） （11）dispatcherservlet响应用户。",charsets:{cjk:!0}},{title:"服务容错保护",frontmatter:{title:"服务容错保护",date:"2021-12-12T12:48:26.000Z",permalink:"/pages/de500c/",categories:["SpringCloud"],tags:[null]},regularPath:"/03.SpringCloud/07.%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E4%BF%9D%E6%8A%A4.html",relativePath:"03.SpringCloud/07.服务容错保护.md",key:"v-28e19cf6",path:"/pages/de500c/",headers:[{level:2,title:"Hystrix服务降级",slug:"hystrix服务降级",normalizedTitle:"hystrix服务降级",charIndex:21},{level:2,title:"Hystrix依赖隔离",slug:"hystrix依赖隔离",normalizedTitle:"hystrix依赖隔离",charIndex:1392},{level:2,title:"Hystrix断路器",slug:"hystrix断路器",normalizedTitle:"hystrix断路器",charIndex:1541},{level:2,title:"OpenFeign + Hystrix",slug:"openfeign-hystrix",normalizedTitle:"openfeign + hystrix",charIndex:3248},{level:3,title:"服务降级",slug:"服务降级",normalizedTitle:"服务降级",charIndex:28},{level:2,title:"全局配置服务降级",slug:"全局配置服务降级",normalizedTitle:"全局配置服务降级",charIndex:5327},{level:2,title:"OpenFeign Fallback",slug:"openfeign-fallback",normalizedTitle:"openfeign fallback",charIndex:6150},{level:3,title:"fallback",slug:"fallback",normalizedTitle:"fallback",charIndex:1036},{level:3,title:"fallbackFactory",slug:"fallbackfactory",normalizedTitle:"fallbackfactory",charIndex:6221}],headersStr:"Hystrix服务降级 Hystrix依赖隔离 Hystrix断路器 OpenFeign + Hystrix 服务降级 全局配置服务降级 OpenFeign Fallback fallback fallbackFactory",content:'[TOC]\n\n\n# 服务容错保护\n\n\n# Hystrix服务降级\n\n> 在分布式系统中，服务之间的依赖错综复杂，如果一个服务发生故障，导致依赖它的其他服务出现远程调用的线程阻塞，若此时调用方的请求不断增加，最终会形成任务积压，线程无法释放，最终导致服务瘫痪，甚至故障会蔓延到整个系统。为了解决这样的问题，因此出现了断路器等一系列服务保护机制\n> \n> 针对上述问题，在Spring Cloud Hystrix中实现了线程隔离、断路器等一系列的服务保护功能。它也是基于Netflix的开源框架 Hystrix实现的，该框架目标在于通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备了服务降级、服务熔断、线程隔离、请求缓存、请求合并以及服务监控等强大功能。\n\n在之前的eureka-consumer-ribbon工程中进行改造\n\n * 添加依赖\n   \n     <dependency>\n         <groupId>org.springframework.cloud</groupId>\n         <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n         <version>2.2.9.RELEASE</version>\n     </dependency>\n   \n\n * 在主类添加@EnableCircuitBreaker注解\n\n * 改造Controller，将之前远程调用的逻辑迁移到新类ConsumerService中\n   \n   @RestController\n   public class DCController {\n       @Autowired\n       ConsumerService service;\n   \n       @GetMapping("/consumer")\n       public String dc(){\n   \n           return service.consumer();\n       }\n   }\n   \n   @Service\n   class ConsumerService{\n       @Autowired\n       RestTemplate restTemplate;\n   \n       @HystrixCommand(fallbackMethod = "fallback")\n       public String consumer(){\n           return restTemplate.getForObject("http://eureka-client/dc",String.class);\n       }\n       public String fallback(){\n           return "Fail";\n       }\n   }\n   \n\n启动服务，访问http://localhost:9001/consumer，此时可以正常获取结果，关闭服务提供者，再次访问链接，此时返回结果为Fail\n\n----------------------------------------\n\n\n# Hystrix依赖隔离\n\n> Hystrix除了服务降级之外，还有着线程隔离、断路器的能力\n\n使用@HystrixCommand来将某个函数包装成了Hystrix命令，除了定义服务降级之外，Hystrix框架就会自动的为这个函数实现调用的隔离 依赖隔离、服务降级在使用时候都是一体化实现的\n\n\n# Hystrix断路器\n\n断路器的三个重要参数：快照时间窗、请求总数下限、错误百分比下限。这个参数的作用分别是：\n\n * 快照时间窗：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。\n * 请求总数下限：在快照时间窗内，必须满足请求总数下限才有资格根据熔断。默认为20，意味着在10秒内，如果该hystrix命令的调用此时不足20次，即时所有的请求都超时或其他原因失败，断路器都不会打开。\n * 错误百分比下限：当请求总数在快照时间窗内超过了下限，比如发生了30次调用，如果在这30次调用中，有16次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%下限情况下，这时候就会将断路器打开。\n\n断路器开启或关闭的条件？\n\n 1. 当满足一定阈值时（默认10秒内超过20个请求次数）\n 2. 当失败率达到一定时（默认10秒内超过50%的请求失败）\n 3. 到达以上阈值，断路器将开启\n 4. 当开启时，所有请求将不会转发\n 5. 一段时间后（默认是5秒），这个时候断路器是半开状态，会让其中一个进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4~5\n\n断路器打开后，再次有请求调用时，将不会再调用主逻辑，而是直接调用降级逻辑。\n\n> 当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时\n\n开启断路器\n\n\n@RestController\npublic class DCController {\n    @Autowired\n    ConsumerService service;\n\n    @GetMapping("/consumer")\n    public String dc(){\n\n        return service.consumer();\n    }\n}\n\n@Service\nclass ConsumerService{\n    @Autowired\n    RestTemplate restTemplate;\n\n    @HystrixCommand(fallbackMethod = "fallback", commandProperties = {\n            @HystrixProperty(name = "circuitBreaker.enabled", value = "true"),\n            @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "5"),\n            @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds", value = "100000"),\n            @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage", value = "60")\n    })\n    public String consumer(){\n        System.out.println("a");\n        return restTemplate.getForObject("http://eureka-client/dc",String.class);\n    }\n    public String fallback(){\n        System.out.println("b");\n        return "Fail";\n    }\n}\n\n\n----------------------------------------\n\n\n# OpenFeign + Hystrix\n\n\n# 服务降级\n\n# 消费者端服务降级\n\n * 添加依赖\n   \n   \t\t<dependency>\n               <groupId>org.springframework.cloud</groupId>\n               <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n           </dependency>\n   \n\n * 修改配置文件: 启用hystrix\n   \n   feign:\n     hystrix:\n       enabled: true\n   \n\n * 修改controller\n   \n   import com.nanami.common.entities.CommonResult;\n   import com.nanami.order.Interface.PayClient;\n   import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\n   import com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;\n   import org.springframework.beans.factory.annotation.Autowired;\n   import org.springframework.web.bind.annotation.GetMapping;\n   import org.springframework.web.bind.annotation.RestController;\n   \n   /**\n    * @author 17723\n    */\n   @RestController\n   public class OrderController {\n       @Autowired\n       PayClient payClient;\n   \n       @GetMapping("/test")\n       @HystrixCommand(fallbackMethod = "fallback",commandProperties = {\n               @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds",value = "1500")\n       })\n       public CommonResult test(){\n           return payClient.test();\n       }\n       public CommonResult fallback(){\n           return new CommonResult(200,"调用失败",null);\n       }\n   }\n   \n   \n\n# 提供者端服务降级\n\n * 添加依赖\n   \n   \t<dependency>\n               <groupId>org.springframework.cloud</groupId>\n               <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n   \t</dependency>\n   \n\n * 修改service\n   \n    \t@HystrixCommand(fallbackMethod = "fallback", commandProperties = {\n       \t\t@HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds",\n                                value = "5000")\n                       })\n       public String test(){\n           try {\n               TimeUnit.SECONDS.sleep(3);\n           } catch (InterruptedException e) {\n               e.printStackTrace();\n           }\n           return "ciallo";\n       }\n   \n       public String fallback(){\n           return "error";\n       }\n   \n\n\n# 全局配置服务降级\n\n@DefaultProperties注解配置默认降级处理方法,\n\n> 在@DefaultProperties上配置defaultFallback属性后，在方法上的@HystrixCommand不添加fallbackMethod属性，将使用全局的服务降级处理方法。\n\n全局服务降级处理方法上不需要添加参数列表，否则会触发找不到方法异常\n\n@RestController\n@DefaultProperties(defaultFallback = "defaultfallback")\npublic class OrderController {\n    @Autowired\n    PayClient payClient;\n\n    @GetMapping("/test")\n//    @HystrixCommand(fallbackMethod = "fallback",commandProperties = {\n//            @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds",value = "1500")\n//    })\n    @HystrixCommand\n    public CommonResult test(){\n        return payClient.test();\n    }\n    public CommonResult fallback(){\n        return new CommonResult(200,"调用失败",null);\n    }\n    public CommonResult defaultfallback(){\n        return new CommonResult(200,"G调用失败",null);\n    }\n}\n\n\n\n# OpenFeign Fallback\n\nOpenFeign 集成了 Hystrix，可以直接在FeignClient上配置fallback或者fallbackFactory 来实现服务降级\n\nfallback 与 fallbackFactory不可同时使用 \n\n\n# fallback\n\n创建一个类继承FeignClient接口\n\nPayClient.class\n\n@FeignClient(value = "CLOUD-PAYMENT-SERVICE",fallback = FeignFallback.class)\npublic interface PayClient {\n    @GetMapping("/test")\n    CommonResult test();\n}\n\n\nFeignFallback.class\n\n@Component\npublic class FeignFallback implements PayClient {\n    @Override\n    public CommonResult test() {\n        return new CommonResult(400,"errooooooooooooor",null);\n    }\n}\n\n\n\n# fallbackFactory\n\nPayClient.class\n\n@FeignClient(value = "CLOUD-PAYMENT-SERVICE", fallbackFactory = FeiginFallbackFactory.class)\npublic interface PayClient {\n    @GetMapping("/test")\n    CommonResult test();\n}\n\n\nFeiginFallbackFactory.class\n\n@Component\npublic class FeiginFallbackFactory implements FallbackFactory<PayClient> {\n    @Override\n    public PayClient create(Throwable throwable) {\n        return new PayClient() {\n            @Override\n            public CommonResult test() {\n                return new CommonResult(400,"fallbackFactory",null);\n            }\n        };\n    }\n}\n',normalizedContent:'[toc]\n\n\n# 服务容错保护\n\n\n# hystrix服务降级\n\n> 在分布式系统中，服务之间的依赖错综复杂，如果一个服务发生故障，导致依赖它的其他服务出现远程调用的线程阻塞，若此时调用方的请求不断增加，最终会形成任务积压，线程无法释放，最终导致服务瘫痪，甚至故障会蔓延到整个系统。为了解决这样的问题，因此出现了断路器等一系列服务保护机制\n> \n> 针对上述问题，在spring cloud hystrix中实现了线程隔离、断路器等一系列的服务保护功能。它也是基于netflix的开源框架 hystrix实现的，该框架目标在于通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。hystrix具备了服务降级、服务熔断、线程隔离、请求缓存、请求合并以及服务监控等强大功能。\n\n在之前的eureka-consumer-ribbon工程中进行改造\n\n * 添加依赖\n   \n     <dependency>\n         <groupid>org.springframework.cloud</groupid>\n         <artifactid>spring-cloud-starter-netflix-hystrix</artifactid>\n         <version>2.2.9.release</version>\n     </dependency>\n   \n\n * 在主类添加@enablecircuitbreaker注解\n\n * 改造controller，将之前远程调用的逻辑迁移到新类consumerservice中\n   \n   @restcontroller\n   public class dccontroller {\n       @autowired\n       consumerservice service;\n   \n       @getmapping("/consumer")\n       public string dc(){\n   \n           return service.consumer();\n       }\n   }\n   \n   @service\n   class consumerservice{\n       @autowired\n       resttemplate resttemplate;\n   \n       @hystrixcommand(fallbackmethod = "fallback")\n       public string consumer(){\n           return resttemplate.getforobject("http://eureka-client/dc",string.class);\n       }\n       public string fallback(){\n           return "fail";\n       }\n   }\n   \n\n启动服务，访问http://localhost:9001/consumer，此时可以正常获取结果，关闭服务提供者，再次访问链接，此时返回结果为fail\n\n----------------------------------------\n\n\n# hystrix依赖隔离\n\n> hystrix除了服务降级之外，还有着线程隔离、断路器的能力\n\n使用@hystrixcommand来将某个函数包装成了hystrix命令，除了定义服务降级之外，hystrix框架就会自动的为这个函数实现调用的隔离 依赖隔离、服务降级在使用时候都是一体化实现的\n\n\n# hystrix断路器\n\n断路器的三个重要参数：快照时间窗、请求总数下限、错误百分比下限。这个参数的作用分别是：\n\n * 快照时间窗：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。\n * 请求总数下限：在快照时间窗内，必须满足请求总数下限才有资格根据熔断。默认为20，意味着在10秒内，如果该hystrix命令的调用此时不足20次，即时所有的请求都超时或其他原因失败，断路器都不会打开。\n * 错误百分比下限：当请求总数在快照时间窗内超过了下限，比如发生了30次调用，如果在这30次调用中，有16次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%下限情况下，这时候就会将断路器打开。\n\n断路器开启或关闭的条件？\n\n 1. 当满足一定阈值时（默认10秒内超过20个请求次数）\n 2. 当失败率达到一定时（默认10秒内超过50%的请求失败）\n 3. 到达以上阈值，断路器将开启\n 4. 当开启时，所有请求将不会转发\n 5. 一段时间后（默认是5秒），这个时候断路器是半开状态，会让其中一个进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4~5\n\n断路器打开后，再次有请求调用时，将不会再调用主逻辑，而是直接调用降级逻辑。\n\n> 当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时\n\n开启断路器\n\n\n@restcontroller\npublic class dccontroller {\n    @autowired\n    consumerservice service;\n\n    @getmapping("/consumer")\n    public string dc(){\n\n        return service.consumer();\n    }\n}\n\n@service\nclass consumerservice{\n    @autowired\n    resttemplate resttemplate;\n\n    @hystrixcommand(fallbackmethod = "fallback", commandproperties = {\n            @hystrixproperty(name = "circuitbreaker.enabled", value = "true"),\n            @hystrixproperty(name = "circuitbreaker.requestvolumethreshold", value = "5"),\n            @hystrixproperty(name = "circuitbreaker.sleepwindowinmilliseconds", value = "100000"),\n            @hystrixproperty(name = "circuitbreaker.errorthresholdpercentage", value = "60")\n    })\n    public string consumer(){\n        system.out.println("a");\n        return resttemplate.getforobject("http://eureka-client/dc",string.class);\n    }\n    public string fallback(){\n        system.out.println("b");\n        return "fail";\n    }\n}\n\n\n----------------------------------------\n\n\n# openfeign + hystrix\n\n\n# 服务降级\n\n# 消费者端服务降级\n\n * 添加依赖\n   \n   \t\t<dependency>\n               <groupid>org.springframework.cloud</groupid>\n               <artifactid>spring-cloud-starter-netflix-hystrix</artifactid>\n           </dependency>\n   \n\n * 修改配置文件: 启用hystrix\n   \n   feign:\n     hystrix:\n       enabled: true\n   \n\n * 修改controller\n   \n   import com.nanami.common.entities.commonresult;\n   import com.nanami.order.interface.payclient;\n   import com.netflix.hystrix.contrib.javanica.annotation.hystrixcommand;\n   import com.netflix.hystrix.contrib.javanica.annotation.hystrixproperty;\n   import org.springframework.beans.factory.annotation.autowired;\n   import org.springframework.web.bind.annotation.getmapping;\n   import org.springframework.web.bind.annotation.restcontroller;\n   \n   /**\n    * @author 17723\n    */\n   @restcontroller\n   public class ordercontroller {\n       @autowired\n       payclient payclient;\n   \n       @getmapping("/test")\n       @hystrixcommand(fallbackmethod = "fallback",commandproperties = {\n               @hystrixproperty(name = "execution.isolation.thread.timeoutinmilliseconds",value = "1500")\n       })\n       public commonresult test(){\n           return payclient.test();\n       }\n       public commonresult fallback(){\n           return new commonresult(200,"调用失败",null);\n       }\n   }\n   \n   \n\n# 提供者端服务降级\n\n * 添加依赖\n   \n   \t<dependency>\n               <groupid>org.springframework.cloud</groupid>\n               <artifactid>spring-cloud-starter-netflix-hystrix</artifactid>\n   \t</dependency>\n   \n\n * 修改service\n   \n    \t@hystrixcommand(fallbackmethod = "fallback", commandproperties = {\n       \t\t@hystrixproperty(name = "execution.isolation.thread.timeoutinmilliseconds",\n                                value = "5000")\n                       })\n       public string test(){\n           try {\n               timeunit.seconds.sleep(3);\n           } catch (interruptedexception e) {\n               e.printstacktrace();\n           }\n           return "ciallo";\n       }\n   \n       public string fallback(){\n           return "error";\n       }\n   \n\n\n# 全局配置服务降级\n\n@defaultproperties注解配置默认降级处理方法,\n\n> 在@defaultproperties上配置defaultfallback属性后，在方法上的@hystrixcommand不添加fallbackmethod属性，将使用全局的服务降级处理方法。\n\n全局服务降级处理方法上不需要添加参数列表，否则会触发找不到方法异常\n\n@restcontroller\n@defaultproperties(defaultfallback = "defaultfallback")\npublic class ordercontroller {\n    @autowired\n    payclient payclient;\n\n    @getmapping("/test")\n//    @hystrixcommand(fallbackmethod = "fallback",commandproperties = {\n//            @hystrixproperty(name = "execution.isolation.thread.timeoutinmilliseconds",value = "1500")\n//    })\n    @hystrixcommand\n    public commonresult test(){\n        return payclient.test();\n    }\n    public commonresult fallback(){\n        return new commonresult(200,"调用失败",null);\n    }\n    public commonresult defaultfallback(){\n        return new commonresult(200,"g调用失败",null);\n    }\n}\n\n\n\n# openfeign fallback\n\nopenfeign 集成了 hystrix，可以直接在feignclient上配置fallback或者fallbackfactory 来实现服务降级\n\nfallback 与 fallbackfactory不可同时使用 \n\n\n# fallback\n\n创建一个类继承feignclient接口\n\npayclient.class\n\n@feignclient(value = "cloud-payment-service",fallback = feignfallback.class)\npublic interface payclient {\n    @getmapping("/test")\n    commonresult test();\n}\n\n\nfeignfallback.class\n\n@component\npublic class feignfallback implements payclient {\n    @override\n    public commonresult test() {\n        return new commonresult(400,"errooooooooooooor",null);\n    }\n}\n\n\n\n# fallbackfactory\n\npayclient.class\n\n@feignclient(value = "cloud-payment-service", fallbackfactory = feiginfallbackfactory.class)\npublic interface payclient {\n    @getmapping("/test")\n    commonresult test();\n}\n\n\nfeiginfallbackfactory.class\n\n@component\npublic class feiginfallbackfactory implements fallbackfactory<payclient> {\n    @override\n    public payclient create(throwable throwable) {\n        return new payclient() {\n            @override\n            public commonresult test() {\n                return new commonresult(400,"fallbackfactory",null);\n            }\n        };\n    }\n}\n',charsets:{cjk:!0},lastUpdated:"2022/01/27, 12:53:38",lastUpdatedTimestamp:1643259218e3},{title:"ServerSocketChannel",frontmatter:{title:"ServerSocketChannel",date:"2022-04-11T09:39:12.000Z",permalink:"/pages/cd20a8/",categories:["高并发","NIO"],tags:[null]},regularPath:"/05.%E9%AB%98%E5%B9%B6%E5%8F%91/NIO/ServerSocketChannel.html",relativePath:"05.高并发/NIO/ServerSocketChannel.md",key:"v-756e17ea",path:"/pages/cd20a8/",headersStr:null,content:" * 在给selectionKey设置事件监听后，如果不进行清除或者没有再去注册其他事件，selectionKey将一直保持监听此事件\n * write事件和read事件存在差异，在监听read事件时，如果没有收到数据，selector.select()将一直阻塞。而write事件不会造成阻塞，会导致一直给对方发送数据",normalizedContent:" * 在给selectionkey设置事件监听后，如果不进行清除或者没有再去注册其他事件，selectionkey将一直保持监听此事件\n * write事件和read事件存在差异，在监听read事件时，如果没有收到数据，selector.select()将一直阻塞。而write事件不会造成阻塞，会导致一直给对方发送数据",charsets:{cjk:!0}},{title:"nacos注册中心",frontmatter:{title:"nacos注册中心",date:"2022-01-27T16:52:48.000Z",permalink:"/pages/984609/",categories:["SpringCloud","SpringCloud Alibaba"],tags:[null]},regularPath:"/03.SpringCloud/20.SpringCloud%20Alibaba/nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.html",relativePath:"03.SpringCloud/20.SpringCloud Alibaba/nacos注册中心.md",key:"v-12f03108",path:"/pages/984609/",headers:[{level:2,title:"安装及使用",slug:"安装及使用",normalizedTitle:"安装及使用",charIndex:215},{level:2,title:"注册中心",slug:"注册中心",normalizedTitle:"注册中心",charIndex:338},{level:3,title:"服务提供者 payment",slug:"服务提供者-payment",normalizedTitle:"服务提供者 payment",charIndex:347},{level:3,title:"消费者 order83",slug:"消费者-order83",normalizedTitle:"消费者 order83",charIndex:2541}],headersStr:"安装及使用 注册中心 服务提供者 payment 消费者 order83",content:'[toc]\n\n\n# nacos\n\n> Nacos致力于帮助您发现、配置和管理微服务。Nacos提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。Nacos帮助您更敏捷和容易地构建、交付和管理微服务平台。Nacos是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。\n\n----------------------------------------\n\n\n# 安装及使用\n\n * 下载 ：nacos\n * 启动：\n   * Windows: 执行 startup.cmd -m standalone\n   * Linux/Unix/Mac: 执行 startup.sh -m standalone\n\n\n# 注册中心\n\n\n# 服务提供者 payment\n\n 1. 创建项目：cloudAlibaba-provider-payment9001\n\n 2. 在父pom中引入\n    \n    \t<dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n            <version>2.2.0.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n    \t</dependency>\n    \n    \n    3. 在pom中引入依赖\n       \n       \t<dependencies>\n               <dependency>\n                   <groupId>org.springframework.boot</groupId>\n                   <artifactId>spring-boot-starter-web</artifactId>\n               </dependency>\n               <dependency>\n                   <groupId>org.springframework.boot</groupId>\n                   <artifactId>spring-boot-actuator</artifactId>\n               </dependency>\n               <dependency>\n                   <groupId>com.alibaba.cloud</groupId>\n                   <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n               </dependency>\n               <dependency>\n                   <groupId>com.nanami</groupId>\n                   <artifactId>cloud-common-api</artifactId>\n               </dependency>\n           </dependencies>\n       \n    \n    4. 修改配置文件\n       \n       server:\n         port: 9001\n       spring:\n         application:\n           name: payment\n         cloud:\n           nacos:\n             discovery:\n               server-addr: 127.0.0.1:8848 \n       \n       management:\n         endpoints:\n           web:\n             exposure:\n               include: "*"\n       \n    \n    5. 创建主类\n       \n       @SpringBootApplication\n       @EnableDiscoveryClient\n       public class cloudAlibabaPayment {\n           public static void main(String[] args) {\n               SpringApplication.run(cloudAlibabaPayment.class,args);\n           }\n       }\n       \n    \n    6. 创建controller\n       \n       @RestController\n       public class TestController {\n           @Value("${server.port}")\n           String port;\n       \n           @GetMapping("payment")\n           public CommonResult pament(){\n               return new CommonResult(200,port,null);\n           }\n       }\n       \n\n启动服务后，在nacos后台中可以看到\n\n\n\n----------------------------------------\n\n\n# 消费者 order83\n\n 1. 创建工程 cloud-consumer-order83\n\n 2. 在pom中添加依赖\n    \n      <dependencies>\n            \x3c!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --\x3e\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-web</artifactId>\n            </dependency>\n    \n            \x3c!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --\x3e\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-actuator</artifactId>\n            </dependency>\n    \n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n            </dependency>\n            \x3c!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --\x3e\n            <dependency>\n                <groupId>org.projectlombok</groupId>\n                <artifactId>lombok</artifactId>\n                <optional>true</optional>\n            </dependency>\n    \n            \x3c!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --\x3e\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-test</artifactId>\n                <scope>test</scope>\n            </dependency>\n    \n            <dependency>\n                <groupId>com.nanami</groupId>\n                <artifactId>cloud-common-api</artifactId>\n            </dependency>\n        </dependencies>\n    \n\n 3. 修改配置文件\n    \n    server:\n      port: 83\n      \n    spring:\n      application:\n        name: order\n      cloud:\n        nacos:\n          discovery:\n            server-addr: 127.0.0.1:8848\n    \n\n 4. 创建主类\n    \n    @SpringBootApplication\n    @EnableDiscoveryClient\n    public class OrderApplication {\n    \n        @Bean\n        @LoadBalanced\n        public RestTemplate restTemplate(){\n            return new RestTemplate();\n        }\n    \n        public static void main(String[] args) {\n            SpringApplication.run(OrderApplication.class,args);\n        }\n    }\n    \n\n 5. 创建controller\n    \n    @RestController\n    public class OrderController {\n        @Autowired\n        private RestTemplate restTemplate;\n    \n        private final String uri = "http://payment";\n    \n        @GetMapping("/test")\n        public CommonResult test(){\n            return restTemplate.getForObject(uri+"/payment",CommonResult.class);\n        }\n    }\n    \n\n',normalizedContent:'[toc]\n\n\n# nacos\n\n> nacos致力于帮助您发现、配置和管理微服务。nacos提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。nacos帮助您更敏捷和容易地构建、交付和管理微服务平台。nacos是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。\n\n----------------------------------------\n\n\n# 安装及使用\n\n * 下载 ：nacos\n * 启动：\n   * windows: 执行 startup.cmd -m standalone\n   * linux/unix/mac: 执行 startup.sh -m standalone\n\n\n# 注册中心\n\n\n# 服务提供者 payment\n\n 1. 创建项目：cloudalibaba-provider-payment9001\n\n 2. 在父pom中引入\n    \n    \t<dependency>\n            <groupid>com.alibaba.cloud</groupid>\n            <artifactid>spring-cloud-alibaba-dependencies</artifactid>\n            <version>2.2.0.release</version>\n            <type>pom</type>\n            <scope>import</scope>\n    \t</dependency>\n    \n    \n    3. 在pom中引入依赖\n       \n       \t<dependencies>\n               <dependency>\n                   <groupid>org.springframework.boot</groupid>\n                   <artifactid>spring-boot-starter-web</artifactid>\n               </dependency>\n               <dependency>\n                   <groupid>org.springframework.boot</groupid>\n                   <artifactid>spring-boot-actuator</artifactid>\n               </dependency>\n               <dependency>\n                   <groupid>com.alibaba.cloud</groupid>\n                   <artifactid>spring-cloud-starter-alibaba-nacos-discovery</artifactid>\n               </dependency>\n               <dependency>\n                   <groupid>com.nanami</groupid>\n                   <artifactid>cloud-common-api</artifactid>\n               </dependency>\n           </dependencies>\n       \n    \n    4. 修改配置文件\n       \n       server:\n         port: 9001\n       spring:\n         application:\n           name: payment\n         cloud:\n           nacos:\n             discovery:\n               server-addr: 127.0.0.1:8848 \n       \n       management:\n         endpoints:\n           web:\n             exposure:\n               include: "*"\n       \n    \n    5. 创建主类\n       \n       @springbootapplication\n       @enablediscoveryclient\n       public class cloudalibabapayment {\n           public static void main(string[] args) {\n               springapplication.run(cloudalibabapayment.class,args);\n           }\n       }\n       \n    \n    6. 创建controller\n       \n       @restcontroller\n       public class testcontroller {\n           @value("${server.port}")\n           string port;\n       \n           @getmapping("payment")\n           public commonresult pament(){\n               return new commonresult(200,port,null);\n           }\n       }\n       \n\n启动服务后，在nacos后台中可以看到\n\n\n\n----------------------------------------\n\n\n# 消费者 order83\n\n 1. 创建工程 cloud-consumer-order83\n\n 2. 在pom中添加依赖\n    \n      <dependencies>\n            \x3c!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --\x3e\n            <dependency>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-starter-web</artifactid>\n            </dependency>\n    \n            \x3c!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --\x3e\n            <dependency>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-starter-actuator</artifactid>\n            </dependency>\n    \n            <dependency>\n                <groupid>com.alibaba.cloud</groupid>\n                <artifactid>spring-cloud-starter-alibaba-nacos-discovery</artifactid>\n            </dependency>\n            \x3c!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --\x3e\n            <dependency>\n                <groupid>org.projectlombok</groupid>\n                <artifactid>lombok</artifactid>\n                <optional>true</optional>\n            </dependency>\n    \n            \x3c!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --\x3e\n            <dependency>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-starter-test</artifactid>\n                <scope>test</scope>\n            </dependency>\n    \n            <dependency>\n                <groupid>com.nanami</groupid>\n                <artifactid>cloud-common-api</artifactid>\n            </dependency>\n        </dependencies>\n    \n\n 3. 修改配置文件\n    \n    server:\n      port: 83\n      \n    spring:\n      application:\n        name: order\n      cloud:\n        nacos:\n          discovery:\n            server-addr: 127.0.0.1:8848\n    \n\n 4. 创建主类\n    \n    @springbootapplication\n    @enablediscoveryclient\n    public class orderapplication {\n    \n        @bean\n        @loadbalanced\n        public resttemplate resttemplate(){\n            return new resttemplate();\n        }\n    \n        public static void main(string[] args) {\n            springapplication.run(orderapplication.class,args);\n        }\n    }\n    \n\n 5. 创建controller\n    \n    @restcontroller\n    public class ordercontroller {\n        @autowired\n        private resttemplate resttemplate;\n    \n        private final string uri = "http://payment";\n    \n        @getmapping("/test")\n        public commonresult test(){\n            return resttemplate.getforobject(uri+"/payment",commonresult.class);\n        }\n    }\n    \n\n',charsets:{cjk:!0}},{title:"消息驱动的微服务",frontmatter:{title:"消息驱动的微服务",date:"2021-12-12T12:48:26.000Z",permalink:"/pages/d2881b/",categories:["SpringCloud"],tags:[null]},regularPath:"/03.SpringCloud/08.%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1.html",relativePath:"03.SpringCloud/08.消息驱动的微服务.md",key:"v-eb17e3ba",path:"/pages/d2881b/",headers:[{level:2,title:"构建生产者",slug:"构建生产者",normalizedTitle:"构建生产者",charIndex:469},{level:2,title:"构建消费者",slug:"构建消费者",normalizedTitle:"构建消费者",charIndex:3145}],headersStr:"构建生产者 构建消费者",content:'# 消息驱动的微服务：RabbitMQ\n\n> Spring Cloud Stream 是一个用于构建基于消息的微服务应用框架，使用 Spring Integration 与 Broker 进行连接。 Spring Cloud Stream 提供了消息中间件的统一抽象，推出了 publish-subscribe、consumer groups、partition 这些统一的概念。 Spring Cloud Stream 内部有两个概念：Binder 和 Binding。\n\n * Binder，跟消息中间件集成的组件，用来创建对应的 Binding。各消息中间件都有自己的 Binder 具体实现。\n\n * Binding，包括 Input Binding 和 Output Binding。Binding 在消息中间件与应用程序提供的 Provider 和 Consumer 之间提供了一个桥梁，实现了开发者只需使用应用程序的 Provider 或 Consumer 生产或消费数据即可，屏蔽了开发者与底层消息中间件的接触。\n\n\n# 构建生产者\n\n * 在pom.xml中引入依赖\n\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n</dependency>\n\n\n * application.yml配置文件\n\nspring:\n  application:\n    name: demo-producer-application\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      # Binder 配置项，对应 BinderProperties Map\n      binders:\n        rabbit001:\n          type: rabbit # 设置 Binder 的类型\n          environment: # 设置 Binder 的环境配置\n            # 如果是 RabbitMQ 类型的时候，则对应的是 RabbitProperties 类\n            spring:\n              rabbitmq:\n                host: 127.0.0.1 # RabbitMQ 服务的地址\n                port: 5672 # RabbitMQ 服务的端口\n                username: guest # RabbitMQ 服务的账号\n                password: guest # RabbitMQ 服务的密码\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        output:\n          destination: input # 目的地。这里使用 RabbitMQ Exchange\n          content-type: application/json # 内容格式。这里使用 JSON\n          binder: rabbit001 # 设置使用的 Binder 名字\n\nserver:\n  port: 18080\n\n\n 1. spring.cloud.stream为 Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n 2. spring.cloud.stream.binders为 Binder 配置项，对应 BinderProperties Map。其中 key 为 Binder 的名字 在此创建了一个名为rabbit001的binder\n    * type: Binder 的类型。设置为 rabbit，表示使用 Spring Cloud Stream RabbitMQ 提供的 Binder 实现\n    * environment:Binder 的环境。因为 Spring Cloud Steam RabbitMQ 底层使用的是 spring-rabbit，所以在使用 RabbitMQ 类型的时候，则对应的是 RabbitProperties 类\n 3. spring.cloud.stream.bindings为 Binding 配置项，对应 BindingProperties Map。其中，key 为 Binding 的名字。要注意，虽然说 Binding 分成 Input 和 Output 两种类型，但是在配置项中并不会体现出来，而是要在稍后搭配 @Input 还是 @Output 注解，才会有具体的区分。 在此配置一个名为demo01-output的binding\n    * destination：目的地。在 RabbitMQ 中，使用 Exchange 作为目的地，默认为 Topic 类型\n    * content-type：内容格式。这里使用 JSON 格式，因为稍后我们将发送消息的类型为 POJO，使用 JSON 进行序列化\n    * binder：使用的 Binder 名字。这里我们设置为 rabbit001\n\n * 创建MySource接口\n   \n   public interface MySource {\n   \n     @Output("input")\n     MessageChannel demo01Output();\n   \n     }\n   \n\n * 创建Controller\n   \n   @RestController\n   @RequestMapping("/demo01")\n   public class SendController {\n       private Logger logger = LoggerFactory.getLogger(getClass());\n   \n       @Autowired\n       private MySource mySource; // <X>\n   \n       @GetMapping("/send")\n       public boolean send() {\n           // <1> 创建 Message\n           // <2> 创建 Spring Message 对象\n           Message<String> springMessage = MessageBuilder.withPayload("ciallo")\n                   .build();\n           // <3> 发送消息\n           boolean result = mySource.demo01Output().send(springMessage);\n           logger.info("[send][发送成功]");\n           return result;\n       }\n   }\n   \n\n * 在主类上添加@EnableBinding(MySource.class)注解\n\n\n# 构建消费者\n\n * 引入依赖，与生产者依赖相同\n\n * 配置文件\n   \n   spring:\n   application:\n       name: demo-consumer-application\n   cloud:\n       # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n       stream:\n       # Binder 配置项，对应 BinderProperties Map\n       binders:\n           rabbit001:\n           type: rabbit # 设置 Binder 的类型\n           environment: # 设置 Binder 的环境配置\n               # 如果是 RabbitMQ 类型的时候，则对应的是 RabbitProperties 类\n               spring:\n               rabbitmq:\n                   host: 127.0.0.1 # RabbitMQ 服务的地址\n                   port: 5672 # RabbitMQ 服务的端口\n                   username: guest # RabbitMQ 服务的账号\n                   password: guest # RabbitMQ 服务的密码\n       # Binding 配置项，对应 BindingProperties Map\n       bindings:\n           input:\n           destination: input # 目的地。这里使用 RabbitMQ Exchange\n           content-type: application/json # 内容格式。这里使用 JSON\n           group: demo01-consumer-group-DEMO-TOPIC-01 # 消费者分组\n           binder: rabbit001  # 设置使用的 Binder 名字\n   \n   server:\n   port: ${random.int[10000,19999]} # 随机端口，方便启动多个消费者\n   \n   \n   \n   * group:消费者分组\n     \n     > 消费者组（Consumer Group）：同一类 Consumer 的集合，这类 Consumer 通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的 Topic。\n\n对于消费队列的消费者，会有两种消费模式：集群消费（Clustering）和广播消费（Broadcasting）。\n\n>  * 集群消费（Clustering）：集群消费模式下,相同 Consumer Group 的每个 Consumer 实例平均分摊消息。\n>  * 广播消费（Broadcasting）：广播消费模式下，相同 Consumer Group 的每个 Consumer 实例都接收全量的消息\n\n * 创建消费者类\n   \n   @EnableBinding(Sink.class)\n   public class SinkReceiver {\n       private static Logger logger = LoggerFactory.getLogger(SinkReceiver.class);\n   \n       @StreamListener(Sink.INPUT)\n       public void receive(Object payload) {\n           logger.info("Received: " + payload);\n       }\n   \n   }\n   \n\n已经能够在多实例环境下，保证同一消息只被同一个组内的一个消费者实例进行接收和处理 对于一些特殊场景，除了要保证单一实例消费之外，还希望那些具备相同特征的消息都能够被同一个实例进行消费\n\n * 消息分区 在消费者工程的配置文件中添加以下配置\n   \n   spring.cloud.stream.bindings.input.consumer.partitioned=true\n   spring.cloud.stream.instanceCount=2\n   spring.cloud.stream.instanceIndex=0\n   \n   \n   spring.cloud.stream.bindings.input.consumer.partitioned：通过该参数开启消费者分区功能；\n   \n   spring.cloud.stream.instanceCount：该参数指定了当前消费者的总实例数量；\n   \n   spring.cloud.stream.instanceIndex：该参数设置当前实例的索引号，从0开始，最大值为spring.cloud.stream.instanceCount参数 - 1。我们试验的时候需要启动多个实例，可以通过运行参数来为不同实例设置不同的索引值(spring.cloud.stream.instanceIndex = ${INDEX:0})\n   \n   在生产者的配置文件中也做出稍许更改\n   \n   spring.cloud.stream.bindings.output.producer.partitionKeyExpression=payload\n   spring.cloud.stream.bindings.output.producer.partitionCount=2\n   \n   \n   spring.cloud.stream.bindings.output.producer.partitionKeyExpression：通过该参数指定了分区键的表达式规则，我们可以根据实际的输出消息规则来配置SpEL来生成合适的分区键(设置为payload会根据具体消息动态选择分组，也可以直接指定分区)；\n   \n   spring.cloud.stream.bindings.output.producer.partitionCount：该参数指定了消息分区的数量。',normalizedContent:'# 消息驱动的微服务：rabbitmq\n\n> spring cloud stream 是一个用于构建基于消息的微服务应用框架，使用 spring integration 与 broker 进行连接。 spring cloud stream 提供了消息中间件的统一抽象，推出了 publish-subscribe、consumer groups、partition 这些统一的概念。 spring cloud stream 内部有两个概念：binder 和 binding。\n\n * binder，跟消息中间件集成的组件，用来创建对应的 binding。各消息中间件都有自己的 binder 具体实现。\n\n * binding，包括 input binding 和 output binding。binding 在消息中间件与应用程序提供的 provider 和 consumer 之间提供了一个桥梁，实现了开发者只需使用应用程序的 provider 或 consumer 生产或消费数据即可，屏蔽了开发者与底层消息中间件的接触。\n\n\n# 构建生产者\n\n * 在pom.xml中引入依赖\n\n<dependency>\n    <groupid>org.springframework.cloud</groupid>\n    <artifactid>spring-cloud-starter-stream-rabbit</artifactid>\n</dependency>\n\n\n * application.yml配置文件\n\nspring:\n  application:\n    name: demo-producer-application\n  cloud:\n    # spring cloud stream 配置项，对应 bindingserviceproperties 类\n    stream:\n      # binder 配置项，对应 binderproperties map\n      binders:\n        rabbit001:\n          type: rabbit # 设置 binder 的类型\n          environment: # 设置 binder 的环境配置\n            # 如果是 rabbitmq 类型的时候，则对应的是 rabbitproperties 类\n            spring:\n              rabbitmq:\n                host: 127.0.0.1 # rabbitmq 服务的地址\n                port: 5672 # rabbitmq 服务的端口\n                username: guest # rabbitmq 服务的账号\n                password: guest # rabbitmq 服务的密码\n      # binding 配置项，对应 bindingproperties map\n      bindings:\n        output:\n          destination: input # 目的地。这里使用 rabbitmq exchange\n          content-type: application/json # 内容格式。这里使用 json\n          binder: rabbit001 # 设置使用的 binder 名字\n\nserver:\n  port: 18080\n\n\n 1. spring.cloud.stream为 spring cloud stream 配置项，对应 bindingserviceproperties 类\n 2. spring.cloud.stream.binders为 binder 配置项，对应 binderproperties map。其中 key 为 binder 的名字 在此创建了一个名为rabbit001的binder\n    * type: binder 的类型。设置为 rabbit，表示使用 spring cloud stream rabbitmq 提供的 binder 实现\n    * environment:binder 的环境。因为 spring cloud steam rabbitmq 底层使用的是 spring-rabbit，所以在使用 rabbitmq 类型的时候，则对应的是 rabbitproperties 类\n 3. spring.cloud.stream.bindings为 binding 配置项，对应 bindingproperties map。其中，key 为 binding 的名字。要注意，虽然说 binding 分成 input 和 output 两种类型，但是在配置项中并不会体现出来，而是要在稍后搭配 @input 还是 @output 注解，才会有具体的区分。 在此配置一个名为demo01-output的binding\n    * destination：目的地。在 rabbitmq 中，使用 exchange 作为目的地，默认为 topic 类型\n    * content-type：内容格式。这里使用 json 格式，因为稍后我们将发送消息的类型为 pojo，使用 json 进行序列化\n    * binder：使用的 binder 名字。这里我们设置为 rabbit001\n\n * 创建mysource接口\n   \n   public interface mysource {\n   \n     @output("input")\n     messagechannel demo01output();\n   \n     }\n   \n\n * 创建controller\n   \n   @restcontroller\n   @requestmapping("/demo01")\n   public class sendcontroller {\n       private logger logger = loggerfactory.getlogger(getclass());\n   \n       @autowired\n       private mysource mysource; // <x>\n   \n       @getmapping("/send")\n       public boolean send() {\n           // <1> 创建 message\n           // <2> 创建 spring message 对象\n           message<string> springmessage = messagebuilder.withpayload("ciallo")\n                   .build();\n           // <3> 发送消息\n           boolean result = mysource.demo01output().send(springmessage);\n           logger.info("[send][发送成功]");\n           return result;\n       }\n   }\n   \n\n * 在主类上添加@enablebinding(mysource.class)注解\n\n\n# 构建消费者\n\n * 引入依赖，与生产者依赖相同\n\n * 配置文件\n   \n   spring:\n   application:\n       name: demo-consumer-application\n   cloud:\n       # spring cloud stream 配置项，对应 bindingserviceproperties 类\n       stream:\n       # binder 配置项，对应 binderproperties map\n       binders:\n           rabbit001:\n           type: rabbit # 设置 binder 的类型\n           environment: # 设置 binder 的环境配置\n               # 如果是 rabbitmq 类型的时候，则对应的是 rabbitproperties 类\n               spring:\n               rabbitmq:\n                   host: 127.0.0.1 # rabbitmq 服务的地址\n                   port: 5672 # rabbitmq 服务的端口\n                   username: guest # rabbitmq 服务的账号\n                   password: guest # rabbitmq 服务的密码\n       # binding 配置项，对应 bindingproperties map\n       bindings:\n           input:\n           destination: input # 目的地。这里使用 rabbitmq exchange\n           content-type: application/json # 内容格式。这里使用 json\n           group: demo01-consumer-group-demo-topic-01 # 消费者分组\n           binder: rabbit001  # 设置使用的 binder 名字\n   \n   server:\n   port: ${random.int[10000,19999]} # 随机端口，方便启动多个消费者\n   \n   \n   \n   * group:消费者分组\n     \n     > 消费者组（consumer group）：同一类 consumer 的集合，这类 consumer 通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的 topic。\n\n对于消费队列的消费者，会有两种消费模式：集群消费（clustering）和广播消费（broadcasting）。\n\n>  * 集群消费（clustering）：集群消费模式下,相同 consumer group 的每个 consumer 实例平均分摊消息。\n>  * 广播消费（broadcasting）：广播消费模式下，相同 consumer group 的每个 consumer 实例都接收全量的消息\n\n * 创建消费者类\n   \n   @enablebinding(sink.class)\n   public class sinkreceiver {\n       private static logger logger = loggerfactory.getlogger(sinkreceiver.class);\n   \n       @streamlistener(sink.input)\n       public void receive(object payload) {\n           logger.info("received: " + payload);\n       }\n   \n   }\n   \n\n已经能够在多实例环境下，保证同一消息只被同一个组内的一个消费者实例进行接收和处理 对于一些特殊场景，除了要保证单一实例消费之外，还希望那些具备相同特征的消息都能够被同一个实例进行消费\n\n * 消息分区 在消费者工程的配置文件中添加以下配置\n   \n   spring.cloud.stream.bindings.input.consumer.partitioned=true\n   spring.cloud.stream.instancecount=2\n   spring.cloud.stream.instanceindex=0\n   \n   \n   spring.cloud.stream.bindings.input.consumer.partitioned：通过该参数开启消费者分区功能；\n   \n   spring.cloud.stream.instancecount：该参数指定了当前消费者的总实例数量；\n   \n   spring.cloud.stream.instanceindex：该参数设置当前实例的索引号，从0开始，最大值为spring.cloud.stream.instancecount参数 - 1。我们试验的时候需要启动多个实例，可以通过运行参数来为不同实例设置不同的索引值(spring.cloud.stream.instanceindex = ${index:0})\n   \n   在生产者的配置文件中也做出稍许更改\n   \n   spring.cloud.stream.bindings.output.producer.partitionkeyexpression=payload\n   spring.cloud.stream.bindings.output.producer.partitioncount=2\n   \n   \n   spring.cloud.stream.bindings.output.producer.partitionkeyexpression：通过该参数指定了分区键的表达式规则，我们可以根据实际的输出消息规则来配置spel来生成合适的分区键(设置为payload会根据具体消息动态选择分组，也可以直接指定分区)；\n   \n   spring.cloud.stream.bindings.output.producer.partitioncount：该参数指定了消息分区的数量。',charsets:{cjk:!0},lastUpdated:"2021/12/23, 23:20:56",lastUpdatedTimestamp:1640272856e3},{title:"DES",frontmatter:{title:"DES",date:"2022-04-11T09:39:12.000Z",permalink:"/pages/632cd0/",categories:["密码学"],tags:[null]},regularPath:"/06.%E5%AF%86%E7%A0%81%E5%AD%A6/02.DES.html",relativePath:"06.密码学/02.DES.md",key:"v-5b6ab6f4",path:"/pages/632cd0/",headers:[{level:2,title:"DES加密过程",slug:"des加密过程",normalizedTitle:"des加密过程",charIndex:18},{level:2,title:"DES子密钥的产生",slug:"des子密钥的产生",normalizedTitle:"des子密钥的产生",charIndex:327},{level:2,title:"初始置换IP",slug:"初始置换ip",normalizedTitle:"初始置换ip",charIndex:76},{level:2,title:"逆初始置换$IP^{-1}$",slug:"逆初始置换",normalizedTitle:'逆初始置换<mjx-container class="mathjax" jax="svg" style="direction: ltr;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="5.197ex" height="1.887ex" role="img" focusable="false" viewbox="0 -833.9 2297.1 833.9"><g stroke="currentcolor" fill="currentcolor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1d43c" d="m43 1q26 1 26 10q26 12 29 24q34 43 39 45q42 46 54 46h60q120 46 136 53q137 53 138 54q143 56 149 77t198 273q210 318 216 344q286 624 286 626q284 630 284 631q274 637 213 637h193q184 643 189 662q193 677 195 680t209 683h213q285 681 359 681q481 681 487 683h497q504 676 504 672t501 655t494 639q491 637 471 637q440 637 407 634q393 631 388 623q381 609 337 432q326 385 315 341q245 65 245 59q245 52 255 50t307 46h339q345 38 345 37t342 19q338 6 332 0h316q279 2 179 2q143 2 113 2t65 2t43 1z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(504,0)"><g data-mml-node="mi"><path data-c="1d443" d="m287 628q287 635 230 637q206 637 199 638t192 648q192 649 194 659q200 679 203 681t397 683q587 682 600 680q664 669 707 631t751 530q751 453 685 389q616 321 507 303q500 302 402 301h307l277 182q247 66 247 59q247 55 248 54t255 50t272 48t305 46h336q342 37 342 35q342 19 335 5q330 0 319 0q316 0 282 1t182 2q120 2 87 2t51 1q33 1 33 11q33 13 36 25q40 41 44 43t67 46q94 46 127 49q141 52 146 61q149 65 218 339t287 628zm645 554q645 567 643 575t634 597t609 619t560 635q553 636 480 637q463 637 445 637t416 636t404 636q391 635 386 627q384 621 367 550t332 412t314 344q314 342 395 342h407h430q542 342 590 392q617 419 631 471t645 554z" style="stroke-width: 3;"/></g><g data-mml-node="texatom" transform="translate(839.5,363) scale(0.707)" data-mjx-texclass="ord"><g data-mml-node="mo"><path data-c="2212" d="m84 237t84 250t98 270h679q694 262 694 250t679 230h98q84 237 84 250z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="m213 578l200 573q186 568 160 563t102 556h83v602h102q149 604 189 617t245 641t273 663q275 666 285 666q294 666 302 660v361l303 61q310 54 315 52t339 48t401 46h427v0h416q395 3 257 3q121 3 100 0h88v46h114q136 46 152 46t177 47t193 50t201 52t207 57t213 61v578z" style="stroke-width: 3;"/></g></g></g></g></g></svg></mjx-container>',charIndex:null},{level:2,title:"加密函数$f$",slug:"加密函数",normalizedTitle:'加密函数<mjx-container class="mathjax" jax="svg" style="direction: ltr;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewbox="0 -705 550 910"><g stroke="currentcolor" fill="currentcolor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1d453" d="m118 -162q120 -162 124 -164t135 -167t147 -168q160 -168 171 -155t187 -126q197 -99 221 27t267 267t289 382v385h242q195 385 192 387q188 390 188 397l195 425q197 430 203 430t250 431q298 431 298 432q298 434 307 482t319 540q356 705 465 705q502 703 526 683t550 630q550 594 529 578t487 561q443 561 443 603q443 622 454 636t478 657l487 662q471 668 457 668q445 668 434 658t419 630q412 601 403 552t387 469t380 433q380 431 435 431q480 431 487 430t498 424q499 420 496 407t491 391q489 386 482 386t428 385h372l349 263q301 15 282 -47q255 -132 212 -173q175 -205 139 -205q107 -205 81 -186t55 -132q55 -95 76 -78t118 -61q162 -61 162 -103q162 -122 151 -136t127 -157l118 -162z" style="stroke-width: 3;"/></g></g></g></svg></mjx-container>',charIndex:null},{level:2,title:"DES解密过程",slug:"des解密过程",normalizedTitle:"des解密过程",charIndex:2786}],headersStr:"DES加密过程 DES子密钥的产生 初始置换IP 逆初始置换$IP^{-1}$ 加密函数$f$ DES解密过程",content:"[toc]\n\n\n# DES\n\n\n# DES加密过程\n\n 1. 64位密钥经过子密钥产生算法产生16个子密钥：,供每次加密迭代使用\n\n 2. 64位明文经初始置换IP，将数据打乱重排并分成左右两半。左边为，右边为。\n\n 3. 第一次加密迭代：\n    \n    在子密钥 的控制下，由加密函数对进行加密：\n    \n    \n    \n    以此作为第二次加密迭代的，以作为第二次加密迭代的\n\n 4. 第二次加密迭代至第十六次加密迭代分别用子密钥进行，过程与第一次加密迭代相同\n\n 5. 第十六次加密迭代结束后，产生一个64位的数据组，以左边32位作为，以右边32位作为。\n\n 6. 与合并，在经过逆初始置换，将数据重新排列，便得到64位密文。\n\n\n# DES子密钥的产生\n\n * 64位密钥经过置换选择1、循环左移、置换选择2等变换，产生16个子密钥分别供各次加密迭代使用\n\n * 置换选择1\n   \n   * 去掉密钥中的8个奇偶校验位\n   \n   * 打乱重拍，生成（28位），（28位）\n   \n   * 矩阵\n     \n                           \n     47 49 41 33 25 17 9   63 55 47 39 31 23 15\n     1 58 50 42 34 26 18   7 62 54 46 38 30 22\n     10 2 59 51 43 35 27   14 6 61 53 45 37 29\n     19 11 3 60 52 44 36   21 13 5 28 20 12 4\n   \n   * 说明：矩阵中的第一个数字47，表明原密钥中的第47位移动到中的第一位\n\n * 循环移位\n   \n   * 对，分别循环左移位\n   \n   * 循环移位表\n     \n     迭代次数   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n     移位次数   1 1 2 2 2 2 2 2 1 2 2 2 2 2 2 1\n\n * 置换选择2\n   \n   * 从 和 中选择出一个48位的子密钥\n   \n   * 矩阵\n     \n                                           \n     14 17 11 24 1 5 3 28 15 6 21 10       \n     23 19 12 4 26 8 16 7 27 20 13 2\n     41 52 31 37 47 55 30 40 51 45 33 48   \n     44 49 39 56 34 53 46 42 50 36 29 32\n   \n   * 说明： 从中取出24位，从 中取出24位,形成48位的子密钥\n\n\n# 初始置换IP\n\n * 把64位明文打乱重排\n\n * 矩阵：\n\n矩阵\n58 50 42 34 26 18 10 2\n60 52 44 36 28 20 12 4\n62 54 46 38 30 22 14 6\n64 56 48 40 32 24 16 8\n57 49 41 33 25 17 9 1\n59 51 43 35 27 19 11 3\n61 53 45 37 29 21 13 5\n63 55 47 39 31 23 15 7\n\n\n# 逆初始置换\n\n * 把64位中间密文打乱重排\n\n * 形成最终的64位密文\n\n * IP与互逆\n\n * 保密作用不大\n\n * 矩阵\n   \n   矩阵\n   40 8 48 16 56 24 64 32\n   39 7 47 15 55 23 63 31\n   38 6 46 14 54 22 62 30\n   37 5 45 13 53 21 61 29\n   36 4 44 12 52 20 60 28\n   35 3 43 11 51 19 59 27\n   34 2 42 10 50 18 58 26\n   33 1 41 9 49 17 57 25\n\n----------------------------------------\n\n\n# 加密函数\n\nDES的轮函数，DES保密的核心\n\n * 选择运算E\n   \n   * 把32位输入扩充为48位中间数\n   \n   * 矩阵\n     \n     矩阵\n     32 1 2 3 4 5 4 5 6 7 8 9\n     8 9 10 11 12 13 12 13 14 15 16 17\n     16 17 18 19 20 21 20 21 22 23 24 25\n     24 25 26 27 28 29 28 29 30 31 32 1\n\n * 代替函数组S （S盒）\n   \n   * S盒是DES中唯一的非线性变换，是DES安全的关键\n   * 在保密性方面，起混淆作用\n   * 共有8个S盒，并行作用\n   * 每个S盒有6个输入，4个输出，是非线性压缩变换\n   * 设输入为 ,则以组成的二进制数为行号，组成的二进制数为列号。行列交点处的数（二进制）为输出\n\n\n\n\n\n * S盒的设计准则\n   \n   * 1976年，NSA公的DES的S盒设计准则\n     * P0：每个S盒的每一行都是整数0到15的一个置换\n     * P1：每个S盒的输出不是它的输入的线性或仿射函数\n     * P2：改变S盒的任一输入比特，其输出至少有两比特发生改变\n     * P3：对任一S盒和任一输入x，S(x)和S(x⊕001100)至少有两位发生变化（这里x是一个长度为6的比特串）\n     * P4：对任何S盒和任一输入x，以及e,f∈{0,1},有S(x)≠S(x⊕11ef00)，其中x是一个长度为6的比特串\n     * P5：对任何S盒，当它的任一输入比特位保持不变，其它5位改变时，输出数字中0和1的数目大致相等\n   * 其它准则\n     * 非线性度准则：S盒必须有足够的非线性度，否则不能抵抗线性攻击\n     * 差分均匀性准则： S盒的差分性应均匀，否则不能抵抗差分攻击\n     * 代数次数及项数分布准则 ：S盒必须有足够的代线次数和项数，否则不能抵抗插值攻击和高阶差分攻击\n\n * S盒的密码学特性确保了DES的安全\n\n * 置换运算P\n   \n   * 把数据打乱重排\n   \n   * 在保密性方面，起扩散作用：\n     \n     * 因为S盒是6位输入，4位输出，其非线性作用是局部的\n     * 因此，需要把S盒的混淆作用扩散开来\n   \n   * S盒与P置换的互相配合，共同确保DES的安全\n     \n     \n\n\n# DES解密过程\n\n * DES的加密算法是对合运算，因此解密和加密可共用同一个算法\n * 不同点：子密钥使用的顺序不同\n * 第一次解密迭代使用子密钥 ，第二次解密迭代使用子密钥 ，第十六次解密迭代使用子密钥",normalizedContent:"[toc]\n\n\n# des\n\n\n# des加密过程\n\n 1. 64位密钥经过子密钥产生算法产生16个子密钥：,供每次加密迭代使用\n\n 2. 64位明文经初始置换ip，将数据打乱重排并分成左右两半。左边为，右边为。\n\n 3. 第一次加密迭代：\n    \n    在子密钥 的控制下，由加密函数对进行加密：\n    \n    \n    \n    以此作为第二次加密迭代的，以作为第二次加密迭代的\n\n 4. 第二次加密迭代至第十六次加密迭代分别用子密钥进行，过程与第一次加密迭代相同\n\n 5. 第十六次加密迭代结束后，产生一个64位的数据组，以左边32位作为，以右边32位作为。\n\n 6. 与合并，在经过逆初始置换，将数据重新排列，便得到64位密文。\n\n\n# des子密钥的产生\n\n * 64位密钥经过置换选择1、循环左移、置换选择2等变换，产生16个子密钥分别供各次加密迭代使用\n\n * 置换选择1\n   \n   * 去掉密钥中的8个奇偶校验位\n   \n   * 打乱重拍，生成（28位），（28位）\n   \n   * 矩阵\n     \n                           \n     47 49 41 33 25 17 9   63 55 47 39 31 23 15\n     1 58 50 42 34 26 18   7 62 54 46 38 30 22\n     10 2 59 51 43 35 27   14 6 61 53 45 37 29\n     19 11 3 60 52 44 36   21 13 5 28 20 12 4\n   \n   * 说明：矩阵中的第一个数字47，表明原密钥中的第47位移动到中的第一位\n\n * 循环移位\n   \n   * 对，分别循环左移位\n   \n   * 循环移位表\n     \n     迭代次数   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n     移位次数   1 1 2 2 2 2 2 2 1 2 2 2 2 2 2 1\n\n * 置换选择2\n   \n   * 从 和 中选择出一个48位的子密钥\n   \n   * 矩阵\n     \n                                           \n     14 17 11 24 1 5 3 28 15 6 21 10       \n     23 19 12 4 26 8 16 7 27 20 13 2\n     41 52 31 37 47 55 30 40 51 45 33 48   \n     44 49 39 56 34 53 46 42 50 36 29 32\n   \n   * 说明： 从中取出24位，从 中取出24位,形成48位的子密钥\n\n\n# 初始置换ip\n\n * 把64位明文打乱重排\n\n * 矩阵：\n\n矩阵\n58 50 42 34 26 18 10 2\n60 52 44 36 28 20 12 4\n62 54 46 38 30 22 14 6\n64 56 48 40 32 24 16 8\n57 49 41 33 25 17 9 1\n59 51 43 35 27 19 11 3\n61 53 45 37 29 21 13 5\n63 55 47 39 31 23 15 7\n\n\n# 逆初始置换\n\n * 把64位中间密文打乱重排\n\n * 形成最终的64位密文\n\n * ip与互逆\n\n * 保密作用不大\n\n * 矩阵\n   \n   矩阵\n   40 8 48 16 56 24 64 32\n   39 7 47 15 55 23 63 31\n   38 6 46 14 54 22 62 30\n   37 5 45 13 53 21 61 29\n   36 4 44 12 52 20 60 28\n   35 3 43 11 51 19 59 27\n   34 2 42 10 50 18 58 26\n   33 1 41 9 49 17 57 25\n\n----------------------------------------\n\n\n# 加密函数\n\ndes的轮函数，des保密的核心\n\n * 选择运算e\n   \n   * 把32位输入扩充为48位中间数\n   \n   * 矩阵\n     \n     矩阵\n     32 1 2 3 4 5 4 5 6 7 8 9\n     8 9 10 11 12 13 12 13 14 15 16 17\n     16 17 18 19 20 21 20 21 22 23 24 25\n     24 25 26 27 28 29 28 29 30 31 32 1\n\n * 代替函数组s （s盒）\n   \n   * s盒是des中唯一的非线性变换，是des安全的关键\n   * 在保密性方面，起混淆作用\n   * 共有8个s盒，并行作用\n   * 每个s盒有6个输入，4个输出，是非线性压缩变换\n   * 设输入为 ,则以组成的二进制数为行号，组成的二进制数为列号。行列交点处的数（二进制）为输出\n\n\n\n\n\n * s盒的设计准则\n   \n   * 1976年，nsa公的des的s盒设计准则\n     * p0：每个s盒的每一行都是整数0到15的一个置换\n     * p1：每个s盒的输出不是它的输入的线性或仿射函数\n     * p2：改变s盒的任一输入比特，其输出至少有两比特发生改变\n     * p3：对任一s盒和任一输入x，s(x)和s(x⊕001100)至少有两位发生变化（这里x是一个长度为6的比特串）\n     * p4：对任何s盒和任一输入x，以及e,f∈{0,1},有s(x)=s(x⊕11ef00)，其中x是一个长度为6的比特串\n     * p5：对任何s盒，当它的任一输入比特位保持不变，其它5位改变时，输出数字中0和1的数目大致相等\n   * 其它准则\n     * 非线性度准则：s盒必须有足够的非线性度，否则不能抵抗线性攻击\n     * 差分均匀性准则： s盒的差分性应均匀，否则不能抵抗差分攻击\n     * 代数次数及项数分布准则 ：s盒必须有足够的代线次数和项数，否则不能抵抗插值攻击和高阶差分攻击\n\n * s盒的密码学特性确保了des的安全\n\n * 置换运算p\n   \n   * 把数据打乱重排\n   \n   * 在保密性方面，起扩散作用：\n     \n     * 因为s盒是6位输入，4位输出，其非线性作用是局部的\n     * 因此，需要把s盒的混淆作用扩散开来\n   \n   * s盒与p置换的互相配合，共同确保des的安全\n     \n     \n\n\n# des解密过程\n\n * des的加密算法是对合运算，因此解密和加密可共用同一个算法\n * 不同点：子密钥使用的顺序不同\n * 第一次解密迭代使用子密钥 ，第二次解密迭代使用子密钥 ，第十六次解密迭代使用子密钥",charsets:{cjk:!0}},{title:"基本概念",frontmatter:{title:"基本概念",date:"2022-04-11T09:39:12.000Z",permalink:"/pages/0a5fd0/",categories:["密码学"],tags:[null]},regularPath:"/06.%E5%AF%86%E7%A0%81%E5%AD%A6/01.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html",relativePath:"06.密码学/01.基本概念.md",key:"v-60856549",path:"/pages/0a5fd0/",headers:[{level:2,title:"我国密码分级",slug:"我国密码分级",normalizedTitle:"我国密码分级",charIndex:22},{level:2,title:"我国商用密码政策",slug:"我国商用密码政策",normalizedTitle:"我国商用密码政策",charIndex:216},{level:2,title:"密码的基本思想",slug:"密码的基本思想",normalizedTitle:"密码的基本思想",charIndex:410},{level:2,title:"密码体制分类",slug:"密码体制分类",normalizedTitle:"密码体制分类",charIndex:976}],headersStr:"我国密码分级 我国商用密码政策 密码的基本思想 密码体制分类",content:"[toc]\n\n\n# 密码学基本概念\n\n\n# 我国密码分级\n\n 1. 核心密码\n    \n    用于保护党、政、军的核心机密\n\n 2. 普通密码\n    \n    用于保护国家和事企业单位的低于核心机密而高于商用的机密信息\n\n 3. 商用密码\n    \n    用于保护国家和事企业单位的非机密的敏感信息\n\n 4. 个人密码\n    \n    用于保护个人的隐私信息\n    \n    前三种密码均由国家密码管理局统一管理\n\n\n# 我国商用密码政策\n\n * 统一领导\n   \n   国家密码管理局统一领导\n\n * 集中管理\n   \n   国家密码管理局集中管理\n\n * 定点研制\n   \n   只允许定点单位进行研制\n\n * 专控经营\n   \n   经许可的单位才能经营\n\n * 满足使用\n   \n   国内各单位都可申请使用\n\n----------------------------------------\n\n\n# 密码的基本思想\n\n * 伪装以隐蔽信息，使未授权者不能理解它的真实含义\n   \n   * 伪装就是对信息进行一组可逆的数学变换\n   * 伪装前的原始信息称为明文, 伪装后的信息称为密文\n   * 伪装的过程称为加密，去掉伪装还原明文的过程称为解密\n   * 加密在加密密钥的控制下进行，解密在解密密钥的控制下进 行\n   * 用于加密的一簇数学变换称为加密算法。用于解密的一簇数学变换称为解密算法\n\n * 密码体制的构成\n   \n   一个密码体制由五个部分构成：<M,C,K,E,D>\n   \n   1. 明文空间M：全体明文的集合\n   2. 密文空间C：全体密文的集合\n   3. 密钥空间K：全体密钥的集合，=<,>，是加密钥，是解密钥\n   4. 加密算法：一簇由 的加密变换\n   5. 解密算法: 一簇由 的解密变换，解密变换是加密变换的逆\n   \n   * 对于一个确定的密钥，加密算法将确定出一个具体的加密变换，解密算法将确定出一个具体的解密变换，而且解密变换就是加密变换的逆变换\n   \n   * 对于明文空间中的每一个明文,加密算法在密钥 的控制下将明文 加密成密文\n     \n     \n   \n   * 解密算法在密钥的控制下将密文解出同一明文\n     \n     \n     \n     \n\n\n# 密码体制分类\n\n * 从加密钥与解密钥是否相等划分：\n   1. 传统密码：\n      * \n      * 典型密码：DES, AES, SMS4, RC4\n   2. 公开密钥密码：\n      * \n      * 由 不能计算出\n      * 典型密码：RSA, EIGAMAL, ECC\n * 从密钥的使用方式划分：\n   1. 序列密码：\n      * 明文、密文、密钥以位（字符）为单位加解密\n      * 核心密码的主流\n      * 典型密码：RC4, 祖冲之密码\n   2. 分组密码\n      * 明文、密文、密钥以分组为单位加解密\n      * 商用密码的主流\n      * 典型密码：DES, AES, SMS4\n * 从密码算法是否变化划分\n   1. 固定密码算法\n      * 密码在工作过程中算法固定不变，密钥可变\n      * 绝大多数密码都是固定算法密码\n      * 典型密码：AES, DES, SMS4, RC4, RSA, EIGAMAL, ECC\n   2. 演化密码\n      * 借鉴生物进化，将密码学与演化计算结合\n      * 密码算法不断演化变化，而且越变越好\n      * 实现密码设计与密码分析自动化的一种方法\n      * 密码系统智能化的一种成功实践\n\n\n\n * 从是否基于数学划分\n   1. 基于数学的密码\n      * 前面的所有密码\n   2. 基于非数学的密码\n      1. 量子密码\n         * 在唯密文攻击下无条件安全的密码\n         * 基于量子的保密物理属性\n         * 利用量子力学产生真随机数作密钥，利用量子通信的保密性传输密钥，利用模 性传输密钥，利用模22加进行加密，而且按一次一密方式工作\n      2. DNA密码\n         * 基于生物学中的困难问题\n         * 由于不基于计算，所以无论计算机的计算能力多么强大与与DNA密码都是无关的\n         * 尚不成熟：缺少理论，技术实现复杂",normalizedContent:"[toc]\n\n\n# 密码学基本概念\n\n\n# 我国密码分级\n\n 1. 核心密码\n    \n    用于保护党、政、军的核心机密\n\n 2. 普通密码\n    \n    用于保护国家和事企业单位的低于核心机密而高于商用的机密信息\n\n 3. 商用密码\n    \n    用于保护国家和事企业单位的非机密的敏感信息\n\n 4. 个人密码\n    \n    用于保护个人的隐私信息\n    \n    前三种密码均由国家密码管理局统一管理\n\n\n# 我国商用密码政策\n\n * 统一领导\n   \n   国家密码管理局统一领导\n\n * 集中管理\n   \n   国家密码管理局集中管理\n\n * 定点研制\n   \n   只允许定点单位进行研制\n\n * 专控经营\n   \n   经许可的单位才能经营\n\n * 满足使用\n   \n   国内各单位都可申请使用\n\n----------------------------------------\n\n\n# 密码的基本思想\n\n * 伪装以隐蔽信息，使未授权者不能理解它的真实含义\n   \n   * 伪装就是对信息进行一组可逆的数学变换\n   * 伪装前的原始信息称为明文, 伪装后的信息称为密文\n   * 伪装的过程称为加密，去掉伪装还原明文的过程称为解密\n   * 加密在加密密钥的控制下进行，解密在解密密钥的控制下进 行\n   * 用于加密的一簇数学变换称为加密算法。用于解密的一簇数学变换称为解密算法\n\n * 密码体制的构成\n   \n   一个密码体制由五个部分构成：<m,c,k,e,d>\n   \n   1. 明文空间m：全体明文的集合\n   2. 密文空间c：全体密文的集合\n   3. 密钥空间k：全体密钥的集合，=<,>，是加密钥，是解密钥\n   4. 加密算法：一簇由 的加密变换\n   5. 解密算法: 一簇由 的解密变换，解密变换是加密变换的逆\n   \n   * 对于一个确定的密钥，加密算法将确定出一个具体的加密变换，解密算法将确定出一个具体的解密变换，而且解密变换就是加密变换的逆变换\n   \n   * 对于明文空间中的每一个明文,加密算法在密钥 的控制下将明文 加密成密文\n     \n     \n   \n   * 解密算法在密钥的控制下将密文解出同一明文\n     \n     \n     \n     \n\n\n# 密码体制分类\n\n * 从加密钥与解密钥是否相等划分：\n   1. 传统密码：\n      * \n      * 典型密码：des, aes, sms4, rc4\n   2. 公开密钥密码：\n      * \n      * 由 不能计算出\n      * 典型密码：rsa, eigamal, ecc\n * 从密钥的使用方式划分：\n   1. 序列密码：\n      * 明文、密文、密钥以位（字符）为单位加解密\n      * 核心密码的主流\n      * 典型密码：rc4, 祖冲之密码\n   2. 分组密码\n      * 明文、密文、密钥以分组为单位加解密\n      * 商用密码的主流\n      * 典型密码：des, aes, sms4\n * 从密码算法是否变化划分\n   1. 固定密码算法\n      * 密码在工作过程中算法固定不变，密钥可变\n      * 绝大多数密码都是固定算法密码\n      * 典型密码：aes, des, sms4, rc4, rsa, eigamal, ecc\n   2. 演化密码\n      * 借鉴生物进化，将密码学与演化计算结合\n      * 密码算法不断演化变化，而且越变越好\n      * 实现密码设计与密码分析自动化的一种方法\n      * 密码系统智能化的一种成功实践\n\n\n\n * 从是否基于数学划分\n   1. 基于数学的密码\n      * 前面的所有密码\n   2. 基于非数学的密码\n      1. 量子密码\n         * 在唯密文攻击下无条件安全的密码\n         * 基于量子的保密物理属性\n         * 利用量子力学产生真随机数作密钥，利用量子通信的保密性传输密钥，利用模 性传输密钥，利用模22加进行加密，而且按一次一密方式工作\n      2. dna密码\n         * 基于生物学中的困难问题\n         * 由于不基于计算，所以无论计算机的计算能力多么强大与与dna密码都是无关的\n         * 尚不成熟：缺少理论，技术实现复杂",charsets:{cjk:!0}},{title:"nacos配置中心",frontmatter:{title:"nacos配置中心",date:"2022-01-27T17:42:48.000Z",permalink:"/pages/8c87bf/",categories:["SpringCloud","SpringCloud Alibaba"],tags:[null]},regularPath:"/03.SpringCloud/20.SpringCloud%20Alibaba/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html",relativePath:"03.SpringCloud/20.SpringCloud Alibaba/nacos配置中心.md",key:"v-3dc354ce",path:"/pages/8c87bf/",headersStr:null,content:"[toc]\n\n\n# nacos配置中心",normalizedContent:"[toc]\n\n\n# nacos配置中心",charsets:{cjk:!0}},{title:"AES",frontmatter:{title:"AES",date:"2022-04-11T09:39:12.000Z",permalink:"/pages/a8ace8/",categories:["密码学"],tags:[null]},regularPath:"/06.%E5%AF%86%E7%A0%81%E5%AD%A6/03.AES.html",relativePath:"06.密码学/03.AES.md",key:"v-58424274",path:"/pages/a8ace8/",headersStr:null,content:"# AES\n\n * 特点\n   \n   * 分组密码：\n     \n     明文和密文长度都是128位，密钥长度可变（128、192、256等）\n   \n   * 面向二进制的密码算法\n   \n   * 不是对合运算\n   \n   * 综合运用多种密码技术：置换、代替、代数\n\n根据密钥长度不同，加密轮数也不同\n\nAES       密钥长度（32位 字）   分组长度（32位 字）   加密轮数\nAES-128   4             4             10\nAES-192   6             4             12\nAES-256   8             4             14\n\nAES的处理单位是字节，128位的明文和密钥均被分成16个字节。分别记为和\n\n * 明文分组用字节为单位的正方形矩阵描述，称为状态矩阵。\n\n * 128位密钥也使用字节为单位的矩阵表示，矩阵的每一列被称为一个32比特字。通过密钥编排函数，该密钥矩阵被扩展成一个44个字组成的序列W[0] W[1] ... W[43]，该序列的前四个元素W[0] W[1] W[2] W[3]是原始密钥，用于加密运算中的初始密钥加，后面40个字分为10组，每组4个字（128比特）分别用于10轮加密运算中的轮密钥加\n\nAES的流程图\n\n其中，最后一轮迭代不进行列混合\n\n * S盒变换\n   \n   * AES的S盒变换其实就是一个查表操作。S盒变换是AES的唯一的非线性变换，是AES 安全的关键\n   * AES使用16个相同的S盒，DES使用8个不相同的S盒\n   * AES的S盒有8位输入8位输出，是一种非线性置换；DES的S盒有8位输入4位输出，是一种非线性压缩\n\nS盒\n\n行/列   0      1      2      3      4      5      6      7      8      9      A      B      C      D      E      F\n0     0x63   0x7c   0x77   0x7b   0xf2   0x6b   0x6f   0xc5   0x30   0x01   0x67   0x2b   0xfe   0xd7   0xab   0x76\n1     0xca   0x82   0xc9   0x7d   0xfa   0x59   0x47   0xf0   0xad   0xd4   0xa2   0xaf   0x9c   0xa4   0x72   0xc0\n2     0xb7   0xfd   0x93   0x26   0x36   0x3f   0xf7   0xcc   0x34   0xa5   0xe5   0xf1   0x71   0xd8   0x31   0x15\n3     0x04   0xc7   0x23   0xc3   0x18   0x96   0x05   0x9a   0x07   0x12   0x80   0xe2   0xeb   0x27   0xb2   0x75\n4     0x09   0x83   0x2c   0x1a   0x1b   0x6e   0x5a   0xa0   0x52   0x3b   0xd6   0xb3   0x29   0xe3   0x2f   0x84\n5     0x53   0xd1   0x00   0xed   0x20   0xfc   0xb1   0x5b   0x6a   0xcb   0xbe   0x39   0x4a   0x4c   0x58   0xcf\n6     0xd0   0xef   0xaa   0xfb   0x43   0x4d   0x33   0x85   0x45   0xf9   0x02   0x7f   0x50   0x3c   0x9f   0xa8\n7     0x51   0xa3   0x40   0x8f   0x92   0x9d   0x38   0xf5   0xbc   0xb6   0xda   0x21   0x10   0xff   0xf3   0xd2\n8     0xcd   0x0c   0x13   0xec   0x5f   0x97   0x44   0x17   0xc4   0xa7   0x7e   0x3d   0x64   0x5d   0x19   0x73\n9     0x60   0x81   0x4f   0xdc   0x22   0x2a   0x90   0x88   0x46   0xee   0xb8   0x14   0xde   0x5e   0x0b   0xdb\nA     0xe0   0x32   0x3a   0x0a   0x49   0x06   0x24   0x5c   0xc2   0xd3   0xac   0x62   0x91   0x95   0xe4   0x79\nB     0xe7   0xc8   0x37   0x6d   0x8d   0xd5   0x4e   0xa9   0x6c   0x56   0xf4   0xea   0x65   0x7a   0xae   0x08\nC     0xba   0x78   0x25   0x2e   0x1c   0xa6   0xb4   0xc6   0xe8   0xdd   0x74   0x1f   0x4b   0xbd   0x8b   0x8a\nD     0x70   0x3e   0xb5   0x66   0x48   0x03   0xf6   0x0e   0x61   0x35   0x57   0xb9   0x86   0xc1   0x1d   0x9e\nE     0xe1   0xf8   0x98   0x11   0x69   0xd9   0x8e   0x94   0x9b   0x1e   0x87   0xe9   0xce   0x55   0x28   0xdf\nF     0x8c   0xa1   0x89   0x0d   0xbf   0xe6   0x42   0x68   0x41   0x99   0x2d   0x0f   0xb0   0x54   0xbb   0x16\n\n状态矩阵中的元素按照下面的方式映射为一个新的字节：把该字节的高4位作为行值，低4位作为列值，取出S盒或者逆S盒中对应的行的元素作为输出\n\n逆S盒\n\n行/列   0      1      2      3      4      5      6      7      8      9      A      B      C      D      E      F\n0     0x52   0x09   0x6a   0xd5   0x30   0x36   0xa5   0x38   0xbf   0x40   0xa3   0x9e   0x81   0xf3   0xd7   0xfb\n1     0x7c   0xe3   0x39   0x82   0x9b   0x2f   0xff   0x87   0x34   0x8e   0x43   0x44   0xc4   0xde   0xe9   0xcb\n2     0x54   0x7b   0x94   0x32   0xa6   0xc2   0x23   0x3d   0xee   0x4c   0x95   0x0b   0x42   0xfa   0xc3   0x4e\n3     0x08   0x2e   0xa1   0x66   0x28   0xd9   0x24   0xb2   0x76   0x5b   0xa2   0x49   0x6d   0x8b   0xd1   0x25\n4     0x72   0xf8   0xf6   0x64   0x86   0x68   0x98   0x16   0xd4   0xa4   0x5c   0xcc   0x5d   0x65   0xb6   0x92\n5     0x6c   0x70   0x48   0x50   0xfd   0xed   0xb9   0xda   0x5e   0x15   0x46   0x57   0xa7   0x8d   0x9d   0x84\n6     0x90   0xd8   0xab   0x00   0x8c   0xbc   0xd3   0x0a   0xf7   0xe4   0x58   0x05   0xb8   0xb3   0x45   0x06\n7     0xd0   0x2c   0x1e   0x8f   0xca   0x3f   0x0f   0x02   0xc1   0xaf   0xbd   0x03   0x01   0x13   0x8a   0x6b\n8     0x3a   0x91   0x11   0x41   0x4f   0x67   0xdc   0xea   0x97   0xf2   0xcf   0xce   0xf0   0xb4   0xe6   0x73\n9     0x96   0xac   0x74   0x22   0xe7   0xad   0x35   0x85   0xe2   0xf9   0x37   0xe8   0x1c   0x75   0xdf   0x6e\nA     0x47   0xf1   0x1a   0x71   0x1d   0x29   0xc5   0x89   0x6f   0xb7   0x62   0x0e   0xaa   0x18   0xbe   0x1b\nB     0xfc   0x56   0x3e   0x4b   0xc6   0xd2   0x79   0x20   0x9a   0xdb   0xc0   0xfe   0x78   0xcd   0x5a   0xf4\nC     0x1f   0xdd   0xa8   0x33   0x88   0x07   0xc7   0x31   0xb1   0x12   0x10   0x59   0x27   0x80   0xec   0x5f\nD     0x60   0x51   0x7f   0xa9   0x19   0xb5   0x4a   0x0d   0x2d   0xe5   0x7a   0x9f   0x93   0xc9   0x9c   0xef\nE     0xa0   0xe0   0x3b   0x4d   0xae   0x2a   0xf5   0xb0   0xc8   0xeb   0xbb   0x3c   0x83   0x53   0x99   0x61\nF     0x17   0x2b   0x04   0x7e   0xba   0x77   0xd6   0x26   0xe1   0x69   0x14   0x63   0x55   0x21   0x0c   0x7d\n\n * 行移位\n   \n   行移位是一个简单的左循环移位操作。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节\n\n * 行移位的逆变换\n   \n   行移位的逆变换是将状态矩阵中的每一行执行相反的移位操作，例如AES-128中，状态矩阵的第0行右移0字节，第1行右移1字节，第2行右移2字节，第3行右移3字节\n\n * 列混合\n   \n   列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵\n   \n   \n\n状态矩阵中的第j列(0 ≤j≤3)的列混合可以表示为下图所示\n\n\n\n其中，矩阵元素的乘法和加法都是定义在基于GF(2^8)上的二元运算，这种二元运算的加法等价于两个字节的异或\n\n乘法则复杂一点，对于一个8位的二进制数来说，使用域上的乘法乘以(00000010)等价于左移1位(低位补0)后，再根据情况同(00011011)进行异或运算，设S1 = (a7 a6 a5 a4 a3 a2 a1 a0)\n\n\n\n乘以(00000100)可以拆分成两次乘以(00000010)的运算\n\n\n\n乘以(0000 0011)可以拆分成先分别乘以(0000 0001)和(0000 0010)，再将两个乘积异或\n\n\n\n例子：\n\n输入矩阵如下\n\nC9   E5   FD   2B\n7A   F2   78   6E\n63   9C   26   67\n63   9C   26   67\n\n进行列混合运算：\n\n第一列：\n\n * 列混合运算的逆运算\n   \n   逆向列混合变换可由下图的矩阵乘法定义：\n\n逆变换矩阵同正变换矩阵的乘积恰好为单位矩阵\n\n * 轮密钥加\n   \n   轮密钥加是将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作\n\nS0 S1 S2 S3 组成的32位字与W[4i]进行异或\n\n * 密钥扩展\n\nAES首先将初始密钥输入到一个4x4状态矩阵中\n\n在这个矩阵中，每一列是一个字，记为 W[0] W[1] W[2] W[3]，它们构成一个以字为单位的数组W。其他的字由它前面的字经过处理后得到。\n\n对W数组扩充40个新的字：\n\n * 如果i不是4的倍数，那么第i个字由如下等式确定：\n   \n   W[i]=W[i-4]⨁W[i-1]\n\n * 如果i是4的倍数，那么第i个字由如下等式确定\n   \n   W[i]=W[i-4]⨁T(W[i-1])\n\n函数T由3部分组成：字循环、字节代换和轮常量异或。\n\n * 字循环：将1个字中的4个字节循环左移1个字节。即将输入字[b0, b1, b2, b3]变换成[b1,b2,b3,b0]\n\n * 字节代换：对字循环的结果使用S盒进行字节代换\n\n * 轮常量异或：将前两步的结果同轮常量Rcon[j]进行异或，其中j表示轮数，Rcon[j]是一个常量\n   \n   J    RCON[J]\n   1    01 00 00 00\n   2    02 00 00 00\n   3    04 00 00 00\n   4    08 00 00 00\n   5    10 00 00 00\n   6    20 00 00 00\n   7    40 00 00 00\n   8    80 00 00 00\n   9    1B 00 00 00\n   10   36 00 00 00\n\n例：设初始密钥是3C A1 0B 21 57 F0 19 16 90 2E 13 80 AC C1 07 BD\n\n那么4个初始值为：\n\nW[0] = 3C A1 0B 21 W[1] = 57 F0 19 16 W[2] = 90 2E 13 80 W[3] = AC C1 07 BD\n\n第一轮的子密钥：W[4] W[5] W[6] W[7]\n\nW[4] = W[0] ⨁ T(W[3])\n\nT(W[3])的运算过程：\n\n 1. 将W[3] 进行左循环移位：AC C1 07 BD 变成 BD AC C1 07\n\n 2. 将 C1 07 BD AC 作为S盒的输入，输出为78 C5 7A 91\n\n 3. 将78 C5 7A 91与第一轮轮常量Rcon[1]进行异或运算，将得到79 C5 7A 91，因此，T(W[3])=79 C5 7A 91\n    \n    故W[4] = 3C A1 0B 21 ⨁ 79 C5 7A 91 = 45 64 71 B0。\n\n其余的3个子密钥段的计算如下：\n\nW[5] = W[1] ⨁ W[4] = 57 F0 19 16 ⨁ 45 64 71 B0 = 12 94 68 A6 W[6] = W[2] ⨁ W[5] =90 2E 13 80 ⨁ 12 94 68 A6 = 82 BA 7B 26 W[7] = W[3] ⨁ W[6] = AC C1 07 BD ⨁ 82 BA 7B 26 = 2E 7B 7C 9B 所以，第一轮的密钥为 45 64 71 B0 12 94 68 A6 82 BA 7B 26 2E 7B 7C 9B。\n\n * AES解密：\n\nAES的解密流程和加密流程基本一致，将加密算法的基本变换换成逆变换，便得到解密算法。\n\n轮密钥加的逆变换就是其本身",normalizedContent:"# aes\n\n * 特点\n   \n   * 分组密码：\n     \n     明文和密文长度都是128位，密钥长度可变（128、192、256等）\n   \n   * 面向二进制的密码算法\n   \n   * 不是对合运算\n   \n   * 综合运用多种密码技术：置换、代替、代数\n\n根据密钥长度不同，加密轮数也不同\n\naes       密钥长度（32位 字）   分组长度（32位 字）   加密轮数\naes-128   4             4             10\naes-192   6             4             12\naes-256   8             4             14\n\naes的处理单位是字节，128位的明文和密钥均被分成16个字节。分别记为和\n\n * 明文分组用字节为单位的正方形矩阵描述，称为状态矩阵。\n\n * 128位密钥也使用字节为单位的矩阵表示，矩阵的每一列被称为一个32比特字。通过密钥编排函数，该密钥矩阵被扩展成一个44个字组成的序列w[0] w[1] ... w[43]，该序列的前四个元素w[0] w[1] w[2] w[3]是原始密钥，用于加密运算中的初始密钥加，后面40个字分为10组，每组4个字（128比特）分别用于10轮加密运算中的轮密钥加\n\naes的流程图\n\n其中，最后一轮迭代不进行列混合\n\n * s盒变换\n   \n   * aes的s盒变换其实就是一个查表操作。s盒变换是aes的唯一的非线性变换，是aes 安全的关键\n   * aes使用16个相同的s盒，des使用8个不相同的s盒\n   * aes的s盒有8位输入8位输出，是一种非线性置换；des的s盒有8位输入4位输出，是一种非线性压缩\n\ns盒\n\n行/列   0      1      2      3      4      5      6      7      8      9      a      b      c      d      e      f\n0     0x63   0x7c   0x77   0x7b   0xf2   0x6b   0x6f   0xc5   0x30   0x01   0x67   0x2b   0xfe   0xd7   0xab   0x76\n1     0xca   0x82   0xc9   0x7d   0xfa   0x59   0x47   0xf0   0xad   0xd4   0xa2   0xaf   0x9c   0xa4   0x72   0xc0\n2     0xb7   0xfd   0x93   0x26   0x36   0x3f   0xf7   0xcc   0x34   0xa5   0xe5   0xf1   0x71   0xd8   0x31   0x15\n3     0x04   0xc7   0x23   0xc3   0x18   0x96   0x05   0x9a   0x07   0x12   0x80   0xe2   0xeb   0x27   0xb2   0x75\n4     0x09   0x83   0x2c   0x1a   0x1b   0x6e   0x5a   0xa0   0x52   0x3b   0xd6   0xb3   0x29   0xe3   0x2f   0x84\n5     0x53   0xd1   0x00   0xed   0x20   0xfc   0xb1   0x5b   0x6a   0xcb   0xbe   0x39   0x4a   0x4c   0x58   0xcf\n6     0xd0   0xef   0xaa   0xfb   0x43   0x4d   0x33   0x85   0x45   0xf9   0x02   0x7f   0x50   0x3c   0x9f   0xa8\n7     0x51   0xa3   0x40   0x8f   0x92   0x9d   0x38   0xf5   0xbc   0xb6   0xda   0x21   0x10   0xff   0xf3   0xd2\n8     0xcd   0x0c   0x13   0xec   0x5f   0x97   0x44   0x17   0xc4   0xa7   0x7e   0x3d   0x64   0x5d   0x19   0x73\n9     0x60   0x81   0x4f   0xdc   0x22   0x2a   0x90   0x88   0x46   0xee   0xb8   0x14   0xde   0x5e   0x0b   0xdb\na     0xe0   0x32   0x3a   0x0a   0x49   0x06   0x24   0x5c   0xc2   0xd3   0xac   0x62   0x91   0x95   0xe4   0x79\nb     0xe7   0xc8   0x37   0x6d   0x8d   0xd5   0x4e   0xa9   0x6c   0x56   0xf4   0xea   0x65   0x7a   0xae   0x08\nc     0xba   0x78   0x25   0x2e   0x1c   0xa6   0xb4   0xc6   0xe8   0xdd   0x74   0x1f   0x4b   0xbd   0x8b   0x8a\nd     0x70   0x3e   0xb5   0x66   0x48   0x03   0xf6   0x0e   0x61   0x35   0x57   0xb9   0x86   0xc1   0x1d   0x9e\ne     0xe1   0xf8   0x98   0x11   0x69   0xd9   0x8e   0x94   0x9b   0x1e   0x87   0xe9   0xce   0x55   0x28   0xdf\nf     0x8c   0xa1   0x89   0x0d   0xbf   0xe6   0x42   0x68   0x41   0x99   0x2d   0x0f   0xb0   0x54   0xbb   0x16\n\n状态矩阵中的元素按照下面的方式映射为一个新的字节：把该字节的高4位作为行值，低4位作为列值，取出s盒或者逆s盒中对应的行的元素作为输出\n\n逆s盒\n\n行/列   0      1      2      3      4      5      6      7      8      9      a      b      c      d      e      f\n0     0x52   0x09   0x6a   0xd5   0x30   0x36   0xa5   0x38   0xbf   0x40   0xa3   0x9e   0x81   0xf3   0xd7   0xfb\n1     0x7c   0xe3   0x39   0x82   0x9b   0x2f   0xff   0x87   0x34   0x8e   0x43   0x44   0xc4   0xde   0xe9   0xcb\n2     0x54   0x7b   0x94   0x32   0xa6   0xc2   0x23   0x3d   0xee   0x4c   0x95   0x0b   0x42   0xfa   0xc3   0x4e\n3     0x08   0x2e   0xa1   0x66   0x28   0xd9   0x24   0xb2   0x76   0x5b   0xa2   0x49   0x6d   0x8b   0xd1   0x25\n4     0x72   0xf8   0xf6   0x64   0x86   0x68   0x98   0x16   0xd4   0xa4   0x5c   0xcc   0x5d   0x65   0xb6   0x92\n5     0x6c   0x70   0x48   0x50   0xfd   0xed   0xb9   0xda   0x5e   0x15   0x46   0x57   0xa7   0x8d   0x9d   0x84\n6     0x90   0xd8   0xab   0x00   0x8c   0xbc   0xd3   0x0a   0xf7   0xe4   0x58   0x05   0xb8   0xb3   0x45   0x06\n7     0xd0   0x2c   0x1e   0x8f   0xca   0x3f   0x0f   0x02   0xc1   0xaf   0xbd   0x03   0x01   0x13   0x8a   0x6b\n8     0x3a   0x91   0x11   0x41   0x4f   0x67   0xdc   0xea   0x97   0xf2   0xcf   0xce   0xf0   0xb4   0xe6   0x73\n9     0x96   0xac   0x74   0x22   0xe7   0xad   0x35   0x85   0xe2   0xf9   0x37   0xe8   0x1c   0x75   0xdf   0x6e\na     0x47   0xf1   0x1a   0x71   0x1d   0x29   0xc5   0x89   0x6f   0xb7   0x62   0x0e   0xaa   0x18   0xbe   0x1b\nb     0xfc   0x56   0x3e   0x4b   0xc6   0xd2   0x79   0x20   0x9a   0xdb   0xc0   0xfe   0x78   0xcd   0x5a   0xf4\nc     0x1f   0xdd   0xa8   0x33   0x88   0x07   0xc7   0x31   0xb1   0x12   0x10   0x59   0x27   0x80   0xec   0x5f\nd     0x60   0x51   0x7f   0xa9   0x19   0xb5   0x4a   0x0d   0x2d   0xe5   0x7a   0x9f   0x93   0xc9   0x9c   0xef\ne     0xa0   0xe0   0x3b   0x4d   0xae   0x2a   0xf5   0xb0   0xc8   0xeb   0xbb   0x3c   0x83   0x53   0x99   0x61\nf     0x17   0x2b   0x04   0x7e   0xba   0x77   0xd6   0x26   0xe1   0x69   0x14   0x63   0x55   0x21   0x0c   0x7d\n\n * 行移位\n   \n   行移位是一个简单的左循环移位操作。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节\n\n * 行移位的逆变换\n   \n   行移位的逆变换是将状态矩阵中的每一行执行相反的移位操作，例如aes-128中，状态矩阵的第0行右移0字节，第1行右移1字节，第2行右移2字节，第3行右移3字节\n\n * 列混合\n   \n   列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵\n   \n   \n\n状态矩阵中的第j列(0 ≤j≤3)的列混合可以表示为下图所示\n\n\n\n其中，矩阵元素的乘法和加法都是定义在基于gf(2^8)上的二元运算，这种二元运算的加法等价于两个字节的异或\n\n乘法则复杂一点，对于一个8位的二进制数来说，使用域上的乘法乘以(00000010)等价于左移1位(低位补0)后，再根据情况同(00011011)进行异或运算，设s1 = (a7 a6 a5 a4 a3 a2 a1 a0)\n\n\n\n乘以(00000100)可以拆分成两次乘以(00000010)的运算\n\n\n\n乘以(0000 0011)可以拆分成先分别乘以(0000 0001)和(0000 0010)，再将两个乘积异或\n\n\n\n例子：\n\n输入矩阵如下\n\nc9   e5   fd   2b\n7a   f2   78   6e\n63   9c   26   67\n63   9c   26   67\n\n进行列混合运算：\n\n第一列：\n\n * 列混合运算的逆运算\n   \n   逆向列混合变换可由下图的矩阵乘法定义：\n\n逆变换矩阵同正变换矩阵的乘积恰好为单位矩阵\n\n * 轮密钥加\n   \n   轮密钥加是将128位轮密钥ki同状态矩阵中的数据进行逐位异或操作\n\ns0 s1 s2 s3 组成的32位字与w[4i]进行异或\n\n * 密钥扩展\n\naes首先将初始密钥输入到一个4x4状态矩阵中\n\n在这个矩阵中，每一列是一个字，记为 w[0] w[1] w[2] w[3]，它们构成一个以字为单位的数组w。其他的字由它前面的字经过处理后得到。\n\n对w数组扩充40个新的字：\n\n * 如果i不是4的倍数，那么第i个字由如下等式确定：\n   \n   w[i]=w[i-4]⨁w[i-1]\n\n * 如果i是4的倍数，那么第i个字由如下等式确定\n   \n   w[i]=w[i-4]⨁t(w[i-1])\n\n函数t由3部分组成：字循环、字节代换和轮常量异或。\n\n * 字循环：将1个字中的4个字节循环左移1个字节。即将输入字[b0, b1, b2, b3]变换成[b1,b2,b3,b0]\n\n * 字节代换：对字循环的结果使用s盒进行字节代换\n\n * 轮常量异或：将前两步的结果同轮常量rcon[j]进行异或，其中j表示轮数，rcon[j]是一个常量\n   \n   j    rcon[j]\n   1    01 00 00 00\n   2    02 00 00 00\n   3    04 00 00 00\n   4    08 00 00 00\n   5    10 00 00 00\n   6    20 00 00 00\n   7    40 00 00 00\n   8    80 00 00 00\n   9    1b 00 00 00\n   10   36 00 00 00\n\n例：设初始密钥是3c a1 0b 21 57 f0 19 16 90 2e 13 80 ac c1 07 bd\n\n那么4个初始值为：\n\nw[0] = 3c a1 0b 21 w[1] = 57 f0 19 16 w[2] = 90 2e 13 80 w[3] = ac c1 07 bd\n\n第一轮的子密钥：w[4] w[5] w[6] w[7]\n\nw[4] = w[0] ⨁ t(w[3])\n\nt(w[3])的运算过程：\n\n 1. 将w[3] 进行左循环移位：ac c1 07 bd 变成 bd ac c1 07\n\n 2. 将 c1 07 bd ac 作为s盒的输入，输出为78 c5 7a 91\n\n 3. 将78 c5 7a 91与第一轮轮常量rcon[1]进行异或运算，将得到79 c5 7a 91，因此，t(w[3])=79 c5 7a 91\n    \n    故w[4] = 3c a1 0b 21 ⨁ 79 c5 7a 91 = 45 64 71 b0。\n\n其余的3个子密钥段的计算如下：\n\nw[5] = w[1] ⨁ w[4] = 57 f0 19 16 ⨁ 45 64 71 b0 = 12 94 68 a6 w[6] = w[2] ⨁ w[5] =90 2e 13 80 ⨁ 12 94 68 a6 = 82 ba 7b 26 w[7] = w[3] ⨁ w[6] = ac c1 07 bd ⨁ 82 ba 7b 26 = 2e 7b 7c 9b 所以，第一轮的密钥为 45 64 71 b0 12 94 68 a6 82 ba 7b 26 2e 7b 7c 9b。\n\n * aes解密：\n\naes的解密流程和加密流程基本一致，将加密算法的基本变换换成逆变换，便得到解密算法。\n\n轮密钥加的逆变换就是其本身",charsets:{cjk:!0}},{title:"数字签名",frontmatter:{title:"数字签名",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/6c426c/",categories:["密码学"],tags:[null]},regularPath:"/06.%E5%AF%86%E7%A0%81%E5%AD%A6/06.%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.html",relativePath:"06.密码学/06.数字签名.md",key:"v-615a1077",path:"/pages/6c426c/",headersStr:null,content:"# 数字签名",normalizedContent:"# 数字签名",charsets:{cjk:!0}},{title:"SM4",frontmatter:{title:"SM4",date:"2022-04-11T09:39:12.000Z",permalink:"/pages/4271c7/",categories:["密码学"],tags:[null]},regularPath:"/06.%E5%AF%86%E7%A0%81%E5%AD%A6/04.SM4.html",relativePath:"06.密码学/04.SM4.md",key:"v-580b7546",path:"/pages/4271c7/",headersStr:null,content:"# SM4\n\n * 特点：\n   \n   * 分组密码\n   * 对合运算：加密算法和解密算法相同\n   * 子密钥生成算法与加密算法结构相似\n   * 密码结构是滑动窗口结构\n\n * SMS4 流程图\n   \n   \n\n * 基本运算\n   \n   * 模2加：32位异或运算\n   * 循环移位\n\n * 基本密码部件：\n   \n   * 非线性字节变换S盒\n     \n     * 8位输入，8位输出\n     * 本质是8位非线性置换\n     * 设a为输入，b为输出，S盒运算可以表示为：\n     * S盒置换规则：\n       * 以输入的前半字节为行号，后半字节为列号，行列交叉点处的数据即为输出\n   \n   * 非线性字变换:\n     \n     * 4个S盒并行置换\n     * 设输入字，输出字，\n   \n   * 字线性部件变换\n     \n     * 32位输入，32位输出\n     \n     * 设输入位B，输出为C：\n       \n       \n     \n     * 运算规则：\n       \n       \n   \n   * 字合成变换\n     \n     * 由非线性变换和线性变换复合而成：\n       \n       \n       \n       先S盒变换，后L变换\n\n * 轮函数\n   \n   * 输入数据： ,128位，4个32位字\n   \n   * 输入轮密钥：，32位字\n   \n   * 输出数据：32位字\n   \n   * 轮函数:\n     \n     \n\n * 加密算法\n   \n   * 输入明文：\n   \n   * 输入轮密钥：，共32个轮密钥\n   \n   * 输出密文：\n   \n   * 算法结构：轮函数32轮迭代，每轮使用一个轮密钥\n   \n   * 加密算法：\n     \n     \n\n * 解密算法\n   \n   解密算法和加密算法是相同的，只是轮密钥的使用顺序相反\n\n * 密钥扩展算法\n   \n   * 常数\n     \n     * \n     * \n     * \n     * \n   \n   * 固定参数\n     \n     * 00070e15, 1c232a31, 383f464d, 545b6269\n       \n       70777e85, 8c939aa1, a8afb6bd, c4cbd2d9\n       \n       e0e7eef5, fc030a11, 181f262d, 343b4249\n       \n       50575e65, 6c737a81, 888f969d, a4abb2b9\n       \n       c0c7ced5, dce3eaf1, f8ff060d, 141b2229\n       \n       30373e45, 4c535a61, 686f767d, 848b9299\n       \n       a0a7aeb5, bcc3cad1, d8dfe6ed, f4fb0209\n       \n       10171e25, 2c333a41, 484f565d, 646b7279\n       \n       产生规则：\n   \n   * 轮密钥扩展算法：\n     \n     * 输入加密密钥：\n     \n     * 输出轮密钥：\n     \n     * 中间数据：\n     \n     * 密钥扩展算法：\n       \n       * \n       \n       * For i = 0, 1,2,3,30,Do\n         \n         \n         \n         变换与加密算法轮函数中的 基本相同，只将其中的线性变换L修改为以下：\n         \n         ",normalizedContent:"# sm4\n\n * 特点：\n   \n   * 分组密码\n   * 对合运算：加密算法和解密算法相同\n   * 子密钥生成算法与加密算法结构相似\n   * 密码结构是滑动窗口结构\n\n * sms4 流程图\n   \n   \n\n * 基本运算\n   \n   * 模2加：32位异或运算\n   * 循环移位\n\n * 基本密码部件：\n   \n   * 非线性字节变换s盒\n     \n     * 8位输入，8位输出\n     * 本质是8位非线性置换\n     * 设a为输入，b为输出，s盒运算可以表示为：\n     * s盒置换规则：\n       * 以输入的前半字节为行号，后半字节为列号，行列交叉点处的数据即为输出\n   \n   * 非线性字变换:\n     \n     * 4个s盒并行置换\n     * 设输入字，输出字，\n   \n   * 字线性部件变换\n     \n     * 32位输入，32位输出\n     \n     * 设输入位b，输出为c：\n       \n       \n     \n     * 运算规则：\n       \n       \n   \n   * 字合成变换\n     \n     * 由非线性变换和线性变换复合而成：\n       \n       \n       \n       先s盒变换，后l变换\n\n * 轮函数\n   \n   * 输入数据： ,128位，4个32位字\n   \n   * 输入轮密钥：，32位字\n   \n   * 输出数据：32位字\n   \n   * 轮函数:\n     \n     \n\n * 加密算法\n   \n   * 输入明文：\n   \n   * 输入轮密钥：，共32个轮密钥\n   \n   * 输出密文：\n   \n   * 算法结构：轮函数32轮迭代，每轮使用一个轮密钥\n   \n   * 加密算法：\n     \n     \n\n * 解密算法\n   \n   解密算法和加密算法是相同的，只是轮密钥的使用顺序相反\n\n * 密钥扩展算法\n   \n   * 常数\n     \n     * \n     * \n     * \n     * \n   \n   * 固定参数\n     \n     * 00070e15, 1c232a31, 383f464d, 545b6269\n       \n       70777e85, 8c939aa1, a8afb6bd, c4cbd2d9\n       \n       e0e7eef5, fc030a11, 181f262d, 343b4249\n       \n       50575e65, 6c737a81, 888f969d, a4abb2b9\n       \n       c0c7ced5, dce3eaf1, f8ff060d, 141b2229\n       \n       30373e45, 4c535a61, 686f767d, 848b9299\n       \n       a0a7aeb5, bcc3cad1, d8dfe6ed, f4fb0209\n       \n       10171e25, 2c333a41, 484f565d, 646b7279\n       \n       产生规则：\n   \n   * 轮密钥扩展算法：\n     \n     * 输入加密密钥：\n     \n     * 输出轮密钥：\n     \n     * 中间数据：\n     \n     * 密钥扩展算法：\n       \n       * \n       \n       * for i = 0, 1,2,3,30,do\n         \n         \n         \n         变换与加密算法轮函数中的 基本相同，只将其中的线性变换l修改为以下：\n         \n         ",charsets:{cjk:!0}},{title:"公钥密码",frontmatter:{title:"公钥密码",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/7f359a/",categories:["密码学"],tags:[null]},regularPath:"/06.%E5%AF%86%E7%A0%81%E5%AD%A6/05.%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81.html",relativePath:"06.密码学/05.公钥密码.md",key:"v-71e974f6",path:"/pages/7f359a/",headers:[{level:2,title:"公钥密码的基本思想",slug:"公钥密码的基本思想",normalizedTitle:"公钥密码的基本思想",charIndex:19},{level:2,title:"公钥密码的基本工作方式",slug:"公钥密码的基本工作方式",normalizedTitle:"公钥密码的基本工作方式",charIndex:1153},{level:2,title:"RSA公钥密码",slug:"rsa公钥密码",normalizedTitle:"rsa公钥密码",charIndex:1981},{level:2,title:"离散对数问题",slug:"离散对数问题",normalizedTitle:"离散对数问题",charIndex:1009},{level:3,title:"EIGamal公钥密码",slug:"eigamal公钥密码",normalizedTitle:"eigamal公钥密码",charIndex:3405},{level:2,title:"椭圆曲线离散对数问题",slug:"椭圆曲线离散对数问题",normalizedTitle:"椭圆曲线离散对数问题",charIndex:1083},{level:3,title:"椭圆曲线密码",slug:"椭圆曲线密码",normalizedTitle:"椭圆曲线密码",charIndex:4680},{level:3,title:"SM2",slug:"sm2",normalizedTitle:"sm2",charIndex:5387}],headersStr:"公钥密码的基本思想 公钥密码的基本工作方式 RSA公钥密码 离散对数问题 EIGamal公钥密码 椭圆曲线离散对数问题 椭圆曲线密码 SM2",content:"[toc]\n\n\n# 公钥密码\n\n\n# 公钥密码的基本思想\n\n * 基本思想\n   \n   * 将密钥K分为： 和 。专门用来加密，专门用来解密，\n   * 由 不能计算出，可将公开\n   * 由于且由 不能计算出，所以可作为用户指纹，方便实现数字签名\n\n * 基本条件\n   \n   1. E 和 D 互逆（保密条件）\n      \n      \n   \n   2. 且 不能计算出 （安全条件）\n   \n   3. E 和 D 都高效 （实用条件）\n   \n   4. （保真条件）\n   \n   * 满足1，2，3可用于保密，满足2，3，4可用于保真，4个条件都满足，可同时用于保密和保真\n\n * 公钥密码的理论模型\n   \n   1. 单向函数\n      \n      设函数，如果满足以下两个条件，则称为单向函数\n      \n      1. 如果对于给定的 如果对于给定的 x，，要计算出 要计算出 很容易\n      2. 而对于给定的y，计算出很难\n   \n   2. 利用单向函数构造密码\n      \n      * 用正变换作加密，加密效率高\n      * 用逆变换作解密，安全，不可破译\n      * 合法收信者也无法解密\n   \n   3. 单项陷门函数\n      \n      设函数，且f具有陷门，如果满足以下两个条件，则称为单向陷门函数：\n      \n      1. 如果对于给定的x，要计算出很容易\n      2. 对于给定的y，如果不掌握陷门要计算出很难，掌握陷门则很容易\n   \n   4. 利用单向陷门函数构造密码\n      \n      * 用正变换作加密，加密效率高\n      * 用逆变换作解密，安全，不可破译\n      * 把陷门信息作为密钥，且只分配给合法用户。确保合法用户能够方便地解密，而非法用户不能破译\n   \n   5. 单向函数研究现状\n      \n      * 理论上尚不能证明单向函数一定存在\n      \n      * 实际上密码学认为函数单向性足够使用就可以了\n      \n      * 已经找到的单向性足够的函数\n        \n        1. 大合数的因子分解问题\n           \n           大素数的乘积容易计算，而大合数的因子分解困难\n        \n        2. 有限域上的离散对数问题\n           \n           有限域上大素数的幂乘积容易计算，而对数计算困难\n        \n        3. 椭圆曲线离散对数问题\n           \n           设d是正整数，G是解点群的基点，计算容易，而由Q求出d是困难的\n\n\n# 公钥密码的基本工作方式\n\n * 设M为明文，C为密文，E为加密算法，D为解密算法\n * 每个用户都配置一对密钥：为公开的加密钥，为保密的解密钥\n * 将所有用户的公开的放进共享的密钥库PKDB\n * 保密的由用户妥善保管\n\n 1. 确保保密性：\n    \n    发送方：\n    \n    1. A首先查询PKDB，拿到B的加密密钥\n    2. A用加密M得到密文C:\n    3. A将C发送给B\n    \n    接收方：\n    \n    1. B接收到密文C\n    \n    2. B用自己的解密密钥解密C，得到明文M，\n    \n    安全性分析：\n    \n    * 只有B有，只有B可以解密密文C，确保了数据的保密性\n    * 任何人都可以得到，都可以冒充A给B发送数据，不能确保数据的真实性\n\n 2. 确保数据真实性：\n    \n    发送方：\n    \n    1. A首先用自己的对M解密，得到\n    2. A将C发送给B\n    \n    接收方：\n    \n    1. B接收C\n    2. B查询PKDB得到A的\n    3. B用加密C，得到明文\n    \n    安全性分析：\n    \n    * 只有A才有，因此只有A能够解密产生C，所以保证了数据的真实性\n    * 任何人都可以得到，不能确保数据的秘密性\n\n 3. 同时确保秘密性和真实性：\n    \n    发送方：\n    \n    1. A首先用自己的解密M，得到\n    2. A查询PKDB，得到B的\n    3. A用加密S，得到\n    \n    接收方：\n    \n    1. B首先用自己的解密C，得到\n    2. B查询PKDB，得到A的公开加密密钥\n    3. B使用加密S，得到\n    \n    安全性分析：\n    \n    * 只有A拥有，保证了数据的真实性\n    * 只有B拥有，保证了数据的保密性\n\n\n# RSA公钥密码\n\n 1. 加解密算法\n    \n    1. 随机地选择两个大素数p和q，而且保密\n    2. 计算n=pq，将n公开\n    3. 计算，对保密\n    4. 随机的选取一个正整数e,且，将e公开\n    5. 根据，求出d，并对d保密\n    6. 加密运算：\n    7. 解密运算：\n    \n    公开加密密钥，解密密钥\n\n 2. 参数选择 为了确保RSA密码的安全，必须认真选择密码参数：\n    \n    1. p和q要足够大\n       \n       * 一般应用：p和q应512b，使n达到1024b\n       * 重要应用：p和q应1024b，使n达到2048b\n    \n    2. p和q应为强素数\n       \n       文献指出，只要 之一有小的素因子，n就容易分解\n    \n    3. p和q的差要大\n    \n    4. 和的最大公因子要小\n    \n    5. e的选择，随机且含1多就安全，建议\n    \n    6. d的选择\n       \n       d不能太小，要足够大\n    \n    7. 不要许多用户共用一个模n\n\n 3. 大素数的产生\n    \n    1. 概率产生\n       \n       目前最常用的概率性算法是Miller校验算法\n    \n    2. 确定性产生\n       \n       * 确定性测试\n       * 确定性构造\n\n 4. 大素数运算\n    \n    1. 快速乘方算法\n       \n       * 反复平方乘算法\n         \n         设e的二进制表示为\n         \n         \n         \n         则\n         \n         设e为k位二进制数，w(e)为e的二进制系数中为1的个数，则最多只需要计算w(e)-1次平方和w(e)次数的模乘\n    \n    2. 快速模乘算法\n       \n       * 反复平方乘算法解决了快速乘方取模的问题，仍未完全解决快速模乘的问题\n       * Montgomery算法是一种快速模乘的好算法\n       * 将以上两种算法结合成为实现RSA密码的有效方法\n       * 硬件协处理器是提高运算效率的有效方法\n       * Montgomery算法的思路：\n         * 要计算 ，因为n很大，取模运算困难，采取一个小的模R，回避大模的计算。\n         * 利用空间换时间，多用存储空间换取快速\n         * 缺点：不能直接计算出 ，只能计算出中间值，因此还需要预处理和调整运算。一次性计算并不划算\n         * 适合：RSA等密码中的多次的模乘计算\n\n\n# 离散对数问题\n\n * 设p为素数，则模p的剩余构成有限域：\n   \n   \n   \n   的非零元素构成乘法循环群\n   \n   \n   \n   则称a为的生成元或模p的本原元\n\n * 求a的模幂运算为：\n   \n   \n\n * 求对数x的运算为：\n   \n   \n   \n   由于上述运算是定义在有限域上的，所以称为离散对数运算\n\n从x计算y是容易的，从y计算x是困难得多，对于小心选择的p将至少需要用次以上的运算，只要p足够大，求解离散对数问题是非常困难的。\n\n\n# EIGamal公钥密码\n\n * 准备：随机选择一个大素数p，且要求p-1有大素数因子。再随机选择一个模p的本原元a。将p和a公开作为密码的基础参数\n\n 1. 密钥生成\n    \n    * 用户随机地选择一个整数d作为自己保密的解密密钥，\n    * 用户计算，并取y为自己公开的加密密钥\n    * 由公开密钥y计算加密密钥d，必须求解离散对数\n\n 2. 加密\n    \n    * 将明文M加密成密文的过程如下：\n    \n    1. 随机地选择一个整数k,\n    \n    2. 计算：\n       \n       ;\n       \n       ;\n       \n       ;\n    \n    3. 取作为密文\n\n 3. 解密\n    \n    * 将密文解密的过程如下\n    \n    * 计算\n    \n    * 计算\n      \n      \n      \n      得到明文M\n\n\n# 椭圆曲线离散对数问题\n\n 1. 素域上的椭圆曲线\n\n * 设p是大于3的素数，且，称\n   \n   \n   \n   为上的椭圆曲线\n\n * 由椭圆曲线可得到一个同余方程：\n   \n   \n\n * 其解为一个二元组，将此二元组描画到椭圆曲线上便为一个点，故称其为一个解点\n\n为了利用解点构成交换群，需要引进一个0元素，并定义如下加法运算：\n\n 1. 定义单位元\n    \n    引进一个无穷点，简记为，作为0元素。\n    \n    \n    \n    并定义对于所有的解点，\n    \n    \n\n 2. 定义逆元素\n    \n    设和是解点，如果且，则\n    \n    \n    \n    这说明任何解点的逆就是\n    \n    规定无穷远点的逆就是自己\n    \n    \n\n 3. 定义加法\n    \n    * 设，且和不互逆，则。\n      \n      其中：\n      \n      。\n    \n    * 当时\n      \n      \n      \n      其中\n      \n      。\n    \n    * 作集合全体解点，无穷点。\n    \n    * 如上定义的集合E和加法运算构成加法交换群\n    \n    * 群G的定义\n      \n      * G是一个非空集，定义了一种运算，且运算是自封闭的\n      * 运算满足结合律\n      * G中由单位元\n      * G中的元素都有逆元\n    \n    * 从椭圆曲线上找到一个循环子群，当循环子群的阶n是足够大的素数时，这个循环子群中的离散对数问题是困难的。\n    \n    * 设是椭圆曲线上的一个解点，为一个正整数，且。于给定的和，计算是容易的。但若已知和点，要计算出则是及其困难。者便是椭圆曲线上的离散对数问题，简记为ECDLP\n    \n    * 除了几类特殊的椭圆曲线外，一般的ECDLP尚没有有效的求解方法\n    \n    * 可以在循环子群中建立任何基于离散对数困难性的密码，称为椭圆曲线密码\n\n\n# 椭圆曲线密码\n\n * 密钥短，软件实现规模小，硬件实现节省电路\n * 椭圆曲线密码比RAS和EIGamal更安全，速度也较快\n * 基于和上的椭圆曲线，都可以构成安全的椭圆曲线密码\n\n 1. 上椭圆曲线密码基本参数\n    \n    \n    \n    * p为大于3的素数，p确定了有限域\n    \n    * 元素，a和b确定了椭圆曲线：\n      \n      \n    \n    * G为循环子群的生成元点，n为素数且生成元G的阶，G和n确定循环子群\n    \n    * ，并称为余因子，h将交换群E和循环子群联系起来\n\n 2. 上椭圆曲线密码的密钥\n    \n    * 用户的私钥定义为i一个随机数d，\n      \n      \n    \n    * 用户的公钥定义为Q点，\n      \n      \n    \n    * 由公钥Q求解私钥d是求解椭圆曲线离散对数问题，当p足够大时，这是很困难的\n\n 3. 上椭圆曲线密码算法\n    \n    * 设d为用户私钥，Q为用户公钥\n    \n    * 设明文数据为M，\n    \n    * 加密过程：\n      \n      1. 选择一个随机数k，且\n      2. 计算点\n      3. 计算点，如果分量，则转1\n      4. 计算密文\n      5. 以为最终密文数据\n    \n    * 解密过程\n      \n      1. 用私钥d求出点X\n         \n         \n      \n      2. 对C解密：利用计算得到明文\n         \n         \n\n\n# SM2\n\n 1. 推荐使用256素域上的椭圆曲线\n    \n    \n    \n    曲线参数：\n    \n    * p=FFFFFFFE FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 00000000 FFFFFFFF FFFFFFFF\n    * a=FFFFFFFE FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 00000000 FFFFFFFF FFFFFFFC\n    * b=28E9FA9E 9D9F5E34 4D5A9E4B CF6509A7 F39789F5 15AB8F92 DDBCBD41 4D940E93\n    * n=FFFFFFFE FFFFFFFF FFFFFFFF FFFFFFFF 7203DF6B 21C6052B 53BBF409 39D54123\n    * Gx=32C4AE2C 1F198119 5F990446 6A39C994 8FE30BBF F2660BE1 715A4589 334C74C7\n    * Gy=BC3736A2 F4F6779C 59BDCEE3 6B692153 D0A9877C C62A4740 02DF32E5 2139F0A0\n\n 2. 密钥\n    \n    * 私钥随机数d，\n    * 公钥\n\n 3. 加密算法\n    \n    1. 产生随机数k,\n    2. 计算椭圆曲线点\n    3. 计算椭圆曲线点\n    4. 计算，若t为全0比特串，则返回到1.\n    5. 计算\n    6. 计算\n    7. 输出密文\n    \n    是密钥派生函数，利用Hash函数从数组Z产生长度为klen的密钥数据\n\n 4. 解密算法\n    \n    1. 计算出\n    2. 计算，若t为全0比特串，则报错退出\n    3. 计算\n    4. 输出明文",normalizedContent:"[toc]\n\n\n# 公钥密码\n\n\n# 公钥密码的基本思想\n\n * 基本思想\n   \n   * 将密钥k分为： 和 。专门用来加密，专门用来解密，\n   * 由 不能计算出，可将公开\n   * 由于且由 不能计算出，所以可作为用户指纹，方便实现数字签名\n\n * 基本条件\n   \n   1. e 和 d 互逆（保密条件）\n      \n      \n   \n   2. 且 不能计算出 （安全条件）\n   \n   3. e 和 d 都高效 （实用条件）\n   \n   4. （保真条件）\n   \n   * 满足1，2，3可用于保密，满足2，3，4可用于保真，4个条件都满足，可同时用于保密和保真\n\n * 公钥密码的理论模型\n   \n   1. 单向函数\n      \n      设函数，如果满足以下两个条件，则称为单向函数\n      \n      1. 如果对于给定的 如果对于给定的 x，，要计算出 要计算出 很容易\n      2. 而对于给定的y，计算出很难\n   \n   2. 利用单向函数构造密码\n      \n      * 用正变换作加密，加密效率高\n      * 用逆变换作解密，安全，不可破译\n      * 合法收信者也无法解密\n   \n   3. 单项陷门函数\n      \n      设函数，且f具有陷门，如果满足以下两个条件，则称为单向陷门函数：\n      \n      1. 如果对于给定的x，要计算出很容易\n      2. 对于给定的y，如果不掌握陷门要计算出很难，掌握陷门则很容易\n   \n   4. 利用单向陷门函数构造密码\n      \n      * 用正变换作加密，加密效率高\n      * 用逆变换作解密，安全，不可破译\n      * 把陷门信息作为密钥，且只分配给合法用户。确保合法用户能够方便地解密，而非法用户不能破译\n   \n   5. 单向函数研究现状\n      \n      * 理论上尚不能证明单向函数一定存在\n      \n      * 实际上密码学认为函数单向性足够使用就可以了\n      \n      * 已经找到的单向性足够的函数\n        \n        1. 大合数的因子分解问题\n           \n           大素数的乘积容易计算，而大合数的因子分解困难\n        \n        2. 有限域上的离散对数问题\n           \n           有限域上大素数的幂乘积容易计算，而对数计算困难\n        \n        3. 椭圆曲线离散对数问题\n           \n           设d是正整数，g是解点群的基点，计算容易，而由q求出d是困难的\n\n\n# 公钥密码的基本工作方式\n\n * 设m为明文，c为密文，e为加密算法，d为解密算法\n * 每个用户都配置一对密钥：为公开的加密钥，为保密的解密钥\n * 将所有用户的公开的放进共享的密钥库pkdb\n * 保密的由用户妥善保管\n\n 1. 确保保密性：\n    \n    发送方：\n    \n    1. a首先查询pkdb，拿到b的加密密钥\n    2. a用加密m得到密文c:\n    3. a将c发送给b\n    \n    接收方：\n    \n    1. b接收到密文c\n    \n    2. b用自己的解密密钥解密c，得到明文m，\n    \n    安全性分析：\n    \n    * 只有b有，只有b可以解密密文c，确保了数据的保密性\n    * 任何人都可以得到，都可以冒充a给b发送数据，不能确保数据的真实性\n\n 2. 确保数据真实性：\n    \n    发送方：\n    \n    1. a首先用自己的对m解密，得到\n    2. a将c发送给b\n    \n    接收方：\n    \n    1. b接收c\n    2. b查询pkdb得到a的\n    3. b用加密c，得到明文\n    \n    安全性分析：\n    \n    * 只有a才有，因此只有a能够解密产生c，所以保证了数据的真实性\n    * 任何人都可以得到，不能确保数据的秘密性\n\n 3. 同时确保秘密性和真实性：\n    \n    发送方：\n    \n    1. a首先用自己的解密m，得到\n    2. a查询pkdb，得到b的\n    3. a用加密s，得到\n    \n    接收方：\n    \n    1. b首先用自己的解密c，得到\n    2. b查询pkdb，得到a的公开加密密钥\n    3. b使用加密s，得到\n    \n    安全性分析：\n    \n    * 只有a拥有，保证了数据的真实性\n    * 只有b拥有，保证了数据的保密性\n\n\n# rsa公钥密码\n\n 1. 加解密算法\n    \n    1. 随机地选择两个大素数p和q，而且保密\n    2. 计算n=pq，将n公开\n    3. 计算，对保密\n    4. 随机的选取一个正整数e,且，将e公开\n    5. 根据，求出d，并对d保密\n    6. 加密运算：\n    7. 解密运算：\n    \n    公开加密密钥，解密密钥\n\n 2. 参数选择 为了确保rsa密码的安全，必须认真选择密码参数：\n    \n    1. p和q要足够大\n       \n       * 一般应用：p和q应512b，使n达到1024b\n       * 重要应用：p和q应1024b，使n达到2048b\n    \n    2. p和q应为强素数\n       \n       文献指出，只要 之一有小的素因子，n就容易分解\n    \n    3. p和q的差要大\n    \n    4. 和的最大公因子要小\n    \n    5. e的选择，随机且含1多就安全，建议\n    \n    6. d的选择\n       \n       d不能太小，要足够大\n    \n    7. 不要许多用户共用一个模n\n\n 3. 大素数的产生\n    \n    1. 概率产生\n       \n       目前最常用的概率性算法是miller校验算法\n    \n    2. 确定性产生\n       \n       * 确定性测试\n       * 确定性构造\n\n 4. 大素数运算\n    \n    1. 快速乘方算法\n       \n       * 反复平方乘算法\n         \n         设e的二进制表示为\n         \n         \n         \n         则\n         \n         设e为k位二进制数，w(e)为e的二进制系数中为1的个数，则最多只需要计算w(e)-1次平方和w(e)次数的模乘\n    \n    2. 快速模乘算法\n       \n       * 反复平方乘算法解决了快速乘方取模的问题，仍未完全解决快速模乘的问题\n       * montgomery算法是一种快速模乘的好算法\n       * 将以上两种算法结合成为实现rsa密码的有效方法\n       * 硬件协处理器是提高运算效率的有效方法\n       * montgomery算法的思路：\n         * 要计算 ，因为n很大，取模运算困难，采取一个小的模r，回避大模的计算。\n         * 利用空间换时间，多用存储空间换取快速\n         * 缺点：不能直接计算出 ，只能计算出中间值，因此还需要预处理和调整运算。一次性计算并不划算\n         * 适合：rsa等密码中的多次的模乘计算\n\n\n# 离散对数问题\n\n * 设p为素数，则模p的剩余构成有限域：\n   \n   \n   \n   的非零元素构成乘法循环群\n   \n   \n   \n   则称a为的生成元或模p的本原元\n\n * 求a的模幂运算为：\n   \n   \n\n * 求对数x的运算为：\n   \n   \n   \n   由于上述运算是定义在有限域上的，所以称为离散对数运算\n\n从x计算y是容易的，从y计算x是困难得多，对于小心选择的p将至少需要用次以上的运算，只要p足够大，求解离散对数问题是非常困难的。\n\n\n# eigamal公钥密码\n\n * 准备：随机选择一个大素数p，且要求p-1有大素数因子。再随机选择一个模p的本原元a。将p和a公开作为密码的基础参数\n\n 1. 密钥生成\n    \n    * 用户随机地选择一个整数d作为自己保密的解密密钥，\n    * 用户计算，并取y为自己公开的加密密钥\n    * 由公开密钥y计算加密密钥d，必须求解离散对数\n\n 2. 加密\n    \n    * 将明文m加密成密文的过程如下：\n    \n    1. 随机地选择一个整数k,\n    \n    2. 计算：\n       \n       ;\n       \n       ;\n       \n       ;\n    \n    3. 取作为密文\n\n 3. 解密\n    \n    * 将密文解密的过程如下\n    \n    * 计算\n    \n    * 计算\n      \n      \n      \n      得到明文m\n\n\n# 椭圆曲线离散对数问题\n\n 1. 素域上的椭圆曲线\n\n * 设p是大于3的素数，且，称\n   \n   \n   \n   为上的椭圆曲线\n\n * 由椭圆曲线可得到一个同余方程：\n   \n   \n\n * 其解为一个二元组，将此二元组描画到椭圆曲线上便为一个点，故称其为一个解点\n\n为了利用解点构成交换群，需要引进一个0元素，并定义如下加法运算：\n\n 1. 定义单位元\n    \n    引进一个无穷点，简记为，作为0元素。\n    \n    \n    \n    并定义对于所有的解点，\n    \n    \n\n 2. 定义逆元素\n    \n    设和是解点，如果且，则\n    \n    \n    \n    这说明任何解点的逆就是\n    \n    规定无穷远点的逆就是自己\n    \n    \n\n 3. 定义加法\n    \n    * 设，且和不互逆，则。\n      \n      其中：\n      \n      。\n    \n    * 当时\n      \n      \n      \n      其中\n      \n      。\n    \n    * 作集合全体解点，无穷点。\n    \n    * 如上定义的集合e和加法运算构成加法交换群\n    \n    * 群g的定义\n      \n      * g是一个非空集，定义了一种运算，且运算是自封闭的\n      * 运算满足结合律\n      * g中由单位元\n      * g中的元素都有逆元\n    \n    * 从椭圆曲线上找到一个循环子群，当循环子群的阶n是足够大的素数时，这个循环子群中的离散对数问题是困难的。\n    \n    * 设是椭圆曲线上的一个解点，为一个正整数，且。于给定的和，计算是容易的。但若已知和点，要计算出则是及其困难。者便是椭圆曲线上的离散对数问题，简记为ecdlp\n    \n    * 除了几类特殊的椭圆曲线外，一般的ecdlp尚没有有效的求解方法\n    \n    * 可以在循环子群中建立任何基于离散对数困难性的密码，称为椭圆曲线密码\n\n\n# 椭圆曲线密码\n\n * 密钥短，软件实现规模小，硬件实现节省电路\n * 椭圆曲线密码比ras和eigamal更安全，速度也较快\n * 基于和上的椭圆曲线，都可以构成安全的椭圆曲线密码\n\n 1. 上椭圆曲线密码基本参数\n    \n    \n    \n    * p为大于3的素数，p确定了有限域\n    \n    * 元素，a和b确定了椭圆曲线：\n      \n      \n    \n    * g为循环子群的生成元点，n为素数且生成元g的阶，g和n确定循环子群\n    \n    * ，并称为余因子，h将交换群e和循环子群联系起来\n\n 2. 上椭圆曲线密码的密钥\n    \n    * 用户的私钥定义为i一个随机数d，\n      \n      \n    \n    * 用户的公钥定义为q点，\n      \n      \n    \n    * 由公钥q求解私钥d是求解椭圆曲线离散对数问题，当p足够大时，这是很困难的\n\n 3. 上椭圆曲线密码算法\n    \n    * 设d为用户私钥，q为用户公钥\n    \n    * 设明文数据为m，\n    \n    * 加密过程：\n      \n      1. 选择一个随机数k，且\n      2. 计算点\n      3. 计算点，如果分量，则转1\n      4. 计算密文\n      5. 以为最终密文数据\n    \n    * 解密过程\n      \n      1. 用私钥d求出点x\n         \n         \n      \n      2. 对c解密：利用计算得到明文\n         \n         \n\n\n# sm2\n\n 1. 推荐使用256素域上的椭圆曲线\n    \n    \n    \n    曲线参数：\n    \n    * p=fffffffe ffffffff ffffffff ffffffff ffffffff 00000000 ffffffff ffffffff\n    * a=fffffffe ffffffff ffffffff ffffffff ffffffff 00000000 ffffffff fffffffc\n    * b=28e9fa9e 9d9f5e34 4d5a9e4b cf6509a7 f39789f5 15ab8f92 ddbcbd41 4d940e93\n    * n=fffffffe ffffffff ffffffff ffffffff 7203df6b 21c6052b 53bbf409 39d54123\n    * gx=32c4ae2c 1f198119 5f990446 6a39c994 8fe30bbf f2660be1 715a4589 334c74c7\n    * gy=bc3736a2 f4f6779c 59bdcee3 6b692153 d0a9877c c62a4740 02df32e5 2139f0a0\n\n 2. 密钥\n    \n    * 私钥随机数d，\n    * 公钥\n\n 3. 加密算法\n    \n    1. 产生随机数k,\n    2. 计算椭圆曲线点\n    3. 计算椭圆曲线点\n    4. 计算，若t为全0比特串，则返回到1.\n    5. 计算\n    6. 计算\n    7. 输出密文\n    \n    是密钥派生函数，利用hash函数从数组z产生长度为klen的密钥数据\n\n 4. 解密算法\n    \n    1. 计算出\n    2. 计算，若t为全0比特串，则报错退出\n    3. 计算\n    4. 输出明文",charsets:{cjk:!0}},{title:"安装",frontmatter:{title:"安装",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/e461a5/",categories:["docker"],tags:[null]},regularPath:"/08.docker/00.%E5%AE%89%E8%A3%85.html",relativePath:"08.docker/00.安装.md",key:"v-7c51b72e",path:"/pages/e461a5/",headers:[{level:2,title:"使用官方脚本安装",slug:"使用官方脚本安装",normalizedTitle:"使用官方脚本安装",charIndex:23},{level:2,title:"手动安装",slug:"手动安装",normalizedTitle:"手动安装",charIndex:105}],headersStr:"使用官方脚本安装 手动安装",content:'[toc]\n\n\n# Docker安装\n\n\n# 使用官方脚本安装\n\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n\n\n\n# 手动安装\n\n * 设置仓库\n   \n   apt-get update\n   apt-get install \\\n       apt-transport-https \\\n       ca-certificates \\\n       curl \\\n       gnupg-agent \\\n       software-properties-common\n   \n   \n   添加Docker官方GPG密钥\n   \n   curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n   \n   \n   添加稳定版仓库\n   \n   add-apt-repository \\\n      "deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/ \\\n     $(lsb_release -cs) \\\n     stable"\n   \n\n * 安装 Docker Engine-Community\n   \n   apt-get update\n   apt-get install docker-ce docker-ce-cli containerd.io\n   ',normalizedContent:'[toc]\n\n\n# docker安装\n\n\n# 使用官方脚本安装\n\ncurl -fssl https://get.docker.com | bash -s docker --mirror aliyun\n\n\n\n# 手动安装\n\n * 设置仓库\n   \n   apt-get update\n   apt-get install \\\n       apt-transport-https \\\n       ca-certificates \\\n       curl \\\n       gnupg-agent \\\n       software-properties-common\n   \n   \n   添加docker官方gpg密钥\n   \n   curl -fssl https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n   \n   \n   添加稳定版仓库\n   \n   add-apt-repository \\\n      "deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/ \\\n     $(lsb_release -cs) \\\n     stable"\n   \n\n * 安装 docker engine-community\n   \n   apt-get update\n   apt-get install docker-ce docker-ce-cli containerd.io\n   ',charsets:{cjk:!0}},{title:"SSL协议",frontmatter:{title:"SSL协议",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/59ddb2/",categories:["服务器"],tags:[null]},regularPath:"/07.%E6%9C%8D%E5%8A%A1%E5%99%A8/01.SSL%E5%8D%8F%E8%AE%AE.html",relativePath:"07.服务器/01.SSL协议.md",key:"v-01559c4f",path:"/pages/59ddb2/",headers:[{level:2,title:"SSL协议原理",slug:"ssl协议原理",normalizedTitle:"ssl协议原理",charIndex:85},{level:3,title:"SSL协议结构",slug:"ssl协议结构",normalizedTitle:"ssl协议结构",charIndex:97},{level:2,title:"SSL握手协议总过程",slug:"ssl握手协议总过程",normalizedTitle:"ssl握手协议总过程",charIndex:311},{level:3,title:"SSL建立的第一阶段",slug:"ssl建立的第一阶段",normalizedTitle:"ssl建立的第一阶段",charIndex:368},{level:3,title:"SSL建立第二阶段",slug:"ssl建立第二阶段",normalizedTitle:"ssl建立第二阶段",charIndex:2361},{level:3,title:"SSL建立第三阶段",slug:"ssl建立第三阶段",normalizedTitle:"ssl建立第三阶段",charIndex:3187},{level:3,title:"SSL建立第四阶段",slug:"ssl建立第四阶段",normalizedTitle:"ssl建立第四阶段",charIndex:4057},{level:2,title:"消息验证代码（HMAC）和TLS数据完整性：",slug:"消息验证代码-hmac-和tls数据完整性",normalizedTitle:"消息验证代码（hmac）和tls数据完整性：",charIndex:5251},{level:2,title:"几个重要的secret key:",slug:"几个重要的secret-key",normalizedTitle:"几个重要的secret key:",charIndex:5507},{level:3,title:"PreMaster secret",slug:"premaster-secret",normalizedTitle:"premaster secret",charIndex:5528},{level:3,title:"Master secret",slug:"master-secret",normalizedTitle:"master secret",charIndex:5531},{level:2,title:"SSL会话恢复：",slug:"ssl会话恢复",normalizedTitle:"ssl会话恢复：",charIndex:6491},{level:2,title:"SSL记录协议：",slug:"ssl记录协议",normalizedTitle:"ssl记录协议：",charIndex:7903},{level:2,title:"应用数据传输：",slug:"应用数据传输",normalizedTitle:"应用数据传输：",charIndex:8175}],headersStr:"SSL协议原理 SSL协议结构 SSL握手协议总过程 SSL建立的第一阶段 SSL建立第二阶段 SSL建立第三阶段 SSL建立第四阶段 消息验证代码（HMAC）和TLS数据完整性： 几个重要的secret key: PreMaster secret Master secret SSL会话恢复： SSL记录协议： 应用数据传输：",content:"[toc]\n\n\n# SSL\n\nSSL 安全套接层，用于提供私密性，信息完整性和身份认证\n\nSSL协议不依赖于平台和应用程序，位于TCP/IP和各种应用层协议之间\n\n\n# SSL协议原理\n\n\n# SSL协议结构\n\n\n\nSSL的体系结构中包含两个协议子层，其中底层是SSL记录协议层，高层是SSL握手协议层\n\n * SSL记录层协议建立在可靠的传输（如TCP）之上，为高层协议提供基本的安全服务，提供了数据封装、压缩、加密等基本功能\n * SSL握手层协议建立在记录层协议之上，包含SSL握手协议，SSL密码参数修改协议，SSL告警协议。用于在实际的数据传输之前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。\n\n\n# SSL握手协议总过程\n\n----------------------------------------\n\n\n# SSL建立的第一阶段\n\n客户端首先发送ClientHello消息到服务器端，服务端收到ClientHello后，发送ServerHello回应客户端\n\nClientHello\n\n握手第一步是客户端向服务端发送 Client Hello 消息，这个消息里包含了一个客户端生成的随机数 Random1、客户端支持的加密套件（Support Ciphers）和 SSL Version 等信息\n\nClientHello中涉及到的消息具体如下：\n\n * 客户端版本\n   \n   按优先级列出客户端支持的协议版本，首选客户端希望支持的最新协议版本。\n\n * 客户端随机数Random\n\n * 会话ID（Session id）\n   \n   如果客户端第一次连接到服务器，那么这个字段就会保持为空。如果该字段不为空，说明以前是与服务器有连接的，在此期间，服务器将使用Session ID映射对称密钥，并将Session ID存储在客户端浏览器中，为映射设置一个时间限。如果浏览器将来连接到同一台服务器（在时间到期之前），它将发送Session ID，服务器将对映射的Session ID进行验证，并使用以前用过的对称密钥来恢复Session，这种情况下不需要完全握手。也叫作SSL会话恢复\n\n * 加密套件：\n   \n   客户端会给服务器发送自己已经知道的密码套件列表，这是由客户按优先级排列的，但完全由服务器来决定发送与否。TLS中使用的密码套件有一种标准格式\n\n * 压缩方法：\n   \n   为了减少带宽，可以进行压缩。但从成功攻击TLS的事例中来看，其中使用压缩时的攻击可以捕获到用HTTP头发送的参数，这个攻击可以劫持Cookie，这个漏洞我们称为CRIME。从TLS 1.3开始，协议就禁用了TLS压缩。\n\n * 扩展包：\n   \n   其他参数（如服务器名称，填充，支持的签名算法等）可以作为扩展名使用。\n\nServerHello\n\n其他参数（如服务器名称，填充，支持的签名算法等）可以作为扩展名使用。\n\n如果接受，第二步是服务端向客户端发送 Server Hello 消息，这个消息会从 Client Hello 传过来的 Support Ciphers 里确定一份加密套件，这个套件决定了后续加密和生成摘要时具体使用哪些算法，另外还会生成一份随机数 Random2。注意，至此客户端和服务端都拥有了两个随机数（Random1+ Random2），这两个随机数会在后续生成对称秘钥时用到。\n\nServerHello中涉及到的具体参数：\n\n * 服务器版本Version：\n   \n   服务器会选择客户端支持的最新版本。\n\n * 服务器随机数Random：\n   \n   服务器和客户端都会生成32字节的随机数。用来创建加密密钥。\n\n * 加密套件：\n   \n   服务器会从客户端发送的加密套件列表中选出一个加密套件。\n\n * 会话ID（Session ID）：\n   \n   服务器将约定的Session参数存储在TLS缓存中，并生成与其对应的Session id。它与Server Hello一起发送到客户端。客户端可以写入约定的参数到此Session id，并给定到期时间。客户端将在Client Hello中包含此id。如果客户端在此到期时间之前再次连接到服务器，则服务器可以检查与Session id对应的缓存参数，并重用它们而无需完全握手。这非常有用，因为服务器和客户端都可以节省大量的计算成本。\n   \n   在涉及亚马逊和谷歌等流量巨大的应用程序时，这种方法存在缺点。每天都有数百万人连接到服务器，服务器必须使用Session密钥保留所有Session参数的TLS缓存。这是一个巨大的开销。\n   \n   为了解决这个问题，在扩展包里加入了Session Tickets, 在这里，客户端可以在client hello中指定它是否支持Session Ticket。然后，服务器将创建一个新的会话票证(Session Ticket)，并使用只有服务器知道的经过私钥加密的Session参数。它将存储在客户端上，因此所有Session数据仅存储在客户端计算机上，但Ticket仍然是安全的，因为该密钥只有服务器知道。\n   \n   此数据可以作为名为Session Ticket的扩展包含在Client Hello中。\n\n * 压缩算法：\n   \n   如果支持，服务器将同意客户端的首选压缩方法。\n\n * 扩展包\n\n这一阶段后，客户端服务端知道以下内容：\n\n 1. SSL版本\n 2. 密钥交换、信息验证和加密算法\n 3. 压缩方法\n 4. 有关密钥生成的两个随机数。\n\n----------------------------------------\n\n\n# SSL建立第二阶段\n\n服务端向客户端发送消息\n\n服务器启动SSL握手第2阶段，是本阶段所有消息的唯一发送方，客户机是所有消息的唯一接收方。该阶段分为4步：\n\n 1. 证书：服务器将数字证书和到根CA整个链发给客户端，使客户端能用服务器证书中的服务器公钥认证服务器。\n 2. 服务器密钥交换（可选）：这里视密钥交换算法而定\n 3. 证书请求：服务端可能会要求客户自身进行验证。\n 4. 服务器握手完成：第二阶段的结束，第三阶段开始的信号\n\nCertificate消息（可选） 第一次建立必须要有证书\n\n一般情况下，除了会话恢复时不需要发送该消息，在SSL握手的全流程中，都需要包含该消息。消息包含一个X.509证书，证书中包含公钥，发给客户端用来验证签名或在密钥交换的时候给消息加密。\n\n这一步是服务端将自己的证书下发给客户端，让客户端验证自己的身份，客户端验证通过后取出证书中的公钥。\n\nServer Key Exchange（可选）\n\n根据之前在ClientHello消息中包含的CipherSuite信息，决定了密钥交换方式（例如RSA或者DH），因此在Server Key Exchange消息中便会包含完成密钥交换所需的一系列参数。\n\nCertificate Request（可选）------可以是单向的身份认证，也可以双向认证\n\n这一步是可选的，如果在对安全性要求高的常见可能用到。服务器用来验证客户端。服务器端发出Certificate Request消息，要求客户端发他自己的证书过来进行验证。该消息中包含服务器端支持的证书类型（RSA、DSA、ECDSA等）和服务器端所信任的所有证书发行机构的CA列表，客户端会用这些信息来筛选证书。\n\nServer Hello Done\n\n该消息表示服务器已经将所有信息发送完毕，接下来等待客户端的消息。\n\n----------------------------------------\n\n\n# SSL建立第三阶段\n\n客户端收到服务器发送的一系列消息并解析后，将本端相应的消息发送给服务器。\n\n客户机启动SSL握手第3阶段，是本阶段所有消息的唯一发送方，服务器是所有消息的唯一接收方。该阶段分为3步：\n\n 1. 证书（可选）：为了对服务器证明自身，客户要发送一个证书信息，这是可选的，在IIS中可以配置强制客户端证书认证。\n 2. 客户机密钥交换（Pre-master-secret）：这里客户端将预备主密钥发送给服务端，注意这里会使用服务端的公钥进行加密。\n 3. 证书验证（可选），对预备秘密和随机数进行签名，证明拥有（a）证书的公钥。\n\nCertificate（可选）\n\n如果在第二阶段服务器端要求发送客户端证书，客户端便会在该阶段将自己的证书发送过去。服务器端在之前发送的Certificate Request消息中包含了服务器端所支持的证书类型和CA列表，因此客户端会在自己的证书中选择满足这两个条件的第一个证书发送过去。若客户端没有证书，则发送一个no_certificate警告。\n\nClient Key exchange\n\n根据之前从服务器端收到的随机数，按照不同的密钥交换算法，算出一个pre-master，发送给服务器，服务器端收到pre-master算出main master。而客户端当然也能自己通过pre-master算出main master。如此以来双方就算出了对称密钥。\n\n如果是RSA算法，会生成一个48字节的随机数，然后用server的公钥加密后再放入报文中。如果是DH算法，这是发送的就是客户端的DH参数，之后服务器和客户端根据DH算法，各自计算出相同的pre-master secret.\n\nCertificate verify（可选）\n\n只有在客户端发送了自己证书到服务器端，这个消息才需要发送。其中包含一个签名，对从第一条消息以来的所有握手消息的HMAC值（用master_secret）进行签名。\n\n----------------------------------------\n\n\n# SSL建立第四阶段\n\n完成握手协议，建立SSL连接。\n\n客户机启动SSL握手第4阶段，使服务器结束。该阶段分为4步，前2个消息来自客户机，后2个消息来自服务器。\n\n建立起一个安全的连接，客户端发送一个Change Cipher Spec消息，并且把协商得到的CipherSuite拷贝到当前连接的状态之中。然后，客户端用新的算法、密钥参数发送一个Finished消息，这条消息可以检查密钥交换和认证过程是否已经成功。其中包括一个校验值，对客户端整个握手过程的消息进行校验。服务器同样发送Change Cipher Spec消息和Finished消息。握手过程完成，客户端和服务器可以交换应用层数据进行通信。\n\nChangeCipherSpec ：\n\n编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送（ChangeCipherSpec是一个独立的协议，体现在数据包中就是一个字节的数据，用于告知服务端，客户端已经切换到之前协商好的加密套件（Cipher Suite）的状态，准备使用之前协商好的加密套件加密数据并传输了）。\n\nClinet Finished:\n\n客户端握手结束通知, 表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验（使用HMAC算法计算收到和发送的所有握手消息的摘要，然后通过RFC5246中定义的一个伪函数PRF计算出结果，加密后发送。此数据是为了在正式传输应用数据之前对刚刚握手建立起来的加解密通道进行验证。）\n\nServer Finished:\n\n服务端握手结束通知。\n\n 1. 使用私钥解密加密的Pre-master数据，基于之前(Client Hello 和 Server Hello)交换的两个明文随机数 random_C 和 random_S，计算得到协商密钥:enc_key=Fuc(random_C, random_S, Pre-Master);\n 2. 计算之前所有接收信息的 hash 值，然后解密客户端发送的 encrypted_handshake_message，验证数据和密钥正确性;\n 3. 发送一个 ChangeCipherSpec（告知客户端已经切换到协商过的加密套件状态，准备使用加密套件和 Session Secret加密数据了）\n 4. 服务端也会使用 Session Secret 加密一段 Finish 消息发送给客户端，以验证之前通过握手建立起来的加解密通道是否成功。\n\n根据之前的握手信息，如果客户端和服务端都能对Finish信息进行正常加解密且消息正确的被验证，则说明握手通道已经建立成功，接下来，双方可以使用上面产生的Session Secret对数据进行加密传输了。\n\n----------------------------------------\n\n\n# 消息验证代码（HMAC）和TLS数据完整性：\n\n当服务器或客户端使用主密钥加密数据时，它还会计算明文数据的校验和（哈希值），这个校验和称为消息验证代码（MAC）。然后在发送之前将MAC包含在加密数据中。密钥用于从数据中生成MAC，以确保传输过程中攻击者无法从数据中生成相同的MAC，故而MAC被称为HMAC（哈希消息认证码）。另一方面，在接收到消息时，解密器将MAC与明文分开，然后用它的密钥计算明文的校验和，并将其与接收到的MAC进行比较，如果匹配，那我们就可以得出结论：数据在传输过程中没有被篡改。\n\n\n# 几个重要的secret key:\n\n\n# PreMaster secret\n\nPreMaster Secret是在客户端使用RSA或者Diffie-Hellman等加密算法生成的。它将用来跟服务端和客户端在Hello阶段产生的随机数结合在一起生成 Master Secret。PreMaster secret前两个字节是TLS的版本号，这是一个比较重要的用来核对握手数据的版本号。服务端需要对密文中解密出来对的PreMaster版本号跟之前Client Hello阶段的版本号进行对比，如果版本号变低，则说明被串改，则立即停止发送任何消息。\n\n\n# Master secret\n\n由于最后通过交换，客户端和服务端都会有Pre-master和随机数，这个随机数将作为后面产生Master secret的种子，结合PreMaster secret，客户端和服务端将计算出同样的Master secret。\n\nCLIENT WRITE MAC KEY\nServer write MAC key\nclient write encryption key\nserver write encryption key\nclient write IV\nserver write IV\n\n为了保证信息的完整性和机密性，SSL需要有六个加密密钥：四个密钥和两个IV。为了信息的可信性，客户端需要一个密钥（HMAC），为了加密要有一个密钥，为了分组加密要一个IV，服务器也是如此。SSL需要的密钥是单向的，不同于那些在其他方向的密钥。如果在一个方向上有攻击，这种攻击在其他方向是没影响的。\n\n主密钥是由一系列的Hash值组成。\n\nmaster_secret = PRF（pre_master_secret，“master secret”，ClientHello.random + ServerHello.random）[0..47];\n\n根据要求，有4个密钥用于加密和验证每个消息的完整性，他们是：\n\n * 客户端写入加密密钥：客户端用来加密数据，服务器用来解密数据。\n * 服务器写入加密密钥：服务器用来加密数据，客户端用来解密数据。\n * 客户端写入MAC密钥：客户端用来创建MAC，服务器用来验证MAC。\n * 服务器写入MAC密钥：服务器用来创建MAC，客户端用来验证MAC。\n\n\n# SSL会话恢复：\n\n会话恢复是指只要客户端和服务器已经通信过一次，它们就可以通过会话恢复的方式来跳过整个握手阶段二直接进行数据传输。\n\nSSL采用会话恢复的方式来减少SSL握手过程中造成的巨大开销。\n\n为了加快建立握手的速度，减少协议带来的性能降低和资源消耗，TLS 协议有两类会话缓存机制：\n\n * 会话标识 session ID: 由服务器端支持，协议中的标准字段，因此基本所有服务器都支持，服务器端保存会话ID以及协商的通信信息，Nginx 中1M 内存约可以保存4000个 session ID 机器相关信息，占用服务器资源较多;\n * 会话记录 session ticket :t需要服务器和客户端都支持，属于一个扩展字段，支持范围约60%(无可靠统计与来源)，将协商的通信信息加密之后发送给客户端保存，密钥只有服务器知道，占用服务器资源很少。\n * 二者对比，主要是保存协商信息的位置与方式不同，类似与 http 中的 session 与 cookie。二者都存在的情况下，(nginx 实现)优先使用 session_ticket。\n\n会话恢复具体过程（Session ID机制）：\n\n 1. 如果客户端和服务器之间曾经建立了连接，服务器会在握手成功后返回 session ID，并保存对应的通信参数在服务器中;\n 2. 如果客户端再次需要和该服务器建立连接，则在 client_hello 中 session ID 中携带记录的信息，发送给服务器;\n 3. 服务器根据收到的 session ID 检索缓存记录，如果没有检索到货缓存过期，则按照正常的握手过程进行;\n 4. 如果检索到对应的缓存记录，则返回 change_cipher_spec 与 encrypted_handshake_message 信息，两个信息作用类似，encrypted_handshake_message 是到当前的通信参数与 master_secret的hash 值;\n 5. 如果客户端能够验证通过服务器加密数据，则客户端同样发送 change_cipher_spec 与 encrypted_handshake_message 信息;\n 6. 服务器验证数据通过，则握手建立成功，开始进行正常的加密数据通信。\n\n会话恢复具体过程（ session ticket）：\n\n 1. 如果客户端和服务器之间曾经建立了连接，服务器会在 new_session_ticket 数据中携带加密的 session_ticket 信息，客户端保存;\n 2. 如果客户端再次需要和该服务器建立连接，则在 client_hello 中扩展字段 session_ticket 中携带加密信息，一起发送给服务器;\n 3. 服务器解密 sesssion_ticket 数据，如果能够解密失败，则按照正常的握手过程进行;\n 4. 如果解密成功，则返回 change_cipher_spec 与 encrypted_handshake_message 信息，两个信息作用与 session ID 中类似;\n 5. 如果客户端能够验证通过服务器加密数据，则客户端同样发送 change_cipher_spec与encrypted_handshake_message 信息;\n 6. 服务器验证数据通过，则握手建立成功，开始进行正常的加密数据通信。\n\n\n# SSL记录协议：\n\nSSL记录协议主要用来实现对数据块的分块、加密解密、压缩与解压缩、完整性检查及封装各种高层协议。\n\n每个SSL记录主要包含以下信息：\n\n * 内容类型\n * 协议版本号，目前有2.0和3.0版本\n * 记录数据的长度\n * 数据由载荷\n * 散列算法计算消息认证代码\n\n * 将消息分割为多个片段；\n * 对每个片段进行压缩\n * 加上片段编号(防止重放攻击)计算消息验证码MAC值(保证数据完整性)，追加在压缩片段\n * 对称密码加密；\n * 加上数据类型、版本号、压缩后的长度组成的报头， 就是最终的报文数据；\n\n\n# 应用数据传输：\n\n在所有的握手阶段都完成之后，就可以开始传送应用数据了。应用数据在传输之前，首先要附加上MAC secret，然后再对这个数据包使用write encryption key进行加密。在服务端收到密文之后，使用Client write encryption key进行解密，客户端收到服务端的数据之后使用Server write encryption key进行解密，然后使用各自的write MAC key对数据的完整性包括是否被串改进行验证。",normalizedContent:"[toc]\n\n\n# ssl\n\nssl 安全套接层，用于提供私密性，信息完整性和身份认证\n\nssl协议不依赖于平台和应用程序，位于tcp/ip和各种应用层协议之间\n\n\n# ssl协议原理\n\n\n# ssl协议结构\n\n\n\nssl的体系结构中包含两个协议子层，其中底层是ssl记录协议层，高层是ssl握手协议层\n\n * ssl记录层协议建立在可靠的传输（如tcp）之上，为高层协议提供基本的安全服务，提供了数据封装、压缩、加密等基本功能\n * ssl握手层协议建立在记录层协议之上，包含ssl握手协议，ssl密码参数修改协议，ssl告警协议。用于在实际的数据传输之前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。\n\n\n# ssl握手协议总过程\n\n----------------------------------------\n\n\n# ssl建立的第一阶段\n\n客户端首先发送clienthello消息到服务器端，服务端收到clienthello后，发送serverhello回应客户端\n\nclienthello\n\n握手第一步是客户端向服务端发送 client hello 消息，这个消息里包含了一个客户端生成的随机数 random1、客户端支持的加密套件（support ciphers）和 ssl version 等信息\n\nclienthello中涉及到的消息具体如下：\n\n * 客户端版本\n   \n   按优先级列出客户端支持的协议版本，首选客户端希望支持的最新协议版本。\n\n * 客户端随机数random\n\n * 会话id（session id）\n   \n   如果客户端第一次连接到服务器，那么这个字段就会保持为空。如果该字段不为空，说明以前是与服务器有连接的，在此期间，服务器将使用session id映射对称密钥，并将session id存储在客户端浏览器中，为映射设置一个时间限。如果浏览器将来连接到同一台服务器（在时间到期之前），它将发送session id，服务器将对映射的session id进行验证，并使用以前用过的对称密钥来恢复session，这种情况下不需要完全握手。也叫作ssl会话恢复\n\n * 加密套件：\n   \n   客户端会给服务器发送自己已经知道的密码套件列表，这是由客户按优先级排列的，但完全由服务器来决定发送与否。tls中使用的密码套件有一种标准格式\n\n * 压缩方法：\n   \n   为了减少带宽，可以进行压缩。但从成功攻击tls的事例中来看，其中使用压缩时的攻击可以捕获到用http头发送的参数，这个攻击可以劫持cookie，这个漏洞我们称为crime。从tls 1.3开始，协议就禁用了tls压缩。\n\n * 扩展包：\n   \n   其他参数（如服务器名称，填充，支持的签名算法等）可以作为扩展名使用。\n\nserverhello\n\n其他参数（如服务器名称，填充，支持的签名算法等）可以作为扩展名使用。\n\n如果接受，第二步是服务端向客户端发送 server hello 消息，这个消息会从 client hello 传过来的 support ciphers 里确定一份加密套件，这个套件决定了后续加密和生成摘要时具体使用哪些算法，另外还会生成一份随机数 random2。注意，至此客户端和服务端都拥有了两个随机数（random1+ random2），这两个随机数会在后续生成对称秘钥时用到。\n\nserverhello中涉及到的具体参数：\n\n * 服务器版本version：\n   \n   服务器会选择客户端支持的最新版本。\n\n * 服务器随机数random：\n   \n   服务器和客户端都会生成32字节的随机数。用来创建加密密钥。\n\n * 加密套件：\n   \n   服务器会从客户端发送的加密套件列表中选出一个加密套件。\n\n * 会话id（session id）：\n   \n   服务器将约定的session参数存储在tls缓存中，并生成与其对应的session id。它与server hello一起发送到客户端。客户端可以写入约定的参数到此session id，并给定到期时间。客户端将在client hello中包含此id。如果客户端在此到期时间之前再次连接到服务器，则服务器可以检查与session id对应的缓存参数，并重用它们而无需完全握手。这非常有用，因为服务器和客户端都可以节省大量的计算成本。\n   \n   在涉及亚马逊和谷歌等流量巨大的应用程序时，这种方法存在缺点。每天都有数百万人连接到服务器，服务器必须使用session密钥保留所有session参数的tls缓存。这是一个巨大的开销。\n   \n   为了解决这个问题，在扩展包里加入了session tickets, 在这里，客户端可以在client hello中指定它是否支持session ticket。然后，服务器将创建一个新的会话票证(session ticket)，并使用只有服务器知道的经过私钥加密的session参数。它将存储在客户端上，因此所有session数据仅存储在客户端计算机上，但ticket仍然是安全的，因为该密钥只有服务器知道。\n   \n   此数据可以作为名为session ticket的扩展包含在client hello中。\n\n * 压缩算法：\n   \n   如果支持，服务器将同意客户端的首选压缩方法。\n\n * 扩展包\n\n这一阶段后，客户端服务端知道以下内容：\n\n 1. ssl版本\n 2. 密钥交换、信息验证和加密算法\n 3. 压缩方法\n 4. 有关密钥生成的两个随机数。\n\n----------------------------------------\n\n\n# ssl建立第二阶段\n\n服务端向客户端发送消息\n\n服务器启动ssl握手第2阶段，是本阶段所有消息的唯一发送方，客户机是所有消息的唯一接收方。该阶段分为4步：\n\n 1. 证书：服务器将数字证书和到根ca整个链发给客户端，使客户端能用服务器证书中的服务器公钥认证服务器。\n 2. 服务器密钥交换（可选）：这里视密钥交换算法而定\n 3. 证书请求：服务端可能会要求客户自身进行验证。\n 4. 服务器握手完成：第二阶段的结束，第三阶段开始的信号\n\ncertificate消息（可选） 第一次建立必须要有证书\n\n一般情况下，除了会话恢复时不需要发送该消息，在ssl握手的全流程中，都需要包含该消息。消息包含一个x.509证书，证书中包含公钥，发给客户端用来验证签名或在密钥交换的时候给消息加密。\n\n这一步是服务端将自己的证书下发给客户端，让客户端验证自己的身份，客户端验证通过后取出证书中的公钥。\n\nserver key exchange（可选）\n\n根据之前在clienthello消息中包含的ciphersuite信息，决定了密钥交换方式（例如rsa或者dh），因此在server key exchange消息中便会包含完成密钥交换所需的一系列参数。\n\ncertificate request（可选）------可以是单向的身份认证，也可以双向认证\n\n这一步是可选的，如果在对安全性要求高的常见可能用到。服务器用来验证客户端。服务器端发出certificate request消息，要求客户端发他自己的证书过来进行验证。该消息中包含服务器端支持的证书类型（rsa、dsa、ecdsa等）和服务器端所信任的所有证书发行机构的ca列表，客户端会用这些信息来筛选证书。\n\nserver hello done\n\n该消息表示服务器已经将所有信息发送完毕，接下来等待客户端的消息。\n\n----------------------------------------\n\n\n# ssl建立第三阶段\n\n客户端收到服务器发送的一系列消息并解析后，将本端相应的消息发送给服务器。\n\n客户机启动ssl握手第3阶段，是本阶段所有消息的唯一发送方，服务器是所有消息的唯一接收方。该阶段分为3步：\n\n 1. 证书（可选）：为了对服务器证明自身，客户要发送一个证书信息，这是可选的，在iis中可以配置强制客户端证书认证。\n 2. 客户机密钥交换（pre-master-secret）：这里客户端将预备主密钥发送给服务端，注意这里会使用服务端的公钥进行加密。\n 3. 证书验证（可选），对预备秘密和随机数进行签名，证明拥有（a）证书的公钥。\n\ncertificate（可选）\n\n如果在第二阶段服务器端要求发送客户端证书，客户端便会在该阶段将自己的证书发送过去。服务器端在之前发送的certificate request消息中包含了服务器端所支持的证书类型和ca列表，因此客户端会在自己的证书中选择满足这两个条件的第一个证书发送过去。若客户端没有证书，则发送一个no_certificate警告。\n\nclient key exchange\n\n根据之前从服务器端收到的随机数，按照不同的密钥交换算法，算出一个pre-master，发送给服务器，服务器端收到pre-master算出main master。而客户端当然也能自己通过pre-master算出main master。如此以来双方就算出了对称密钥。\n\n如果是rsa算法，会生成一个48字节的随机数，然后用server的公钥加密后再放入报文中。如果是dh算法，这是发送的就是客户端的dh参数，之后服务器和客户端根据dh算法，各自计算出相同的pre-master secret.\n\ncertificate verify（可选）\n\n只有在客户端发送了自己证书到服务器端，这个消息才需要发送。其中包含一个签名，对从第一条消息以来的所有握手消息的hmac值（用master_secret）进行签名。\n\n----------------------------------------\n\n\n# ssl建立第四阶段\n\n完成握手协议，建立ssl连接。\n\n客户机启动ssl握手第4阶段，使服务器结束。该阶段分为4步，前2个消息来自客户机，后2个消息来自服务器。\n\n建立起一个安全的连接，客户端发送一个change cipher spec消息，并且把协商得到的ciphersuite拷贝到当前连接的状态之中。然后，客户端用新的算法、密钥参数发送一个finished消息，这条消息可以检查密钥交换和认证过程是否已经成功。其中包括一个校验值，对客户端整个握手过程的消息进行校验。服务器同样发送change cipher spec消息和finished消息。握手过程完成，客户端和服务器可以交换应用层数据进行通信。\n\nchangecipherspec ：\n\n编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送（changecipherspec是一个独立的协议，体现在数据包中就是一个字节的数据，用于告知服务端，客户端已经切换到之前协商好的加密套件（cipher suite）的状态，准备使用之前协商好的加密套件加密数据并传输了）。\n\nclinet finished:\n\n客户端握手结束通知, 表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验（使用hmac算法计算收到和发送的所有握手消息的摘要，然后通过rfc5246中定义的一个伪函数prf计算出结果，加密后发送。此数据是为了在正式传输应用数据之前对刚刚握手建立起来的加解密通道进行验证。）\n\nserver finished:\n\n服务端握手结束通知。\n\n 1. 使用私钥解密加密的pre-master数据，基于之前(client hello 和 server hello)交换的两个明文随机数 random_c 和 random_s，计算得到协商密钥:enc_key=fuc(random_c, random_s, pre-master);\n 2. 计算之前所有接收信息的 hash 值，然后解密客户端发送的 encrypted_handshake_message，验证数据和密钥正确性;\n 3. 发送一个 changecipherspec（告知客户端已经切换到协商过的加密套件状态，准备使用加密套件和 session secret加密数据了）\n 4. 服务端也会使用 session secret 加密一段 finish 消息发送给客户端，以验证之前通过握手建立起来的加解密通道是否成功。\n\n根据之前的握手信息，如果客户端和服务端都能对finish信息进行正常加解密且消息正确的被验证，则说明握手通道已经建立成功，接下来，双方可以使用上面产生的session secret对数据进行加密传输了。\n\n----------------------------------------\n\n\n# 消息验证代码（hmac）和tls数据完整性：\n\n当服务器或客户端使用主密钥加密数据时，它还会计算明文数据的校验和（哈希值），这个校验和称为消息验证代码（mac）。然后在发送之前将mac包含在加密数据中。密钥用于从数据中生成mac，以确保传输过程中攻击者无法从数据中生成相同的mac，故而mac被称为hmac（哈希消息认证码）。另一方面，在接收到消息时，解密器将mac与明文分开，然后用它的密钥计算明文的校验和，并将其与接收到的mac进行比较，如果匹配，那我们就可以得出结论：数据在传输过程中没有被篡改。\n\n\n# 几个重要的secret key:\n\n\n# premaster secret\n\npremaster secret是在客户端使用rsa或者diffie-hellman等加密算法生成的。它将用来跟服务端和客户端在hello阶段产生的随机数结合在一起生成 master secret。premaster secret前两个字节是tls的版本号，这是一个比较重要的用来核对握手数据的版本号。服务端需要对密文中解密出来对的premaster版本号跟之前client hello阶段的版本号进行对比，如果版本号变低，则说明被串改，则立即停止发送任何消息。\n\n\n# master secret\n\n由于最后通过交换，客户端和服务端都会有pre-master和随机数，这个随机数将作为后面产生master secret的种子，结合premaster secret，客户端和服务端将计算出同样的master secret。\n\nclient write mac key\nserver write mac key\nclient write encryption key\nserver write encryption key\nclient write iv\nserver write iv\n\n为了保证信息的完整性和机密性，ssl需要有六个加密密钥：四个密钥和两个iv。为了信息的可信性，客户端需要一个密钥（hmac），为了加密要有一个密钥，为了分组加密要一个iv，服务器也是如此。ssl需要的密钥是单向的，不同于那些在其他方向的密钥。如果在一个方向上有攻击，这种攻击在其他方向是没影响的。\n\n主密钥是由一系列的hash值组成。\n\nmaster_secret = prf（pre_master_secret，“master secret”，clienthello.random + serverhello.random）[0..47];\n\n根据要求，有4个密钥用于加密和验证每个消息的完整性，他们是：\n\n * 客户端写入加密密钥：客户端用来加密数据，服务器用来解密数据。\n * 服务器写入加密密钥：服务器用来加密数据，客户端用来解密数据。\n * 客户端写入mac密钥：客户端用来创建mac，服务器用来验证mac。\n * 服务器写入mac密钥：服务器用来创建mac，客户端用来验证mac。\n\n\n# ssl会话恢复：\n\n会话恢复是指只要客户端和服务器已经通信过一次，它们就可以通过会话恢复的方式来跳过整个握手阶段二直接进行数据传输。\n\nssl采用会话恢复的方式来减少ssl握手过程中造成的巨大开销。\n\n为了加快建立握手的速度，减少协议带来的性能降低和资源消耗，tls 协议有两类会话缓存机制：\n\n * 会话标识 session id: 由服务器端支持，协议中的标准字段，因此基本所有服务器都支持，服务器端保存会话id以及协商的通信信息，nginx 中1m 内存约可以保存4000个 session id 机器相关信息，占用服务器资源较多;\n * 会话记录 session ticket :t需要服务器和客户端都支持，属于一个扩展字段，支持范围约60%(无可靠统计与来源)，将协商的通信信息加密之后发送给客户端保存，密钥只有服务器知道，占用服务器资源很少。\n * 二者对比，主要是保存协商信息的位置与方式不同，类似与 http 中的 session 与 cookie。二者都存在的情况下，(nginx 实现)优先使用 session_ticket。\n\n会话恢复具体过程（session id机制）：\n\n 1. 如果客户端和服务器之间曾经建立了连接，服务器会在握手成功后返回 session id，并保存对应的通信参数在服务器中;\n 2. 如果客户端再次需要和该服务器建立连接，则在 client_hello 中 session id 中携带记录的信息，发送给服务器;\n 3. 服务器根据收到的 session id 检索缓存记录，如果没有检索到货缓存过期，则按照正常的握手过程进行;\n 4. 如果检索到对应的缓存记录，则返回 change_cipher_spec 与 encrypted_handshake_message 信息，两个信息作用类似，encrypted_handshake_message 是到当前的通信参数与 master_secret的hash 值;\n 5. 如果客户端能够验证通过服务器加密数据，则客户端同样发送 change_cipher_spec 与 encrypted_handshake_message 信息;\n 6. 服务器验证数据通过，则握手建立成功，开始进行正常的加密数据通信。\n\n会话恢复具体过程（ session ticket）：\n\n 1. 如果客户端和服务器之间曾经建立了连接，服务器会在 new_session_ticket 数据中携带加密的 session_ticket 信息，客户端保存;\n 2. 如果客户端再次需要和该服务器建立连接，则在 client_hello 中扩展字段 session_ticket 中携带加密信息，一起发送给服务器;\n 3. 服务器解密 sesssion_ticket 数据，如果能够解密失败，则按照正常的握手过程进行;\n 4. 如果解密成功，则返回 change_cipher_spec 与 encrypted_handshake_message 信息，两个信息作用与 session id 中类似;\n 5. 如果客户端能够验证通过服务器加密数据，则客户端同样发送 change_cipher_spec与encrypted_handshake_message 信息;\n 6. 服务器验证数据通过，则握手建立成功，开始进行正常的加密数据通信。\n\n\n# ssl记录协议：\n\nssl记录协议主要用来实现对数据块的分块、加密解密、压缩与解压缩、完整性检查及封装各种高层协议。\n\n每个ssl记录主要包含以下信息：\n\n * 内容类型\n * 协议版本号，目前有2.0和3.0版本\n * 记录数据的长度\n * 数据由载荷\n * 散列算法计算消息认证代码\n\n * 将消息分割为多个片段；\n * 对每个片段进行压缩\n * 加上片段编号(防止重放攻击)计算消息验证码mac值(保证数据完整性)，追加在压缩片段\n * 对称密码加密；\n * 加上数据类型、版本号、压缩后的长度组成的报头， 就是最终的报文数据；\n\n\n# 应用数据传输：\n\n在所有的握手阶段都完成之后，就可以开始传送应用数据了。应用数据在传输之前，首先要附加上mac secret，然后再对这个数据包使用write encryption key进行加密。在服务端收到密文之后，使用client write encryption key进行解密，客户端收到服务端的数据之后使用server write encryption key进行解密，然后使用各自的write mac key对数据的完整性包括是否被串改进行验证。",charsets:{cjk:!0}},{title:"生成证书",frontmatter:{title:"生成证书",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/1f9026/",categories:["服务器"],tags:[null]},regularPath:"/07.%E6%9C%8D%E5%8A%A1%E5%99%A8/02.%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6.html",relativePath:"07.服务器/02.生成证书.md",key:"v-0132317e",path:"/pages/1f9026/",headersStr:null,content:"# 生成SSL证书\n\n 1. 生成根证书\n    \n    keytool -genkeypair -alias rootCiallo -keyalg RSA\n    \n    \n\n使用keytool.exe -list -v查看密钥库\n\n可以看到所有者和发布者相同，这种证书称为自签名证书，CA的根证书都是自签名证书\n\n 2. 再生成一个自签名证书，然后用第一个整数去签名这个证书\n\n 3. 使用第一个证书去签名第二个证书\n\n首先用第二个自签名证书去生成一个证书请求\n\nkeytool -certreq -alias Kiro -file kiro.csr\n\n然后用这个kiro.csr文件，去找第一个证书进行签名\n\nkeytool -gencert -alias rootCiallo -infile kiro.csr -outfile kiro.cer\n\nkiro.cer就是经过认证后的证书了，将这个证书导入密钥库\n\nkeytool -importcert -alias kiro -file kiro.cer\n\n可以看到这个证书的所有者和发布者已经不一样了\n\n导入的密钥库必须是之前生成证书请求的密钥库，并且alias也要和之前一样。因为证书只包含公钥，而私钥在密钥库，所以必须导入之前生成证书请求的密钥库，并且alias必须和之前相同，这样才知道这个证书属于哪个别名",normalizedContent:"# 生成ssl证书\n\n 1. 生成根证书\n    \n    keytool -genkeypair -alias rootciallo -keyalg rsa\n    \n    \n\n使用keytool.exe -list -v查看密钥库\n\n可以看到所有者和发布者相同，这种证书称为自签名证书，ca的根证书都是自签名证书\n\n 2. 再生成一个自签名证书，然后用第一个整数去签名这个证书\n\n 3. 使用第一个证书去签名第二个证书\n\n首先用第二个自签名证书去生成一个证书请求\n\nkeytool -certreq -alias kiro -file kiro.csr\n\n然后用这个kiro.csr文件，去找第一个证书进行签名\n\nkeytool -gencert -alias rootciallo -infile kiro.csr -outfile kiro.cer\n\nkiro.cer就是经过认证后的证书了，将这个证书导入密钥库\n\nkeytool -importcert -alias kiro -file kiro.cer\n\n可以看到这个证书的所有者和发布者已经不一样了\n\n导入的密钥库必须是之前生成证书请求的密钥库，并且alias也要和之前一样。因为证书只包含公钥，而私钥在密钥库，所以必须导入之前生成证书请求的密钥库，并且alias必须和之前相同，这样才知道这个证书属于哪个别名",charsets:{cjk:!0}},{title:"常用命令",frontmatter:{title:"常用命令",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/3d5d30/",categories:["docker"],tags:[null]},regularPath:"/08.docker/01.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"08.docker/01.常用命令.md",key:"v-d562bad8",path:"/pages/3d5d30/",headers:[{level:2,title:"镜像仓库命令",slug:"镜像仓库命令",normalizedTitle:"镜像仓库命令",charIndex:19},{level:2,title:"镜像命令",slug:"镜像命令",normalizedTitle:"镜像命令",charIndex:214},{level:2,title:"容器生命周期管理",slug:"容器生命周期管理",normalizedTitle:"容器生命周期管理",charIndex:500},{level:2,title:"容器运维操作",slug:"容器运维操作",normalizedTitle:"容器运维操作",charIndex:970},{level:2,title:"容器资源管理",slug:"容器资源管理",normalizedTitle:"容器资源管理",charIndex:1417},{level:2,title:"系统日志",slug:"系统日志",normalizedTitle:"系统日志",charIndex:1452}],headersStr:"镜像仓库命令 镜像命令 容器生命周期管理 容器运维操作 容器资源管理 系统日志",content:"[toc]\n\n\n# 常用命令\n\n\n# 镜像仓库命令\n\n 1. login\n\n 2. logout\n\n 3. pull：下载镜像\n\n 4. push\n\n 5. search :查找镜像\n    \n    docker search nginx\n    # STARS 关注度\n    docker search --filter=stars=300 nginx #查找关注度大于300的镜像\n    \n    \n    \n\n\n# 镜像命令\n\n 1. build\n\n 2. images：查看本地镜像\n    \n    docker images -a            #列出本地所有的镜像\n    docker images -q            #只显示镜像ID\n    docker images --digests     #显示镜像的摘要信息\n    docker images --no-trunc    #显示完整的镜像信息\n    \n\n 3. import\n\n 4. load\n\n 5. rmi：删除镜像\n\n 6. save\n\n 7. tag\n\n 8. commit\n\n\n# 容器生命周期管理\n\n 1.  create\n\n 2.  exec：进入容器，退出时不会停止容器\n     \n     docker exec -it MyUbuntu /bin/bash\n     \n\n 3.  kill：停止容器\n\n 4.  pause\n\n 5.  restart：重启容器\n\n 6.  rm：删除容器\n\n 7.  run：启动一个新容器，-i 以交互模式运行容器，-t 分配一个伪终端，-d 后台运行，-p 分配端口，-P随机分配端口，-v 挂载数据卷，-c 指定容器分配cpu的shares值，-m 限制容器的内存信息，以B、K、M、G为单位，--name 指定名称，--net 容器使用的网络\n     \n     docker run -itd --name MyUbuntu ubuntu:20.10 /bin/bash\n     docker run -itd -p 8080:80 nginx\n     \n\n 8.  start：启动容器\n\n 9.  stop：停止容器\n\n 10. unpause\n\n\n# 容器运维操作\n\n 1.  attach：进入容器，退出时会停止容器\n\n 2.  export\n\n 3.  inspect\n\n 4.  port\n\n 5.  ps：查看容器\n     \n     # 查看正在运行的容器\n     docker ps\n     # 查看所有容器\n     docker ps -a\n     # -q参数，只显示container id\n     docker ps -q\n     # 查看容器详细信息\n     docker inspect [NAME]\n     \n\n 6.  rename\n\n 7.  stats\n\n 8.  top\n\n 9.  wait\n\n 10. cp：拷贝文件\n     \n     #从容器外到容器内\n     #docker cp '容器外路径' '容器id:容器内路径'\n     docker cp /root/test.txt MyUbuntu:/tmp\n     \n\n 11. diff\n\n 12. update\n\n\n# 容器资源管理\n\n 1. volume\n 2. network\n\n\n# 系统日志\n\n 1. events\n 2. history\n 3. logs",normalizedContent:"[toc]\n\n\n# 常用命令\n\n\n# 镜像仓库命令\n\n 1. login\n\n 2. logout\n\n 3. pull：下载镜像\n\n 4. push\n\n 5. search :查找镜像\n    \n    docker search nginx\n    # stars 关注度\n    docker search --filter=stars=300 nginx #查找关注度大于300的镜像\n    \n    \n    \n\n\n# 镜像命令\n\n 1. build\n\n 2. images：查看本地镜像\n    \n    docker images -a            #列出本地所有的镜像\n    docker images -q            #只显示镜像id\n    docker images --digests     #显示镜像的摘要信息\n    docker images --no-trunc    #显示完整的镜像信息\n    \n\n 3. import\n\n 4. load\n\n 5. rmi：删除镜像\n\n 6. save\n\n 7. tag\n\n 8. commit\n\n\n# 容器生命周期管理\n\n 1.  create\n\n 2.  exec：进入容器，退出时不会停止容器\n     \n     docker exec -it myubuntu /bin/bash\n     \n\n 3.  kill：停止容器\n\n 4.  pause\n\n 5.  restart：重启容器\n\n 6.  rm：删除容器\n\n 7.  run：启动一个新容器，-i 以交互模式运行容器，-t 分配一个伪终端，-d 后台运行，-p 分配端口，-p随机分配端口，-v 挂载数据卷，-c 指定容器分配cpu的shares值，-m 限制容器的内存信息，以b、k、m、g为单位，--name 指定名称，--net 容器使用的网络\n     \n     docker run -itd --name myubuntu ubuntu:20.10 /bin/bash\n     docker run -itd -p 8080:80 nginx\n     \n\n 8.  start：启动容器\n\n 9.  stop：停止容器\n\n 10. unpause\n\n\n# 容器运维操作\n\n 1.  attach：进入容器，退出时会停止容器\n\n 2.  export\n\n 3.  inspect\n\n 4.  port\n\n 5.  ps：查看容器\n     \n     # 查看正在运行的容器\n     docker ps\n     # 查看所有容器\n     docker ps -a\n     # -q参数，只显示container id\n     docker ps -q\n     # 查看容器详细信息\n     docker inspect [name]\n     \n\n 6.  rename\n\n 7.  stats\n\n 8.  top\n\n 9.  wait\n\n 10. cp：拷贝文件\n     \n     #从容器外到容器内\n     #docker cp '容器外路径' '容器id:容器内路径'\n     docker cp /root/test.txt myubuntu:/tmp\n     \n\n 11. diff\n\n 12. update\n\n\n# 容器资源管理\n\n 1. volume\n 2. network\n\n\n# 系统日志\n\n 1. events\n 2. history\n 3. logs",charsets:{cjk:!0}},{title:"镜像",frontmatter:{title:"镜像",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/7bcbbc/",categories:["docker"],tags:[null]},regularPath:"/08.docker/02.%E9%95%9C%E5%83%8F.html",relativePath:"08.docker/02.镜像.md",key:"v-70126c55",path:"/pages/7bcbbc/",headers:[{level:2,title:"镜像的分层概念",slug:"镜像的分层概念",normalizedTitle:"镜像的分层概念",charIndex:17}],headersStr:"镜像的分层概念",content:"[toc]\n\n\n# 镜像\n\n\n# 镜像的分层概念\n\n> 镜像是一种轻量级、可执行的软件包，其中包含运行某个软件所需的所有内容。可以把应用和配置文件打包成一个可交付的运行环境\n\n * docker采用UnionFS(联合文件系统)，Union文件系统是一种分层、轻量级、高性能的文件系统，可以将对文件系统的修改作为一次提交进行叠加，可以将不同的目录挂载在同一个虚拟文件系统下。docker镜像通过分层进行继承。\n\n * docker镜像的最底层是bootfs,其中包含bootloader和kernel，用于加载boot\n\n * 在bootfs之上，是rootfs，其中包含典型Linux系统的/dev, /proc, /bin, /etc等标准目录和文件\n\n * docker镜像层都是只读的，容器层是可写的，容器启动时，一个新的可写层加载到镜像的顶部，即容器层。\n\n * 在Dockerfile中，每条指令都会创建一个镜像层，当前层的修改不会影响上一层\n\n * 在容器中读取文件时，从最上层的镜像层开始查找，找到后读取到内存中，若已经在内存中了，则直接使用\n\n * 容器修改文件时，将镜像层的文件复制到容器层，直接修改容器层的文件\n\n * 容器删除文件时，找到文件后再容器中记录删除，并没有真正的删除，这会导致镜像的体积只会增加，不会减少\n\n * 容器增加文件时，直接在容器层增加，不会影响镜像层",normalizedContent:"[toc]\n\n\n# 镜像\n\n\n# 镜像的分层概念\n\n> 镜像是一种轻量级、可执行的软件包，其中包含运行某个软件所需的所有内容。可以把应用和配置文件打包成一个可交付的运行环境\n\n * docker采用unionfs(联合文件系统)，union文件系统是一种分层、轻量级、高性能的文件系统，可以将对文件系统的修改作为一次提交进行叠加，可以将不同的目录挂载在同一个虚拟文件系统下。docker镜像通过分层进行继承。\n\n * docker镜像的最底层是bootfs,其中包含bootloader和kernel，用于加载boot\n\n * 在bootfs之上，是rootfs，其中包含典型linux系统的/dev, /proc, /bin, /etc等标准目录和文件\n\n * docker镜像层都是只读的，容器层是可写的，容器启动时，一个新的可写层加载到镜像的顶部，即容器层。\n\n * 在dockerfile中，每条指令都会创建一个镜像层，当前层的修改不会影响上一层\n\n * 在容器中读取文件时，从最上层的镜像层开始查找，找到后读取到内存中，若已经在内存中了，则直接使用\n\n * 容器修改文件时，将镜像层的文件复制到容器层，直接修改容器层的文件\n\n * 容器删除文件时，找到文件后再容器中记录删除，并没有真正的删除，这会导致镜像的体积只会增加，不会减少\n\n * 容器增加文件时，直接在容器层增加，不会影响镜像层",charsets:{cjk:!0}},{title:"搭建私服",frontmatter:{title:"搭建私服",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/21041c/",categories:["docker"],tags:[null]},regularPath:"/08.docker/03.%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%8D.html",relativePath:"08.docker/03.搭建私服.md",key:"v-7f59dca8",path:"/pages/21041c/",headers:[{level:2,title:"docker-registry",slug:"docker-registry",normalizedTitle:"docker-registry",charIndex:19},{level:2,title:"Harbor",slug:"harbor",normalizedTitle:"harbor",charIndex:531}],headersStr:"docker-registry Harbor",content:'[toc]\n\n\n# 搭建私服\n\n\n# docker-registry\n\n * 下载registry\n   \n   docker pull registry\n   \n\n * 启动容器\n   \n   docker run -d -p 5000:5000 -v /tmp/myregistry/:/tmp/registry --privileged=true registry\n   \n\n * 修改 /etc/docker/daemon.json\n   \n   {"insecure-registries":["0.0.0.0:5000"]}\n   \n\n * 重启服务\n   \n   systemctl daemon-reload\n   systemctl restart docker\n   \n\n * 执行命令\n   \n   docker tag myubuntu:1.1 0.0.0.0:5000/myubuntu:1.1\n   docker push 0.0.0.0:5000/myubuntu:1.1\n   \n\n * 查看私服库的镜像\n   \n       curl -XGET http://0.0.0.0:5000/v2/_catalog\n   \n\n\n# Harbor\n\nHarbor相比较于registry，提供了web管理界面，更详细的账户、权限管理，还可以配置漏洞扫描等工具\n\n 1. 安装docker compose\n    \n    wget https://github.com/docker/compose/releases/download/v2.4.1/docker-compose-linux-x86_64\n    cp docker-compose-linux-x86_64 /usr/local/lib/docker/cli-plugins/docker-compose\n    chmod +x /usr/local/lib/docker/cli-plugins/docker-compose\n    \n    \n    测试安装\n    \n    docker compose version\n    \n\n 2. 下载Harbor\n    \n    wget https://github.com/goharbor/harbor/releases/download/v2.5.0/harbor-offline-installer-v2.5.0.tgz\n    \n\n 3. 解压harbor\n    \n    tar xf harbor-offline-installer-v2.5.0.tgz -C /usr/local/\n    \n\n 4. 配置harbor\n    \n    cp harbor.yml.tmpl harbor.yml\n    nano harbor.yml\n    \n    \n    # Configuration file of Harbor\n    \n    # The IP address or hostname to access admin UI and registry service.\n    # DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.\n    hostname: 0.0.0.0 #改为域名或本机ip\n    \n    # http related config\n    http:\n      # port for http, default is 80. If https enabled, this port will redirect to https port\n      port: 80\n    \n    #将https相关证书注释掉\n    # https related config\n    #https:\n      # https port for harbor, default is 443\n      #port: 443\n      # The path of cert and key files for nginx\n      #certificate: /your/certificate/path\n      #private_key: /your/private/key/path\n    \n    # # Uncomment following will enable tls communication between all harbor components\n    # internal_tls:\n    #   # set enabled to true means internal tls is enabled\n    #   enabled: true\n    #   # put your cert and key files on dir\n    #   dir: /etc/harbor/tls/internal\n    \n\n 5. 运行安装脚本\n    \n    sudo ./install.sh --with-trivy --with-chartmuseum\n    \n\n 6. 让docker信任harbo\n    \n    修改 /etc/docker/daemon.json\n    \n    {"insecure-registries":["0.0.0.0"]}\n    \n\n 7. docker使用harbo仓库\n    \n    访问harbo的地址，默认账户：admin,密码：Harbo12345\n    \n    1. 新建项目\n    \n    2. 修改镜像标签符合仓库规范\n       \n       docker tag myubuntu:1.1 0.0.0.0/test/myubuntu:1.1\n       \n    \n    3. docker login\n       \n       使用harbo的账户进行登录\n    \n    4. 上传镜像\n       \n       root@kiro:/etc/docker# docker push 0.0.0.0/test/myubuntu:1.1\n       The push refers to repository [0.0.0.0/test/myubuntu]\n       6f655c8e517c: Layer already exists\n       0828ee65565c: Layer already exists\n       1.1: digest: sha256:74d9c297f70fccb8c041d7f22cea6acc58d97bd53b54a61e95df68c62a13330e size: 741\n       \n    \n    5. 拉取镜像\n       \n       docker pull 0.0.0.0/test/myubuntu:1.1\n       ',normalizedContent:'[toc]\n\n\n# 搭建私服\n\n\n# docker-registry\n\n * 下载registry\n   \n   docker pull registry\n   \n\n * 启动容器\n   \n   docker run -d -p 5000:5000 -v /tmp/myregistry/:/tmp/registry --privileged=true registry\n   \n\n * 修改 /etc/docker/daemon.json\n   \n   {"insecure-registries":["0.0.0.0:5000"]}\n   \n\n * 重启服务\n   \n   systemctl daemon-reload\n   systemctl restart docker\n   \n\n * 执行命令\n   \n   docker tag myubuntu:1.1 0.0.0.0:5000/myubuntu:1.1\n   docker push 0.0.0.0:5000/myubuntu:1.1\n   \n\n * 查看私服库的镜像\n   \n       curl -xget http://0.0.0.0:5000/v2/_catalog\n   \n\n\n# harbor\n\nharbor相比较于registry，提供了web管理界面，更详细的账户、权限管理，还可以配置漏洞扫描等工具\n\n 1. 安装docker compose\n    \n    wget https://github.com/docker/compose/releases/download/v2.4.1/docker-compose-linux-x86_64\n    cp docker-compose-linux-x86_64 /usr/local/lib/docker/cli-plugins/docker-compose\n    chmod +x /usr/local/lib/docker/cli-plugins/docker-compose\n    \n    \n    测试安装\n    \n    docker compose version\n    \n\n 2. 下载harbor\n    \n    wget https://github.com/goharbor/harbor/releases/download/v2.5.0/harbor-offline-installer-v2.5.0.tgz\n    \n\n 3. 解压harbor\n    \n    tar xf harbor-offline-installer-v2.5.0.tgz -c /usr/local/\n    \n\n 4. 配置harbor\n    \n    cp harbor.yml.tmpl harbor.yml\n    nano harbor.yml\n    \n    \n    # configuration file of harbor\n    \n    # the ip address or hostname to access admin ui and registry service.\n    # do not use localhost or 127.0.0.1, because harbor needs to be accessed by external clients.\n    hostname: 0.0.0.0 #改为域名或本机ip\n    \n    # http related config\n    http:\n      # port for http, default is 80. if https enabled, this port will redirect to https port\n      port: 80\n    \n    #将https相关证书注释掉\n    # https related config\n    #https:\n      # https port for harbor, default is 443\n      #port: 443\n      # the path of cert and key files for nginx\n      #certificate: /your/certificate/path\n      #private_key: /your/private/key/path\n    \n    # # uncomment following will enable tls communication between all harbor components\n    # internal_tls:\n    #   # set enabled to true means internal tls is enabled\n    #   enabled: true\n    #   # put your cert and key files on dir\n    #   dir: /etc/harbor/tls/internal\n    \n\n 5. 运行安装脚本\n    \n    sudo ./install.sh --with-trivy --with-chartmuseum\n    \n\n 6. 让docker信任harbo\n    \n    修改 /etc/docker/daemon.json\n    \n    {"insecure-registries":["0.0.0.0"]}\n    \n\n 7. docker使用harbo仓库\n    \n    访问harbo的地址，默认账户：admin,密码：harbo12345\n    \n    1. 新建项目\n    \n    2. 修改镜像标签符合仓库规范\n       \n       docker tag myubuntu:1.1 0.0.0.0/test/myubuntu:1.1\n       \n    \n    3. docker login\n       \n       使用harbo的账户进行登录\n    \n    4. 上传镜像\n       \n       root@kiro:/etc/docker# docker push 0.0.0.0/test/myubuntu:1.1\n       the push refers to repository [0.0.0.0/test/myubuntu]\n       6f655c8e517c: layer already exists\n       0828ee65565c: layer already exists\n       1.1: digest: sha256:74d9c297f70fccb8c041d7f22cea6acc58d97bd53b54a61e95df68c62a13330e size: 741\n       \n    \n    5. 拉取镜像\n       \n       docker pull 0.0.0.0/test/myubuntu:1.1\n       ',charsets:{cjk:!0}},{title:"基本概念",frontmatter:{title:"基本概念",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/8149aa/",categories:["k8s"],tags:[null]},regularPath:"/09.k8s/01.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html",relativePath:"09.k8s/01.基本概念.md",key:"v-fbbdbad4",path:"/pages/8149aa/",headers:[{level:2,title:"pod",slug:"pod",normalizedTitle:"pod",charIndex:11},{level:3,title:"实现机制",slug:"实现机制",normalizedTitle:"实现机制",charIndex:161}],headersStr:"pod 实现机制",content:"# 基本概念\n\n\n# pod\n\n * 最小部署单元，kubernetes不会直接处理容器，而是由数个container组成的pod\n * 一个pod中的容器共享网络命名空间\n * 每个pod都由一个被称为”根容器“的Pause容器，除此之外还有数个用户业务容器\n * docker是单进程的\n * pod是多进程\n\n\n# 实现机制\n\n * 网络共享\n   \n   在创建pod时，会首先创建一个pause容器，然后再创建业务容器，业务容器加入到pause中，以让所有业务容器在同一个namespace中\n\n * 共享存储\n   \n   通过数据卷来进行持久化存储",normalizedContent:"# 基本概念\n\n\n# pod\n\n * 最小部署单元，kubernetes不会直接处理容器，而是由数个container组成的pod\n * 一个pod中的容器共享网络命名空间\n * 每个pod都由一个被称为”根容器“的pause容器，除此之外还有数个用户业务容器\n * docker是单进程的\n * pod是多进程\n\n\n# 实现机制\n\n * 网络共享\n   \n   在创建pod时，会首先创建一个pause容器，然后再创建业务容器，业务容器加入到pause中，以让所有业务容器在同一个namespace中\n\n * 共享存储\n   \n   通过数据卷来进行持久化存储",charsets:{cjk:!0}},{title:"常用软件安装",frontmatter:{title:"常用软件安装",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/bb3e9a/",categories:["docker"],tags:[null]},regularPath:"/08.docker/04.%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85.html",relativePath:"08.docker/04.常用软件安装.md",key:"v-378ffdba",path:"/pages/bb3e9a/",headers:[{level:2,title:"mysql主从复制",slug:"mysql主从复制",normalizedTitle:"mysql主从复制",charIndex:401},{level:2,title:"从库删除数据重新同步",slug:"从库删除数据重新同步",normalizedTitle:"从库删除数据重新同步",charIndex:3725},{level:2,title:"Tomcat",slug:"tomcat",normalizedTitle:"tomcat",charIndex:4474},{level:2,title:"Redis",slug:"redis",normalizedTitle:"redis",charIndex:4556},{level:3,title:"Redis集群",slug:"redis集群",normalizedTitle:"redis集群",charIndex:4743},{level:3,title:"扩容",slug:"扩容",normalizedTitle:"扩容",charIndex:5797},{level:3,title:"缩容",slug:"缩容",normalizedTitle:"缩容",charIndex:6546}],headersStr:"mysql主从复制 从库删除数据重新同步 Tomcat Redis Redis集群 扩容 缩容",content:"# 常用软件安装\n\n\n# mysql\n\n 1. 下载mysql\n    \n    docker pull mysql\n    \n\n 2. 启动容器\n    \n    docker run -d -p 3307:3306 --privileged=true \\\n    -e MYSQL_ROOT_PASSWORD=123456 \\\n    -v /docker/mysql7/log:/var/log/mysql \\\n    -v /docker/mysql7/data:/var/lib/mysql \\\n    -v /docker/mysql7/conf:/etc/mysql/conf.d \\\n    -v /etc/localtime:/etc/localtime \\\n    --name mysql7 \\\n    --restart=always \\\n    mysql\n    \n\n\n# mysql主从复制\n\n 1. 创建mysql-master容器\n    \n    * 配置文件 my.cnf\n      \n      [mysqld]\n      pid-file        = /var/run/mysqld/mysqld.pid\n      socket          = /var/run/mysqld/mysqld.sock\n      datadir         = /var/lib/mysql\n      secure-file-priv= NULL\n      \n      server_id=101\n      binlog-ignore-db=mysql\n      log-bin=mall-mysql-bin\n      binlog_cache_size=1M\n      binlog_format=mixed\n      expire_logs_days=7\n      slave_skip_errors=1062\n      \n      # Custom config should go here\n      !includedir /etc/mysql/conf.d/\n      \n    \n    * 在执行启动脚本之前，将my.cnf文件放置到/docker/mysql-master/conf文件夹下，并在/docker/mysql-master/conf下创建conf.d文件夹\n    \n    * 启动脚本\n      \n        docker run -d -p 3307:3306 --privileged=true \\\n        -e MYSQL_ROOT_PASSWORD=123456 \\\n        -v /docker/mysql-master/log:/var/log/mysql \\\n        -v /docker/mysql-master/data:/var/lib/mysql \\\n        -v /docker/mysql-master/conf:/etc/mysql/ \\\n        -v /etc/localtime:/etc/localtime \\\n        --name mysql-master \\\n        --restart=always \\\n        mysql\n      \n    \n    * 进入mysql-master\n    \n    * 创建同步用户\n      \n      create user 'slave'@'%'identified by '123456';\n      grant replication slave,replication client on *.* to 'slave'@'%';\n      flush privileges;\n      \n    \n    * 查看同步状态\n      \n      show master status;\n      \n      \n      记录下file和position\n\n 2. 创建mysql-slave容器\n    \n    * 配置文件\n      \n      [mysqld]\n      pid-file        = /var/run/mysqld/mysqld.pid\n      socket          = /var/run/mysqld/mysqld.sock\n      datadir         = /var/lib/mysql\n      secure-file-priv= NULL\n      \n      server_id=102\n      binlog-ignore-db=mysql\n      log-bin=mall-mysql-slave1-bin\n      binlog_cache_size=1M\n      binlog_format=mixed\n      expire_logs_days=7\n      slave_skip_errors=1062\n      relay_log=mall-mysql-relay-bin\n      log_slave_updates=1\n      #只对没有super权限存在限制，使用时需要从库创建并使用普通用户。GRANT USAGE ON *.* TO 'user01'@'localhost' IDENTIFIED BY'123456'WITH GRANT OPTION;\n      read_only=1 \n      \n      # Custom config should go here\n      !includedir /etc/mysql/conf.d/\n      \n    \n    * 将my.cnf文件放置在/docker/mysql-slave/conf路径下，并创建conf.d文件夹\n    \n    * 启动脚本\n      \n      docker run -d -p 3308:3306 --privileged=true \\\n      -e MYSQL_ROOT_PASSWORD=123456 \\\n      -v /docker/mysql-slave/log:/var/log/mysql \\\n      -v /docker/mysql-slave/data:/var/lib/mysql \\\n      -v /docker/mysql-slave/conf:/etc/mysql \\\n      -v /etc/localtime:/etc/localtime \\\n      --name mysql-slave \\\n      --restart=always \\\n      mysql\n      \n    \n    * 从服务器配置主从复制\n      \n      1. 这个命令在mysql8上会导致从服务器无法连接到主服务器，因为8.0更新了账户登录验证插件\n      \n      change master to master_host='192.168.142.132',\n      master_user='slave',\n      master_password='123456',\n      master_port=3307,\n      master_log_file='mall-mysql-bin.000010',\n      master_log_pos=711,\n      master_connect_retry=30;\n      \n      \n      2. 8.0可使用的命令\n         \n         CHANGE REPLICATION SOURCE TO \n         GET_SOURCE_PUBLIC_KEY=1, \n         source_host='192.168.142.132',\n         source_user='slave',\n         source_password='123456',\n         source_port=3307,\n         source_log_file='mall-mysql-bin.000010',\n         source_log_pos=711,\n         source_connect_retry=30;\n         \n    \n    * 启动主从复制\n      \n      start slave;\n      \n    \n    * 查看从机主从复制状态\n      \n      show slave status \\G;\n      \n      \n      \n      # 从库删除数据重新同步\n      \n      1. 停止slave,清除主从信息\n         \n         stop slave;\n         reset slave all;\n         \n      \n      2. 删除从库同步的主数据库数据\n      \n      3. 备份主数据库数据\n         \n         reset master;\n         mysqldump -u root -p test --set-gtid-purged=OFF --single-transaction > dbname.sql\n         \n         \n      \n      4. 从库导入数据\n      \n      5. 从库配置主从复制\n         \n         CHANGE REPLICATION SOURCE TO \n         GET_SOURCE_PUBLIC_KEY=1, \n         source_host='192.168.142.132',\n         source_user='slave',\n         source_password='123456',\n         source_port=3307,\n         source_log_file='mall-mysql-bin.000001',\n         source_log_pos=156,\n         source_connect_retry=30;\n         \n      \n      6. 启动slave\n      \n      7. 查看slave状态\n\n\n# Tomcat\n\ndocker pull tomcat\ndocler run -d -p 8080:8080 --name MyTomcat tomcat\n\n\n\n# Redis\n\ndocker run -d -p 6379:6379 --name myRedis \\\n-v /docker/redis/redis.conf:/etc/redis/redis.conf \\\n-v /docker/redis/data:/data \\\nredis:6.2.6 \\\nredis-server /etc/redis/redis.conf\n\n\n\n# Redis集群\n\ndocker run -d --name redis-node-1 --net host -v /docker/redis/redis-node-1:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6381\ndocker run -d --name redis-node-2 --net host -v /docker/redis/redis-node-2:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6382\ndocker run -d --name redis-node-3 --net host -v /docker/redis/redis-node-3:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6383\ndocker run -d --name redis-node-4 --net host -v /docker/redis/redis-node-4:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6384\ndocker run -d --name redis-node-5 --net host -v /docker/redis/redis-node-5:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6385\ndocker run -d --name redis-node-6 --net host -v /docker/redis/redis-node-6:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6386\n\n\nredis-cli --cluster create 192.168.142.132:6381 192.168.142.132:6382 192.168.142.132:6383 192.168.142.132:6384 192.168.142.132:6385 192.168.142.132:6386 --cluster-replicas 1\n\n\n\n# 扩容\n\n添加master节点\n\ndocker run -d --name redis-node-7 --net host -v /docker/redis/redis-node-7:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6387\n\n\n#redis-cli --cluster add-node 新节点ip:端口 集群ip:端口\nredis-cli --cluster add-node 192.168.142.132:6387 192.168.142.132:6381\n\n\nredis-cli --cluster reshard 192.168.142.132:6381\n\n\n添加slave节点\n\ndocker run -d --name redis-node-8 --net host -v /docker/redis/redis-node-8:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6388\n\n\n# redis-cli --cluster add-node 新slave的ip:prot 新master的ip:port --cluster-slave --cluster-master-id 新主机节点id\nredis-cli --cluster add-node 192.168.142.132:6388 192.168.142.132:6387 --cluster-slave --cluster-master-id fb51d858020dd29dd39aecac3593b9317d7cd091\n\n\n\n# 缩容\n\n 1. 删除slave节点\n    \n    #redis-cli --cluster del-node ip:port slave的id\n    redis-cli --cluster del-node 192.168.142.132:6388 f48983ca68b878f9282b16270a390f0f11e05c37\n    \n\n 2. 重新分配槽\n    \n    redis-cli --cluster reshard 192.168.142.132:6381\n    \n    \n    \n\n 3. 删除master节点\n    \n    redis-cli --cluster del-node 192.168.142.132:6387 fb51d858020dd29dd39aecac3593b9317d7cd091 \n    ",normalizedContent:"# 常用软件安装\n\n\n# mysql\n\n 1. 下载mysql\n    \n    docker pull mysql\n    \n\n 2. 启动容器\n    \n    docker run -d -p 3307:3306 --privileged=true \\\n    -e mysql_root_password=123456 \\\n    -v /docker/mysql7/log:/var/log/mysql \\\n    -v /docker/mysql7/data:/var/lib/mysql \\\n    -v /docker/mysql7/conf:/etc/mysql/conf.d \\\n    -v /etc/localtime:/etc/localtime \\\n    --name mysql7 \\\n    --restart=always \\\n    mysql\n    \n\n\n# mysql主从复制\n\n 1. 创建mysql-master容器\n    \n    * 配置文件 my.cnf\n      \n      [mysqld]\n      pid-file        = /var/run/mysqld/mysqld.pid\n      socket          = /var/run/mysqld/mysqld.sock\n      datadir         = /var/lib/mysql\n      secure-file-priv= null\n      \n      server_id=101\n      binlog-ignore-db=mysql\n      log-bin=mall-mysql-bin\n      binlog_cache_size=1m\n      binlog_format=mixed\n      expire_logs_days=7\n      slave_skip_errors=1062\n      \n      # custom config should go here\n      !includedir /etc/mysql/conf.d/\n      \n    \n    * 在执行启动脚本之前，将my.cnf文件放置到/docker/mysql-master/conf文件夹下，并在/docker/mysql-master/conf下创建conf.d文件夹\n    \n    * 启动脚本\n      \n        docker run -d -p 3307:3306 --privileged=true \\\n        -e mysql_root_password=123456 \\\n        -v /docker/mysql-master/log:/var/log/mysql \\\n        -v /docker/mysql-master/data:/var/lib/mysql \\\n        -v /docker/mysql-master/conf:/etc/mysql/ \\\n        -v /etc/localtime:/etc/localtime \\\n        --name mysql-master \\\n        --restart=always \\\n        mysql\n      \n    \n    * 进入mysql-master\n    \n    * 创建同步用户\n      \n      create user 'slave'@'%'identified by '123456';\n      grant replication slave,replication client on *.* to 'slave'@'%';\n      flush privileges;\n      \n    \n    * 查看同步状态\n      \n      show master status;\n      \n      \n      记录下file和position\n\n 2. 创建mysql-slave容器\n    \n    * 配置文件\n      \n      [mysqld]\n      pid-file        = /var/run/mysqld/mysqld.pid\n      socket          = /var/run/mysqld/mysqld.sock\n      datadir         = /var/lib/mysql\n      secure-file-priv= null\n      \n      server_id=102\n      binlog-ignore-db=mysql\n      log-bin=mall-mysql-slave1-bin\n      binlog_cache_size=1m\n      binlog_format=mixed\n      expire_logs_days=7\n      slave_skip_errors=1062\n      relay_log=mall-mysql-relay-bin\n      log_slave_updates=1\n      #只对没有super权限存在限制，使用时需要从库创建并使用普通用户。grant usage on *.* to 'user01'@'localhost' identified by'123456'with grant option;\n      read_only=1 \n      \n      # custom config should go here\n      !includedir /etc/mysql/conf.d/\n      \n    \n    * 将my.cnf文件放置在/docker/mysql-slave/conf路径下，并创建conf.d文件夹\n    \n    * 启动脚本\n      \n      docker run -d -p 3308:3306 --privileged=true \\\n      -e mysql_root_password=123456 \\\n      -v /docker/mysql-slave/log:/var/log/mysql \\\n      -v /docker/mysql-slave/data:/var/lib/mysql \\\n      -v /docker/mysql-slave/conf:/etc/mysql \\\n      -v /etc/localtime:/etc/localtime \\\n      --name mysql-slave \\\n      --restart=always \\\n      mysql\n      \n    \n    * 从服务器配置主从复制\n      \n      1. 这个命令在mysql8上会导致从服务器无法连接到主服务器，因为8.0更新了账户登录验证插件\n      \n      change master to master_host='192.168.142.132',\n      master_user='slave',\n      master_password='123456',\n      master_port=3307,\n      master_log_file='mall-mysql-bin.000010',\n      master_log_pos=711,\n      master_connect_retry=30;\n      \n      \n      2. 8.0可使用的命令\n         \n         change replication source to \n         get_source_public_key=1, \n         source_host='192.168.142.132',\n         source_user='slave',\n         source_password='123456',\n         source_port=3307,\n         source_log_file='mall-mysql-bin.000010',\n         source_log_pos=711,\n         source_connect_retry=30;\n         \n    \n    * 启动主从复制\n      \n      start slave;\n      \n    \n    * 查看从机主从复制状态\n      \n      show slave status \\g;\n      \n      \n      \n      # 从库删除数据重新同步\n      \n      1. 停止slave,清除主从信息\n         \n         stop slave;\n         reset slave all;\n         \n      \n      2. 删除从库同步的主数据库数据\n      \n      3. 备份主数据库数据\n         \n         reset master;\n         mysqldump -u root -p test --set-gtid-purged=off --single-transaction > dbname.sql\n         \n         \n      \n      4. 从库导入数据\n      \n      5. 从库配置主从复制\n         \n         change replication source to \n         get_source_public_key=1, \n         source_host='192.168.142.132',\n         source_user='slave',\n         source_password='123456',\n         source_port=3307,\n         source_log_file='mall-mysql-bin.000001',\n         source_log_pos=156,\n         source_connect_retry=30;\n         \n      \n      6. 启动slave\n      \n      7. 查看slave状态\n\n\n# tomcat\n\ndocker pull tomcat\ndocler run -d -p 8080:8080 --name mytomcat tomcat\n\n\n\n# redis\n\ndocker run -d -p 6379:6379 --name myredis \\\n-v /docker/redis/redis.conf:/etc/redis/redis.conf \\\n-v /docker/redis/data:/data \\\nredis:6.2.6 \\\nredis-server /etc/redis/redis.conf\n\n\n\n# redis集群\n\ndocker run -d --name redis-node-1 --net host -v /docker/redis/redis-node-1:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6381\ndocker run -d --name redis-node-2 --net host -v /docker/redis/redis-node-2:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6382\ndocker run -d --name redis-node-3 --net host -v /docker/redis/redis-node-3:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6383\ndocker run -d --name redis-node-4 --net host -v /docker/redis/redis-node-4:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6384\ndocker run -d --name redis-node-5 --net host -v /docker/redis/redis-node-5:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6385\ndocker run -d --name redis-node-6 --net host -v /docker/redis/redis-node-6:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6386\n\n\nredis-cli --cluster create 192.168.142.132:6381 192.168.142.132:6382 192.168.142.132:6383 192.168.142.132:6384 192.168.142.132:6385 192.168.142.132:6386 --cluster-replicas 1\n\n\n\n# 扩容\n\n添加master节点\n\ndocker run -d --name redis-node-7 --net host -v /docker/redis/redis-node-7:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6387\n\n\n#redis-cli --cluster add-node 新节点ip:端口 集群ip:端口\nredis-cli --cluster add-node 192.168.142.132:6387 192.168.142.132:6381\n\n\nredis-cli --cluster reshard 192.168.142.132:6381\n\n\n添加slave节点\n\ndocker run -d --name redis-node-8 --net host -v /docker/redis/redis-node-8:/data redis:6.2.6 --cluster-enabled yes --appendonly yes --port 6388\n\n\n# redis-cli --cluster add-node 新slave的ip:prot 新master的ip:port --cluster-slave --cluster-master-id 新主机节点id\nredis-cli --cluster add-node 192.168.142.132:6388 192.168.142.132:6387 --cluster-slave --cluster-master-id fb51d858020dd29dd39aecac3593b9317d7cd091\n\n\n\n# 缩容\n\n 1. 删除slave节点\n    \n    #redis-cli --cluster del-node ip:port slave的id\n    redis-cli --cluster del-node 192.168.142.132:6388 f48983ca68b878f9282b16270a390f0f11e05c37\n    \n\n 2. 重新分配槽\n    \n    redis-cli --cluster reshard 192.168.142.132:6381\n    \n    \n    \n\n 3. 删除master节点\n    \n    redis-cli --cluster del-node 192.168.142.132:6387 fb51d858020dd29dd39aecac3593b9317d7cd091 \n    ",charsets:{cjk:!0}},{title:"DockerFile",frontmatter:{title:"DockerFile",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/17d707/",categories:["docker"],tags:[null]},regularPath:"/08.docker/05.DockerFile.html",relativePath:"08.docker/05.DockerFile.md",key:"v-1a06a0e3",path:"/pages/17d707/",headers:[{level:2,title:"格式",slug:"格式",normalizedTitle:"格式",charIndex:17},{level:2,title:"保留字",slug:"保留字",normalizedTitle:"保留字",charIndex:52}],headersStr:"格式 保留字",content:'# DockerFile\n\n\n# 格式\n\n必须以FROM指令开始，一行以#符号开始，将忽略该行\n\n\n# 保留字\n\n 1.  ENV：设置环境变量\n     \n     FROM busybox\n     ENV FOO=/bar\n     WORKDIR ${FOO}   # WORKDIR /bar\n     ADD . $FOO       # ADD . /bar\n     COPY \\$FOO /quux # COPY $FOO /quux\n     \n\n 2.  FROM：指定一个基础镜像作为模板，必须在文件中第一条指令\n\n 3.  MAINTAINER：作者\n\n 4.  RUN：在build时会执行的命令，可用shell格式\n\n 5.  EXPOSE：指定容器暴漏的端口\n\n 6.  WORKDIR：工作目录，进入容器时的默认路径\n\n 7.  USER：指定该镜像以哪种身份的用户运行，默认为ROOT\n\n 8.  ADD：向镜像中添加文件，支持url\n     \n     存在以下两种方式\n     \n     ADD [--chown=<user>:<group>] <src>... <dest>\n     ADD [--chown=<user>:<group>] ["<src>",... "<dest>"]\n     \n\n 9.  COPY：将文件拷贝到镜像中\n     \n     COPY [--chown=<user>:<group>] <src>... <dest>\n     COPY [--chown=<user>:<group>] ["<src>",... "<dest>"]\n     \n\n 10. VOLUME：添加容器卷\n\n 11. CMD：容器启动后执行命令，会被docker run 后的命令覆盖\n\n 12. ENTRYPOINT：和CMD命令作用相似，不会被docker run后的命令覆盖\n     \n     ENTRYPOINT和CMD一起使用时，CMD的内容将作为参数传递给ENTRYPOINT\n\n例：生成一个包含jdk的镜像\n\nFROM ubuntu\nMAINTAINER nanami<ciallomino@gmail.com>\n\nENV MYPATH /usr/local\nWORKDIR $MYPATH\n\nRUN mkdir /usr/local/java\n\nRUN apt update\nRUN apt install -y nano\nRUN apt install -y net-tools\n\nADD openjdk-17.0.2_linux-x64_bin.tar.gz /usr/local/java\n\nENV JAVA_HOME /usr/local/java/jdk-17.0.2\nENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$CLASSPATH\nENV PATH $JAVA_HOME/bin:$PATH\n\nEXPOSE 80\n\n\nbuild:\n\ndocker build -t myos:1.0 .\n',normalizedContent:'# dockerfile\n\n\n# 格式\n\n必须以from指令开始，一行以#符号开始，将忽略该行\n\n\n# 保留字\n\n 1.  env：设置环境变量\n     \n     from busybox\n     env foo=/bar\n     workdir ${foo}   # workdir /bar\n     add . $foo       # add . /bar\n     copy \\$foo /quux # copy $foo /quux\n     \n\n 2.  from：指定一个基础镜像作为模板，必须在文件中第一条指令\n\n 3.  maintainer：作者\n\n 4.  run：在build时会执行的命令，可用shell格式\n\n 5.  expose：指定容器暴漏的端口\n\n 6.  workdir：工作目录，进入容器时的默认路径\n\n 7.  user：指定该镜像以哪种身份的用户运行，默认为root\n\n 8.  add：向镜像中添加文件，支持url\n     \n     存在以下两种方式\n     \n     add [--chown=<user>:<group>] <src>... <dest>\n     add [--chown=<user>:<group>] ["<src>",... "<dest>"]\n     \n\n 9.  copy：将文件拷贝到镜像中\n     \n     copy [--chown=<user>:<group>] <src>... <dest>\n     copy [--chown=<user>:<group>] ["<src>",... "<dest>"]\n     \n\n 10. volume：添加容器卷\n\n 11. cmd：容器启动后执行命令，会被docker run 后的命令覆盖\n\n 12. entrypoint：和cmd命令作用相似，不会被docker run后的命令覆盖\n     \n     entrypoint和cmd一起使用时，cmd的内容将作为参数传递给entrypoint\n\n例：生成一个包含jdk的镜像\n\nfrom ubuntu\nmaintainer nanami<ciallomino@gmail.com>\n\nenv mypath /usr/local\nworkdir $mypath\n\nrun mkdir /usr/local/java\n\nrun apt update\nrun apt install -y nano\nrun apt install -y net-tools\n\nadd openjdk-17.0.2_linux-x64_bin.tar.gz /usr/local/java\n\nenv java_home /usr/local/java/jdk-17.0.2\nenv classpath $java_home/lib/dt.jar:$java_home/lib/tools.jar:$classpath\nenv path $java_home/bin:$path\n\nexpose 80\n\n\nbuild:\n\ndocker build -t myos:1.0 .\n',charsets:{cjk:!0}},{title:"资源编排",frontmatter:{title:"资源编排",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/ec9bd7/",categories:["k8s"],tags:[null]},regularPath:"/09.k8s/03.%E8%B5%84%E6%BA%90%E7%BC%96%E6%8E%92.html",relativePath:"09.k8s/03.资源编排.md",key:"v-3a0bf3ea",path:"/pages/ec9bd7/",headersStr:null,content:"# 资源编排\n\n 1. 生成yaml文件\n\nkubectl create deployment web --image=nginx -o yaml --dry-run\n\n\n 2. 获取yaml文件\n    \n    获取已经部署的pod的yaml\n\nkubectl get deploy nginx -o yaml\n\n\n例：\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  creationTimestamp: null\n  labels:\n    app: web\n  name: web\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: web\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: web\n    spec:\n      containers:\n      - image: nginx\n        name: nginx\n        resources: {}\nstatus: {}\n\n\nkubectl create -f test.yml\n",normalizedContent:"# 资源编排\n\n 1. 生成yaml文件\n\nkubectl create deployment web --image=nginx -o yaml --dry-run\n\n\n 2. 获取yaml文件\n    \n    获取已经部署的pod的yaml\n\nkubectl get deploy nginx -o yaml\n\n\n例：\n\napiversion: apps/v1\nkind: deployment\nmetadata:\n  creationtimestamp: null\n  labels:\n    app: web\n  name: web\nspec:\n  replicas: 1\n  selector:\n    matchlabels:\n      app: web\n  strategy: {}\n  template:\n    metadata:\n      creationtimestamp: null\n      labels:\n        app: web\n    spec:\n      containers:\n      - image: nginx\n        name: nginx\n        resources: {}\nstatus: {}\n\n\nkubectl create -f test.yml\n",charsets:{cjk:!0}},{title:"安装部署",frontmatter:{title:"安装部署",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/566d32/",categories:["k8s"],tags:[null]},regularPath:"/09.k8s/02.%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2.html",relativePath:"09.k8s/02.安装部署.md",key:"v-0eeea534",path:"/pages/566d32/",headers:[{level:2,title:"kubeadm",slug:"kubeadm",normalizedTitle:"kubeadm",charIndex:11},{level:3,title:"准备",slug:"准备",normalizedTitle:"准备",charIndex:23},{level:3,title:"安装Docker,kubeadm,kubelet",slug:"安装docker-kubeadm-kubelet",normalizedTitle:"安装docker,kubeadm,kubelet",charIndex:650},{level:3,title:"部署kubernetes Master",slug:"部署kubernetes-master",normalizedTitle:"部署kubernetes master",charIndex:1705},{level:3,title:"加入kubernetes Node",slug:"加入kubernetes-node",normalizedTitle:"加入kubernetes node",charIndex:2286},{level:3,title:"安装pod网络插件",slug:"安装pod网络插件",normalizedTitle:"安装pod网络插件",charIndex:2592},{level:2,title:"测试kubernetes集群",slug:"测试kubernetes集群",normalizedTitle:"测试kubernetes集群",charIndex:2746}],headersStr:"kubeadm 准备 安装Docker,kubeadm,kubelet 部署kubernetes Master 加入kubernetes Node 安装pod网络插件 测试kubernetes集群",content:'# 安装部署\n\n\n# kubeadm\n\n\n# 准备\n\n# 关闭防火墙\nsystemctl stop firewalld\nsystemctl disabled firewalld\n# ubuntu\nufw disable\n\n# 关闭SeLinux\nsed -i \'s/enforcing/disabled/\' /etc/selinux/config #永久关闭\nsetenforce 0 #临时\n\n# 关闭swap\nswapoff -a #临时\nsed -ri \'s/.*swap.*/#&/\' /etc/fstab #永久\n\n# 设置主机名\nhostnamectl set-hostname <hostname> \n\n#master中添加hosts\ncat >> /etc/hosts << EOF\n192.168.142.141 k8smaster\n192.168.142.142 k8snode1\n192.168.142.143 k8snode2\nEOF\n\n# 将桥接的流量传递到iptables链\ncat >> /etc/sysctl.d/k8s.conf << EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system\n\n# 时间同步\napt install netdata -y\nnetdata time.windows.com\n\n\n\n\n# 安装Docker,kubeadm,kubelet\n\n * 安装Docker\n\n * 安装 kubeadm,kubelet,kubectl\n   \n   # 官方\n   sudo apt-get update\n   sudo apt-get install -y apt-transport-https ca-certificates curl\n   sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg\n   echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n   sudo apt-get update\n   sudo apt-get install -y kubelet kubeadm kubectl\n   sudo apt-mark hold kubelet kubeadm kubectl\n   \n   \n   # 阿里镜像\n   apt-get update && apt-get install -y apt-transport-https\n   curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - \n   cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\n   deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\n   EOF\n   apt-get update\n   apt-get install -y kubelet kubeadm kubectl\n   apt-mark hold kubelet kubeadm kubectl\n   \n   \n   \n   开机自启\n   \n   systemctl enable kubelet\n   \n\n\n# 部署kubernetes Master\n\nkubelet 服务的从1.22开始更改为systemd,和docker的驱动不一致，将导致启动失败\n\n修改docker daemon.json\n\ncat /etc/docker/daemon.json \n{\n  "exec-opts": [\n    "native.cgroupdriver=systemd"\n  ]\n}\n\n\n在master上执行\n\nkubeadm init \\\n  --apiserver-advertise-address=192.168.142.141 \\\n  --image-repository registry.aliyuncs.com/google_containers \\\n  --kubernetes-version v1.23.6 \\\n  --service-cidr=10.96.0.0/12 \\\n  --pod-network-cidr=10.244.0.0/16 \n\n\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n\nkubectl get nodes\n\n\n\n\n\n# 加入kubernetes Node\n\n执行在init时生成的命令\n\n\n\n在node中执行\n\nkubeadm join 192.168.142.141:6443 --token 9hm9ba.8t3b3709c0j73b8a \\\n        --discovery-token-ca-cert-hash sha256:009b6141bfce9ae82dd83fdf8408a3812765d8cbb82dc6915e14dacbca185134\n\n\n如果在init 后没有记下或者失效，执行以下命令重新生成\n\nkubeadm token create --print-join-command\n\n\n\n\n\n# 安装pod网络插件\n\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\nkubectl get pods -n kube-system\n\n\n\n\n\n# 测试kubernetes集群\n\n#创建pod\nkubectl create deployment nginx --image=nginx \n#暴漏端口\nkubectl expose deployment nginx --port=80 --type=NodePort\n\nkubectl get pods,svc\n',normalizedContent:'# 安装部署\n\n\n# kubeadm\n\n\n# 准备\n\n# 关闭防火墙\nsystemctl stop firewalld\nsystemctl disabled firewalld\n# ubuntu\nufw disable\n\n# 关闭selinux\nsed -i \'s/enforcing/disabled/\' /etc/selinux/config #永久关闭\nsetenforce 0 #临时\n\n# 关闭swap\nswapoff -a #临时\nsed -ri \'s/.*swap.*/#&/\' /etc/fstab #永久\n\n# 设置主机名\nhostnamectl set-hostname <hostname> \n\n#master中添加hosts\ncat >> /etc/hosts << eof\n192.168.142.141 k8smaster\n192.168.142.142 k8snode1\n192.168.142.143 k8snode2\neof\n\n# 将桥接的流量传递到iptables链\ncat >> /etc/sysctl.d/k8s.conf << eof\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\neof\nsysctl --system\n\n# 时间同步\napt install netdata -y\nnetdata time.windows.com\n\n\n\n\n# 安装docker,kubeadm,kubelet\n\n * 安装docker\n\n * 安装 kubeadm,kubelet,kubectl\n   \n   # 官方\n   sudo apt-get update\n   sudo apt-get install -y apt-transport-https ca-certificates curl\n   sudo curl -fsslo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg\n   echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n   sudo apt-get update\n   sudo apt-get install -y kubelet kubeadm kubectl\n   sudo apt-mark hold kubelet kubeadm kubectl\n   \n   \n   # 阿里镜像\n   apt-get update && apt-get install -y apt-transport-https\n   curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - \n   cat <<eof >/etc/apt/sources.list.d/kubernetes.list\n   deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\n   eof\n   apt-get update\n   apt-get install -y kubelet kubeadm kubectl\n   apt-mark hold kubelet kubeadm kubectl\n   \n   \n   \n   开机自启\n   \n   systemctl enable kubelet\n   \n\n\n# 部署kubernetes master\n\nkubelet 服务的从1.22开始更改为systemd,和docker的驱动不一致，将导致启动失败\n\n修改docker daemon.json\n\ncat /etc/docker/daemon.json \n{\n  "exec-opts": [\n    "native.cgroupdriver=systemd"\n  ]\n}\n\n\n在master上执行\n\nkubeadm init \\\n  --apiserver-advertise-address=192.168.142.141 \\\n  --image-repository registry.aliyuncs.com/google_containers \\\n  --kubernetes-version v1.23.6 \\\n  --service-cidr=10.96.0.0/12 \\\n  --pod-network-cidr=10.244.0.0/16 \n\n\nmkdir -p $home/.kube\nsudo cp -i /etc/kubernetes/admin.conf $home/.kube/config\nsudo chown $(id -u):$(id -g) $home/.kube/config\n\n\nkubectl get nodes\n\n\n\n\n\n# 加入kubernetes node\n\n执行在init时生成的命令\n\n\n\n在node中执行\n\nkubeadm join 192.168.142.141:6443 --token 9hm9ba.8t3b3709c0j73b8a \\\n        --discovery-token-ca-cert-hash sha256:009b6141bfce9ae82dd83fdf8408a3812765d8cbb82dc6915e14dacbca185134\n\n\n如果在init 后没有记下或者失效，执行以下命令重新生成\n\nkubeadm token create --print-join-command\n\n\n\n\n\n# 安装pod网络插件\n\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/documentation/kube-flannel.yml\nkubectl get pods -n kube-system\n\n\n\n\n\n# 测试kubernetes集群\n\n#创建pod\nkubectl create deployment nginx --image=nginx \n#暴漏端口\nkubectl expose deployment nginx --port=80 --type=nodeport\n\nkubectl get pods,svc\n',charsets:{cjk:!0}},{title:"docker compose",frontmatter:{title:"docker compose",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/d0fb24/",categories:["docker"],tags:[null]},regularPath:"/08.docker/07.docker%20compose.html",relativePath:"08.docker/07.docker compose.md",key:"v-81d0fc34",path:"/pages/d0fb24/",headers:[{level:2,title:"v2版本安装",slug:"v2版本安装",normalizedTitle:"v2版本安装",charIndex:22},{level:2,title:"v1版本安装",slug:"v1版本安装",normalizedTitle:"v1版本安装",charIndex:355},{level:2,title:"快速使用",slug:"快速使用",normalizedTitle:"快速使用",charIndex:556},{level:2,title:"结构",slug:"结构",normalizedTitle:"结构",charIndex:1132},{level:2,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:1314},{level:2,title:"yaml文件属性",slug:"yaml文件属性",normalizedTitle:"yaml文件属性",charIndex:1984}],headersStr:"v2版本安装 v1版本安装 快速使用 结构 常用命令 yaml文件属性",content:'[toc]\n\n\n# compose\n\n\n# v2版本安装\n\nv2版本的compose加入了docker-cli，执行命令时不需要加-，如：\n\n * v1：docker-compose up\n * v2：docker compose up\n\nwget https://github.com/docker/compose/releases/download/v2.4.1/docker-compose-linux-x86_64\ncp docker-compose-linux-x86_64 /usr/local/lib/docker/cli-plugins/docker-compose\nchmod +x /usr/local/lib/docker/cli-plugins/docker-compose\n\n\n\n# v1版本安装\n\nsudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n\n\n\n# 快速使用\n\n 1. 打包项目获得jar包\n\n 2. 在jar包路径上新建DockerFile文件\n    \n    FROM java:8\n    VOLUME /tmp\n    ADD docker-demo-0.0.1-SNAPSHOT.jar app.jar\n    RUN bash -c \'touch /app.jar\'\n    EXPOSE 9000\n    ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","app.jar"]\n    \n\n 3. 在jar包路径上创建compose.yml文件\n    \n    version: \'3.9\' # 表示该 Docker-Compose 文件使用的是 Version 2 file\n    services:\n      docker-demo:  # 指定服务名称\n        build: .  # 指定 Dockerfile 所在路径\n        ports:    # 指定端口映射\n          - "9000:8761"\n    \n\n 4. 在compose.yml所在路径上执行命令\n    \n    docker compose up -d #后台启动\n    \n\n\n# 结构\n\n * Docker Compose 将所管理的容器分为三层，分别是工程（project）、服务（service）、容器（container）\n\n * Docker Compose 运行目录下的所有文件（docker-compose.yml）组成一个工程,一个工程包含多个服务，每个服务中定义了容器运行的镜像、参数、依赖，一个服务可包括多个容器实例\n\n\n# 常用命令\n\n 1.  ps：列出正在运行的容器\n     \n     docker compose ps\n     \n\n 2.  logs：查看服务日志输出\n     \n     docker compose logs\t\n     \n\n 3.  port：显示服务绑定的端口\n     \n     docker-compose port eureka 8761\n     \n\n 4.  build：构建服务\n     \n     docker compose build\n     \n\n 5.  start：启动指定服务\n     \n     docker compose start eureka\t\n     \n\n 6.  stop：停止指定服务\n     \n     docker compose stop eureka\t\n     \n\n 7.  rm：删除指定服务的容器\n     \n     docker compose rm eureka\n     \n\n 8.  up：构建、启动容器\n     \n     docker compose up\n     docker compose up -d #后台启动运行\n     \n\n 9.  kill：通过发送 SIGKILL 信号来停止指定服务的容器\n     \n     docker compose kill eureka\n     \n\n 10. run：在一个服务上执行一个命令\n     \n     docker compose run web bash\n     \n\n\n# yaml文件属性\n\n * version：指定yaml文件版本，与docker版本对应\n\n * services：多个容器的集合\n\n * build：配置构建时，Compose 会利用它自动构建镜像，该值可以是一个路径，也可以是一个对象，用于指定 Dockerfile 参数\n   \n   build: ./dir\n   ---------------\n   build:\n       context: ./dir\n       dockerfile: Dockerfile\n       args:\n           buildno: 1\n   \n\n * command：覆盖容器启动后默认执行的命令\n\n * dns：配置dns服务器，可以是一个值或者列表\n   \n   dns: 8.8.8.8\n   ------------\n   dns:\n       - 8.8.8.8\n       - 9.9.9.9\n   \n\n * dns_search：DNS 搜索域，可以是一个值或列表\n   \n   dns_search: example.com\n   ------------------------\n   dns_search:\n       - dc1.example.com\n       - dc2.example.com\n   \n\n * environment：环境变量配置，可以用数组或字典两种方式\n   \n   environment:\n       RACK_ENV: development\n       SHOW: \'ture\'\n   -------------------------\n   environment:\n       - RACK_ENV=development\n       - SHOW=ture\n   \n\n * env_file：从文件中获取环境变量，可以指定一个文件路径或路径列表，其优先级低于 environment 指定的环境变量\n   \n   env_file: .env\n   ---------------\n   env_file:\n       - ./common.env\n   \n\n * expose：暴露端口，只将端口暴露给连接的服务，而不暴露给主机\n   \n   expose:\n       - "3000"\n       - "8000"\n   \n\n * image：指定服务所使用的镜像\n   \n   image: java\n   \n\n * network_mode：设置网络模式\n   \n   network_mode: "bridge"\n   network_mode: "host"\n   network_mode: "none"\n   network_mode: "service:[service name]"\n   network_mode: "container:[container name/id]"\n   \n\n * ports：对外暴露的端口定义，和 expose 对应\n   \n   ports:   # 暴露端口信息  - "宿主机端口:容器暴露端口"\n   \t- "8763:8763"\n   \t- "8763:8763"\n   \n\n * links：将指定容器连接到当前连接，可以设置别名，避免ip方式导致的容器重启动态改变的无法连接情况\n   \n   links:    # 指定服务名称:别名 \n       - docker-compose-eureka-server:compose-eureka\n   \n\n * volumes：卷挂载路径\n   \n   volumes:\n     - /lib\n     - /var\n   \n\n * logs：日志输出信息\n   \n   --no-color          单色输出，不显示其他颜.\n   -f, --follow        跟踪日志输出，就是可以实时查看日志\n   -t, --timestamps    显示时间戳\n   --tail              从日志的结尾显示，--tail=200\n   ',normalizedContent:'[toc]\n\n\n# compose\n\n\n# v2版本安装\n\nv2版本的compose加入了docker-cli，执行命令时不需要加-，如：\n\n * v1：docker-compose up\n * v2：docker compose up\n\nwget https://github.com/docker/compose/releases/download/v2.4.1/docker-compose-linux-x86_64\ncp docker-compose-linux-x86_64 /usr/local/lib/docker/cli-plugins/docker-compose\nchmod +x /usr/local/lib/docker/cli-plugins/docker-compose\n\n\n\n# v1版本安装\n\nsudo curl -l https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n\n\n\n# 快速使用\n\n 1. 打包项目获得jar包\n\n 2. 在jar包路径上新建dockerfile文件\n    \n    from java:8\n    volume /tmp\n    add docker-demo-0.0.1-snapshot.jar app.jar\n    run bash -c \'touch /app.jar\'\n    expose 9000\n    entrypoint ["java","-djava.security.egd=file:/dev/./urandom","-jar","app.jar"]\n    \n\n 3. 在jar包路径上创建compose.yml文件\n    \n    version: \'3.9\' # 表示该 docker-compose 文件使用的是 version 2 file\n    services:\n      docker-demo:  # 指定服务名称\n        build: .  # 指定 dockerfile 所在路径\n        ports:    # 指定端口映射\n          - "9000:8761"\n    \n\n 4. 在compose.yml所在路径上执行命令\n    \n    docker compose up -d #后台启动\n    \n\n\n# 结构\n\n * docker compose 将所管理的容器分为三层，分别是工程（project）、服务（service）、容器（container）\n\n * docker compose 运行目录下的所有文件（docker-compose.yml）组成一个工程,一个工程包含多个服务，每个服务中定义了容器运行的镜像、参数、依赖，一个服务可包括多个容器实例\n\n\n# 常用命令\n\n 1.  ps：列出正在运行的容器\n     \n     docker compose ps\n     \n\n 2.  logs：查看服务日志输出\n     \n     docker compose logs\t\n     \n\n 3.  port：显示服务绑定的端口\n     \n     docker-compose port eureka 8761\n     \n\n 4.  build：构建服务\n     \n     docker compose build\n     \n\n 5.  start：启动指定服务\n     \n     docker compose start eureka\t\n     \n\n 6.  stop：停止指定服务\n     \n     docker compose stop eureka\t\n     \n\n 7.  rm：删除指定服务的容器\n     \n     docker compose rm eureka\n     \n\n 8.  up：构建、启动容器\n     \n     docker compose up\n     docker compose up -d #后台启动运行\n     \n\n 9.  kill：通过发送 sigkill 信号来停止指定服务的容器\n     \n     docker compose kill eureka\n     \n\n 10. run：在一个服务上执行一个命令\n     \n     docker compose run web bash\n     \n\n\n# yaml文件属性\n\n * version：指定yaml文件版本，与docker版本对应\n\n * services：多个容器的集合\n\n * build：配置构建时，compose 会利用它自动构建镜像，该值可以是一个路径，也可以是一个对象，用于指定 dockerfile 参数\n   \n   build: ./dir\n   ---------------\n   build:\n       context: ./dir\n       dockerfile: dockerfile\n       args:\n           buildno: 1\n   \n\n * command：覆盖容器启动后默认执行的命令\n\n * dns：配置dns服务器，可以是一个值或者列表\n   \n   dns: 8.8.8.8\n   ------------\n   dns:\n       - 8.8.8.8\n       - 9.9.9.9\n   \n\n * dns_search：dns 搜索域，可以是一个值或列表\n   \n   dns_search: example.com\n   ------------------------\n   dns_search:\n       - dc1.example.com\n       - dc2.example.com\n   \n\n * environment：环境变量配置，可以用数组或字典两种方式\n   \n   environment:\n       rack_env: development\n       show: \'ture\'\n   -------------------------\n   environment:\n       - rack_env=development\n       - show=ture\n   \n\n * env_file：从文件中获取环境变量，可以指定一个文件路径或路径列表，其优先级低于 environment 指定的环境变量\n   \n   env_file: .env\n   ---------------\n   env_file:\n       - ./common.env\n   \n\n * expose：暴露端口，只将端口暴露给连接的服务，而不暴露给主机\n   \n   expose:\n       - "3000"\n       - "8000"\n   \n\n * image：指定服务所使用的镜像\n   \n   image: java\n   \n\n * network_mode：设置网络模式\n   \n   network_mode: "bridge"\n   network_mode: "host"\n   network_mode: "none"\n   network_mode: "service:[service name]"\n   network_mode: "container:[container name/id]"\n   \n\n * ports：对外暴露的端口定义，和 expose 对应\n   \n   ports:   # 暴露端口信息  - "宿主机端口:容器暴露端口"\n   \t- "8763:8763"\n   \t- "8763:8763"\n   \n\n * links：将指定容器连接到当前连接，可以设置别名，避免ip方式导致的容器重启动态改变的无法连接情况\n   \n   links:    # 指定服务名称:别名 \n       - docker-compose-eureka-server:compose-eureka\n   \n\n * volumes：卷挂载路径\n   \n   volumes:\n     - /lib\n     - /var\n   \n\n * logs：日志输出信息\n   \n   --no-color          单色输出，不显示其他颜.\n   -f, --follow        跟踪日志输出，就是可以实时查看日志\n   -t, --timestamps    显示时间戳\n   --tail              从日志的结尾显示，--tail=200\n   ',charsets:{cjk:!0}},{title:"controller",frontmatter:{title:"controller",date:"2022-04-25T21:30:18.000Z",permalink:"/pages/892142/",categories:["k8s"],tags:[null]},regularPath:"/09.k8s/05.controller.html",relativePath:"09.k8s/05.controller.md",key:"v-69e94cdb",path:"/pages/892142/",headers:[{level:2,title:"deployment",slug:"deployment",normalizedTitle:"deployment",charIndex:117}],headersStr:"deployment",content:'[toc]\n\n\n# Controller\n\n * 在集群上管理和运行容器的对象\n * pod是通过Controller来实现各种操作的，如弹性伸缩、滚动升级\n * pod和Controller通过label来建立联系\n * \n\n\n# deployment\n\n * 部署无状态应用\n * 管理pod和Replicaset副本\n * 部署，滚动升级等功能\n * 常用于部署web服务/微服务\n\n# 创建deployment\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n\n\n\n * 该配置文件将创建一个叫nginx-deployment的deployment，并由deployment创建3个Pod副本（由 replicas 字段标明）\n\n * selector 字段定义 Deployment 如何查找要管理的 Pods\n\n * template 字段包含以下子字段：\n   \n   * Pod 被使用 .metadata.labels 字段打上 app: nginx 标签。\n   * Pod 模板规约（即 .template.spec 字段）指示 Pods 运行一个 nginx 容器， 该容器运行版本为 1.14.2 的 nginx Docker Hub镜像。\n   * 创建一个容器并使用 .spec.template.spec.containers[0].name 字段将其命名为 nginx\n\n 1. 通过以下命令创建deployment\n\nkubectl apply -f nginx-deployment.yml\n\n\n 2. 运行 kubectl get deployments 检查 Deployment 是否已创建\n\nkubectl get deployments\nNAME               READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   0/3     0            0           1s\n\n\n 3. 要查看 Deployment 上线状态，运行 kubectl rollout status deployment/nginx-deployment\n\nkubectl rollout status deployment/nginx-deployment\nWaiting for rollout to finish: 2 out of 3 new replicas have been updated...\ndeployment "nginx-deployment" successfully rolled out\n\n\n 4. 几秒钟后再次运行 kubectl get deployments\n\nkubectl get deployments\nNAME               READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   3/3     3            3           18s\n\n\n 5. 要查看 Deployment 创建的 ReplicaSet（rs），运行 kubectl get rs\n\nNAME                          DESIRED   CURRENT   READY   AGE\nnginx-deployment-75675f5897   3         3         3       18s\n\n\n 6. 要查看每个 Pod 自动生成的标签，运行 kubectl get pods --show-labels。\n\nkubectl get pods --show-labels\nNAME                                READY     STATUS    RESTARTS   AGE       LABELS\nnginx-deployment-75675f5897-7ci7o   1/1       Running   0          18s       app=nginx,pod-template-hash=3123191453\nnginx-deployment-75675f5897-kzszj   1/1       Running   0          18s       app=nginx,pod-template-hash=3123191453\nnginx-deployment-75675f5897-qqcnn   1/1       Running   0          18s       app=nginx,pod-template-hash=3123191453\n\n\n# 更新deployment\n\n> 仅当 Deployment Pod 模板（即 .spec.template）发生改变时，例如模板的标签或容器镜像被更新， 才会触发 Deployment 上线。其他更新（如对 Deployment 执行扩缩容的操作）不会触发上线动作。\n\n 1. 先更新 nginx Pod 以使用 nginx:1.16.1 镜像，而不是 nginx:1.14.2 镜像。\n    \n    kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.16.1\n    \n    \n    等效于\n    \n    kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1\n    \n    \n    输出：\n    \n    deployment/nginx-deployment image updated\n    \n\n 2. 查看上线状态，运行\n    \n    kubectl rollout status deployment/nginx-deployment\n    \n    \n    输出：\n    \n    Waiting for rollout to finish: 2 out of 3 new replicas have been updated...\n    \n    \n    或\n    \n    deployment "nginx-deployment" successfully rolled out\n    \n\n# 回滚Deployment\n\n> 当回滚到较早的修订版本时，只有 Deployment 的 Pod 模板部分会被回滚。\n\n因为出错导致上线进程停止，如设置nginx版本时，将nginx:1.16.1设置为nginx:1.161：\n\nkubectl set image deployment/nginx-deployment nginx=nginx:1.161 --record=true\n\n\n检查上线状态：\n\nkubectl rollout status deployment/nginx-deployment\n\n\n输出：\n\nWaiting for rollout to finish: 1 out of 3 new replicas have been updated...\n\n\n检查 Deployment 上线历史\n\n 1. 检查 Deployment 修订历史\n\nkubectl rollout history deployment/nginx-deployment\n\n\n输出：\n\ndeployments "nginx-deployment"\nREVISION    CHANGE-CAUSE\n1           kubectl apply --filename=https://k8s.io/examples/controllers/nginx-deployment.yaml\n2           kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1\n3           kubectl set image deployment/nginx-deployment nginx=nginx:1.161\n\n\n 2. 查看修订历史的详细信息\n    \n    kubectl rollout history deployment/nginx-deployment --revision=2\n    \n\n**回滚到之前的修订版本 **\n\n 1. 撤消当前上线并回滚到以前的修订版本\n    \n    kubectl rollout undo deployment/nginx-deployment\n    \n    \n    回滚到指定版本\n    \n    kubectl rollout undo deployment/nginx-deployment --to-revision=2\n    \n    \n    回滚命令详细信息：kubectl rollout\n\n 2. 检查回滚是否成功以及 Deployment 是否正在运行：\n    \n    kubectl get deployment nginx-deployment\n    \n\n 3. 获取 Deployment 描述信息\n    \n    kubectl describe deployment nginx-deployment\n    \n    \n    输出：\n    \n    Name:                   nginx-deployment\n    Namespace:              default\n    CreationTimestamp:      Sun, 02 Sep 2018 18:17:55 -0500\n    Labels:                 app=nginx\n    Annotations:            deployment.kubernetes.io/revision=4\n                            kubernetes.io/change-cause=kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1\n    Selector:               app=nginx\n    Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable\n    StrategyType:           RollingUpdate\n    MinReadySeconds:        0\n    RollingUpdateStrategy:  25% max unavailable, 25% max surge\n    Pod Template:\n      Labels:  app=nginx\n      Containers:\n       nginx:\n        Image:        nginx:1.16.1\n        Port:         80/TCP\n        Host Port:    0/TCP\n        Environment:  <none>\n        Mounts:       <none>\n      Volumes:        <none>\n    Conditions:\n      Type           Status  Reason\n      ----           ------  ------\n      Available      True    MinimumReplicasAvailable\n      Progressing    True    NewReplicaSetAvailable\n    OldReplicaSets:  <none>\n    NewReplicaSet:   nginx-deployment-c4747d96c (3/3 replicas created)\n    Events:\n      Type    Reason              Age   From                   Message\n      ----    ------              ----  ----                   -------\n      Normal  ScalingReplicaSet   12m   deployment-controller  Scaled up replica set nginx-deployment-75675f5897 to 3\n      Normal  ScalingReplicaSet   11m   deployment-controller  Scaled up replica set nginx-deployment-c4747d96c to 1\n      Normal  ScalingReplicaSet   11m   deployment-controller  Scaled down replica set nginx-deployment-75675f5897 to 2\n      Normal  ScalingReplicaSet   11m   deployment-controller  Scaled up replica set nginx-deployment-c4747d96c to 2\n      Normal  ScalingReplicaSet   11m   deployment-controller  Scaled down replica set nginx-deployment-75675f5897 to 1\n      Normal  ScalingReplicaSet   11m   deployment-controller  Scaled up replica set nginx-deployment-c4747d96c to 3\n      Normal  ScalingReplicaSet   11m   deployment-controller  Scaled down replica set nginx-deployment-75675f5897 to 0\n      Normal  ScalingReplicaSet   11m   deployment-controller  Scaled up replica set nginx-deployment-595696685f to 1\n      Normal  DeploymentRollback  15s   deployment-controller  Rolled back deployment "nginx-deployment" to revision 2\n      Normal  ScalingReplicaSet   15s   deployment-controller  Scaled down replica set nginx-deployment-595696685f to 0\n    \n\n# 缩放Deployment\n\n执行\n\nkubectl scale deployment/nginx-deployment --replicas=10\n\n\n如果启用了Pod的水平自动缩放，可以为Deplyment设置自动缩放器，并基于现有 Pod 的 CPU 利用率选择要运行的 Pod 个数下限和上限。\n\nkubectl autoscale deployment/nginx-deployment --min=10 --max=15 --cpu-percent=80\n\n\nDeployment官方文档',normalizedContent:'[toc]\n\n\n# controller\n\n * 在集群上管理和运行容器的对象\n * pod是通过controller来实现各种操作的，如弹性伸缩、滚动升级\n * pod和controller通过label来建立联系\n * \n\n\n# deployment\n\n * 部署无状态应用\n * 管理pod和replicaset副本\n * 部署，滚动升级等功能\n * 常用于部署web服务/微服务\n\n# 创建deployment\n\napiversion: apps/v1\nkind: deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchlabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerport: 80\n\n\n\n * 该配置文件将创建一个叫nginx-deployment的deployment，并由deployment创建3个pod副本（由 replicas 字段标明）\n\n * selector 字段定义 deployment 如何查找要管理的 pods\n\n * template 字段包含以下子字段：\n   \n   * pod 被使用 .metadata.labels 字段打上 app: nginx 标签。\n   * pod 模板规约（即 .template.spec 字段）指示 pods 运行一个 nginx 容器， 该容器运行版本为 1.14.2 的 nginx docker hub镜像。\n   * 创建一个容器并使用 .spec.template.spec.containers[0].name 字段将其命名为 nginx\n\n 1. 通过以下命令创建deployment\n\nkubectl apply -f nginx-deployment.yml\n\n\n 2. 运行 kubectl get deployments 检查 deployment 是否已创建\n\nkubectl get deployments\nname               ready   up-to-date   available   age\nnginx-deployment   0/3     0            0           1s\n\n\n 3. 要查看 deployment 上线状态，运行 kubectl rollout status deployment/nginx-deployment\n\nkubectl rollout status deployment/nginx-deployment\nwaiting for rollout to finish: 2 out of 3 new replicas have been updated...\ndeployment "nginx-deployment" successfully rolled out\n\n\n 4. 几秒钟后再次运行 kubectl get deployments\n\nkubectl get deployments\nname               ready   up-to-date   available   age\nnginx-deployment   3/3     3            3           18s\n\n\n 5. 要查看 deployment 创建的 replicaset（rs），运行 kubectl get rs\n\nname                          desired   current   ready   age\nnginx-deployment-75675f5897   3         3         3       18s\n\n\n 6. 要查看每个 pod 自动生成的标签，运行 kubectl get pods --show-labels。\n\nkubectl get pods --show-labels\nname                                ready     status    restarts   age       labels\nnginx-deployment-75675f5897-7ci7o   1/1       running   0          18s       app=nginx,pod-template-hash=3123191453\nnginx-deployment-75675f5897-kzszj   1/1       running   0          18s       app=nginx,pod-template-hash=3123191453\nnginx-deployment-75675f5897-qqcnn   1/1       running   0          18s       app=nginx,pod-template-hash=3123191453\n\n\n# 更新deployment\n\n> 仅当 deployment pod 模板（即 .spec.template）发生改变时，例如模板的标签或容器镜像被更新， 才会触发 deployment 上线。其他更新（如对 deployment 执行扩缩容的操作）不会触发上线动作。\n\n 1. 先更新 nginx pod 以使用 nginx:1.16.1 镜像，而不是 nginx:1.14.2 镜像。\n    \n    kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.16.1\n    \n    \n    等效于\n    \n    kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1\n    \n    \n    输出：\n    \n    deployment/nginx-deployment image updated\n    \n\n 2. 查看上线状态，运行\n    \n    kubectl rollout status deployment/nginx-deployment\n    \n    \n    输出：\n    \n    waiting for rollout to finish: 2 out of 3 new replicas have been updated...\n    \n    \n    或\n    \n    deployment "nginx-deployment" successfully rolled out\n    \n\n# 回滚deployment\n\n> 当回滚到较早的修订版本时，只有 deployment 的 pod 模板部分会被回滚。\n\n因为出错导致上线进程停止，如设置nginx版本时，将nginx:1.16.1设置为nginx:1.161：\n\nkubectl set image deployment/nginx-deployment nginx=nginx:1.161 --record=true\n\n\n检查上线状态：\n\nkubectl rollout status deployment/nginx-deployment\n\n\n输出：\n\nwaiting for rollout to finish: 1 out of 3 new replicas have been updated...\n\n\n检查 deployment 上线历史\n\n 1. 检查 deployment 修订历史\n\nkubectl rollout history deployment/nginx-deployment\n\n\n输出：\n\ndeployments "nginx-deployment"\nrevision    change-cause\n1           kubectl apply --filename=https://k8s.io/examples/controllers/nginx-deployment.yaml\n2           kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1\n3           kubectl set image deployment/nginx-deployment nginx=nginx:1.161\n\n\n 2. 查看修订历史的详细信息\n    \n    kubectl rollout history deployment/nginx-deployment --revision=2\n    \n\n**回滚到之前的修订版本 **\n\n 1. 撤消当前上线并回滚到以前的修订版本\n    \n    kubectl rollout undo deployment/nginx-deployment\n    \n    \n    回滚到指定版本\n    \n    kubectl rollout undo deployment/nginx-deployment --to-revision=2\n    \n    \n    回滚命令详细信息：kubectl rollout\n\n 2. 检查回滚是否成功以及 deployment 是否正在运行：\n    \n    kubectl get deployment nginx-deployment\n    \n\n 3. 获取 deployment 描述信息\n    \n    kubectl describe deployment nginx-deployment\n    \n    \n    输出：\n    \n    name:                   nginx-deployment\n    namespace:              default\n    creationtimestamp:      sun, 02 sep 2018 18:17:55 -0500\n    labels:                 app=nginx\n    annotations:            deployment.kubernetes.io/revision=4\n                            kubernetes.io/change-cause=kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1\n    selector:               app=nginx\n    replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable\n    strategytype:           rollingupdate\n    minreadyseconds:        0\n    rollingupdatestrategy:  25% max unavailable, 25% max surge\n    pod template:\n      labels:  app=nginx\n      containers:\n       nginx:\n        image:        nginx:1.16.1\n        port:         80/tcp\n        host port:    0/tcp\n        environment:  <none>\n        mounts:       <none>\n      volumes:        <none>\n    conditions:\n      type           status  reason\n      ----           ------  ------\n      available      true    minimumreplicasavailable\n      progressing    true    newreplicasetavailable\n    oldreplicasets:  <none>\n    newreplicaset:   nginx-deployment-c4747d96c (3/3 replicas created)\n    events:\n      type    reason              age   from                   message\n      ----    ------              ----  ----                   -------\n      normal  scalingreplicaset   12m   deployment-controller  scaled up replica set nginx-deployment-75675f5897 to 3\n      normal  scalingreplicaset   11m   deployment-controller  scaled up replica set nginx-deployment-c4747d96c to 1\n      normal  scalingreplicaset   11m   deployment-controller  scaled down replica set nginx-deployment-75675f5897 to 2\n      normal  scalingreplicaset   11m   deployment-controller  scaled up replica set nginx-deployment-c4747d96c to 2\n      normal  scalingreplicaset   11m   deployment-controller  scaled down replica set nginx-deployment-75675f5897 to 1\n      normal  scalingreplicaset   11m   deployment-controller  scaled up replica set nginx-deployment-c4747d96c to 3\n      normal  scalingreplicaset   11m   deployment-controller  scaled down replica set nginx-deployment-75675f5897 to 0\n      normal  scalingreplicaset   11m   deployment-controller  scaled up replica set nginx-deployment-595696685f to 1\n      normal  deploymentrollback  15s   deployment-controller  rolled back deployment "nginx-deployment" to revision 2\n      normal  scalingreplicaset   15s   deployment-controller  scaled down replica set nginx-deployment-595696685f to 0\n    \n\n# 缩放deployment\n\n执行\n\nkubectl scale deployment/nginx-deployment --replicas=10\n\n\n如果启用了pod的水平自动缩放，可以为deplyment设置自动缩放器，并基于现有 pod 的 cpu 利用率选择要运行的 pod 个数下限和上限。\n\nkubectl autoscale deployment/nginx-deployment --min=10 --max=15 --cpu-percent=80\n\n\ndeployment官方文档',charsets:{cjk:!0}},{title:"pod",frontmatter:{title:"pod",date:"2022-04-25T21:30:18.000Z",permalink:"/pages/bb4118/",categories:["k8s"],tags:[null]},regularPath:"/09.k8s/04.pod.html",relativePath:"09.k8s/04.pod.md",key:"v-22703206",path:"/pages/bb4118/",headers:[{level:2,title:"镜像拉取",slug:"镜像拉取",normalizedTitle:"镜像拉取",charIndex:18},{level:2,title:"资源限制",slug:"资源限制",normalizedTitle:"资源限制",charIndex:291},{level:2,title:"重启策略",slug:"重启策略",normalizedTitle:"重启策略",charIndex:937},{level:2,title:"生命周期",slug:"生命周期",normalizedTitle:"生命周期",charIndex:1144},{level:2,title:"容器探针",slug:"容器探针",normalizedTitle:"容器探针",charIndex:1708},{level:3,title:"检查机制",slug:"检查机制",normalizedTitle:"检查机制",charIndex:1717},{level:3,title:"探测结果",slug:"探测结果",normalizedTitle:"探测结果",charIndex:2111},{level:3,title:"探测类型",slug:"探测类型",normalizedTitle:"探测类型",charIndex:2188},{level:2,title:"调度",slug:"调度",normalizedTitle:"调度",charIndex:1254},{level:3,title:"kube-scheduler",slug:"kube-scheduler",normalizedTitle:"kube-scheduler",charIndex:2805},{level:3,title:"kube-scheduler 调度流程",slug:"kube-scheduler-调度流程",normalizedTitle:"kube-scheduler 调度流程",charIndex:3214},{level:2,title:"为pod指派节点",slug:"为pod指派节点",normalizedTitle:"为pod指派节点",charIndex:3586},{level:3,title:"节点标签",slug:"节点标签",normalizedTitle:"节点标签",charIndex:3625},{level:3,title:"亲和性与反亲和性",slug:"亲和性与反亲和性",normalizedTitle:"亲和性与反亲和性",charIndex:4358},{level:3,title:"nodename",slug:"nodename",normalizedTitle:"nodename",charIndex:3655},{level:2,title:"污点和容忍度",slug:"污点和容忍度",normalizedTitle:"污点和容忍度",charIndex:7520}],headersStr:"镜像拉取 资源限制 重启策略 生命周期 容器探针 检查机制 探测结果 探测类型 调度 kube-scheduler kube-scheduler 调度流程 为pod指派节点 节点标签 亲和性与反亲和性 nodename 污点和容忍度",content:'[toc]\n\n\n# pod\n\n\n# 镜像拉取\n\n * 镜像拉取策略\n   \n   * IfNotPresent\n     \n     默认值，镜像不在宿主机上时才拉取\n   \n   * Always\n     \n     每次创建pod都会重新拉取镜像\n   \n   * Never\n     \n     pod永远不会主动拉取镜像\n   \n   spec:\n         containers:\n         - image: nginx\n           name: nginx\n           imagePullPolicy: Always\n   \n\n\n# 资源限制\n\n> CPU 资源单位 : CPU 资源的约束和请求以 “cpu” 为单位。 在 Kubernetes 中，一个 CPU 等于1 个物理 CPU 核 或者 一个虚拟核， 取决于节点是一台物理主机还是运行在某物理主机上的虚拟机。\n> \n> memory 的约束和请求以字节为单位。\n\n * request\n * limit\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: frontend\nspec:\n  containers:\n  - name: app\n    image: images.my-company.example/app:v4\n    resources:\n      requests:\n        memory: "64Mi"\n        cpu: "250m"\n      limits:\n        memory: "128Mi"\n        cpu: "500m"\n  - name: log-aggregator\n    image: images.my-company.example/log-aggregator:v6\n    resources:\n      requests:\n        memory: "64Mi"\n        cpu: "250m"\n      limits:\n        memory: "128Mi"\n        cpu: "500m"\n\n\n\n# 重启策略\n\n * Always：默认策略\n   \n   容器终止退出时，总是重启容器\n\n * OnFailure\n   \n   容器异常退出时，重启容器\n\n * Never\n   \n   容器终止退出时，从不重启容器\n\nspec:\n      containers:\n      - image: nginx\n        name: nginx\n      restartPolicy: Never\n\n\n\n# 生命周期\n\n * pod阶段\n\n值           描述\nPending     Pod 已被 Kubernetes 系统接受，但有一个或者多个容器尚未创建亦未运行。此阶段包括等待 Pod\n            被调度的时间和通过网络下载镜像的时间。\nRunning     Pod 已经绑定到了某个节点，Pod 中所有的容器都已被创建。至少有一个容器仍在运行，或者正处于启动或重启状态。\nSucceeded   Pod 中的所有容器都已成功终止，并且不会再重启。\nFailed      Pod 中的所有容器都已终止，并且至少有一个容器是因为失败终止。也就是说，容器以非 0 状态退出或者被系统终止\nUnknown     因为某些原因无法取得 Pod 的状态。这种情况通常是因为与 Pod 所在主机通信失败。\n\n * 容器状态\n   \n   * Waiting\n     \n     容器正在完成启动所需要的操作：拉取镜像、向容器应用 Secret 数据\n   \n   * Running\n     \n     表明容器正在执行状态并且没有问题发生。 如果配置了 postStart 回调，那么该回调已经执行且已完成\n   \n   * Terminated\n     \n     正常结束或者因为某些原因失败\n\n\n# 容器探针\n\n\n# 检查机制\n\n * exec\n   \n   在容器内执行指定命令。如果命令退出时返回码为 0 则认为诊断成功。\n\n * grpc\n   \n   使用 gRPC 执行一个远程过程调用。 目标应该实现 gRPC健康检查。 如果响应的状态是 "SERVING"，则认为诊断成功。 gRPC 探针是一个 alpha 特性，只有在启用了 "GRPCContainerProbe" 特性门控时才能使用。\n\n * httpGet\n   \n   对容器的 IP 地址上指定端口和路径执行 HTTP GET 请求。如果响应的状态码大于等于 200 且小于 400，则诊断被认为是成功的。\n\n * tcpSocket\n   \n   对容器的 IP 地址上的指定端口执行 TCP 检查。如果端口打开，则诊断被认为是成功的。 如果远程系统（容器）在打开连接后立即将其关闭，也算作是健康的\n   \n   \n   # 探测结果\n\n * Success：容器通过了诊断\n\n * Failure：容器未通过诊断\n\n * Unknown：诊断失败，因此不会采取任何行动\n\n\n# 探测类型\n\n * livenessProbe\n   \n   指示容器是否正在运行。如果存活态探测失败，则 kubelet 会杀死容器， 并且容器将根据其重启策略决定未来。如果容器不提供存活探针， 则默认状态为 Success。\n\n * readinessProbe\n   \n   指示容器是否准备好为请求提供服务。如果就绪态探测失败， 端点控制器将从与 Pod 匹配的所有服务的端点列表中删除该 Pod 的 IP 地址。 初始延迟之前的就绪态的状态值默认为 Failure。 如果容器不提供就绪态探针，则默认状态为 Success。\n\n * startupProbe\n   \n   指示容器中的应用是否已经启动。如果提供了启动探针，则所有其他探针都会被 禁用，直到此探针成功为止。如果启动探测失败，kubelet 将杀死容器，而容器依其 重启策略进行重启。 如果容器没有提供启动探测，则默认状态为 Success。\n\n\n# 调度\n\n> 在 Kubernetes 中，调度 是指将 Pod 放置到合适的 Node 上，然后对应 Node 上的 Kubelet 才能够运行这些 pod\n\n调度器通过 kubernetes 的监测（Watch）机制来发现集群中新创建且尚未被调度到 Node 上的 Pod。 调度器会将发现的每一个未调度的 Pod 调度到一个合适的 Node 上来运行。 调度器会依据下文的调度原则来做出调度选择。\n\n\n# kube-scheduler\n\nkube-scheduler 是 Kubernetes 集群的默认调度器，对每一个新创建的 Pod 或者是未被调度的 Pod，kube-scheduler 会选择一个最优的 Node 去运行这个 Pod。在一个集群中，满足一个 Pod 调度请求的所有 Node 称之为 可调度节点。 如果没有任何一个 Node 能满足 Pod 的资源请求，那么这个 Pod 将一直停留在 未调度状态直到调度器能够找到合适的 Node。\n\n调度器先在集群中找到一个 Pod 的所有可调度节点，然后根据一系列函数对这些可调度节点打分， 选出其中得分最高的 Node 来运行 Pod。之后，调度器将这个调度决定通知给 kube-apiserver，这个过程叫做 绑定\n\n在做调度决定时需要考虑的因素包括：单独和整体的资源请求、硬件/软件/策略限制、 亲和以及反亲和要求、数据局域性、负载间的干扰等等\n\n\n# kube-scheduler 调度流程\n\nkube-scheduler 给一个 pod 做调度选择分为两步：\n\n * 过滤\n * 打分\n\n过滤阶段会将所有满足 Pod 调度需求的 Node 选出来。\n\n打分阶段，调度器会为 Pod 从所有可调度节点中选取一个最合适的 Node。 根据当前启用的打分规则，调度器会给每一个可调度节点进行打分。\n\n可以通过调度策略和调度配置来配置调度器的过滤和打分行为：\n\n 1. 调度策略 允许配置过滤的 断言(Predicates) 和打分的 优先级(Priorities)\n 2. 调度配置 允许配置实现不同调度阶段的插件， 包括：QueueSort, Filter, Score, Bind, Reserve, Permit 等等。 也可以配置 kube-scheduler 运行不同的配置文件。\n\n\n# 为pod指派节点\n\n> 可以约束一个 Pod 只能在特定的节点上运行\n\n * 节点标签和节点标签选择符\n\n * 亲和性和反亲和性\n\n * nodename\n\n\n# 节点标签\n\n通过手动给节点添加标签，以使创建的pod调度到所选择的节点上\n\n# 给节点添加标签\n\n 1. 添加标签\n    \n    kubectl label nodes <your-node-name> disktype=ssd\n    \n    \n    \n\n 2. 验证\n    \n    kubectl get nodes --show-labels\n    \n    \n    \n    \n    \n\n# 创建一个调度到特定节点上的pod\n\n此配置文件描述了一个拥有节点选择器(nodeselector)disktype=ssd的Pod，该Pod将被调度到存在``disktype=ssd`的节点上\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  labels:\n    env: test\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    imagePullPolicy: IfNotPresent\n  nodeSelector:\n    disktype: ssd\n\n\n\n 1. 使用该配置文件创建一个pod\n    \n    kubectl create -f nodeselector.yaml\n    \n\n 2. 验证 pod 是不是运行在所选择的节点上\n    \n    kubectl get pods --output=wide\n    \n\n----------------------------------------\n\n\n# 亲和性与反亲和性\n\n> nodeSelector 提供了一种最简单的方法来将 Pod 约束到具有特定标签的节点上。 亲和性和反亲和性扩展了你可以定义的约束类型\n\n选择亲和性与反亲和性的理由：\n\n * 亲和性、反亲和性语言的表达能力更强。nodeSelector 只能选择拥有所有指定标签的节点。 亲和性、反亲和性为你提供对选择逻辑的更强控制能力。\n * 你可以标明某规则是“软需求”或者“偏好”，这样调度器在无法找到匹配节点时仍然调度该 Pod。\n * 你可以使用节点上（或其他拓扑域中）运行的其他 Pod 的标签来实施调度约束， 而不是只能使用节点本身的标签。这个能力让你能够定义规则允许哪些 Pod 可以被放置在一起。\n\n# 节点亲和性\n\n节点亲和性概念上类似于 nodeSelector， 它可以根据节点上的标签来约束 Pod 可以调度到哪些节点上。\n\n节点亲和性有两种：\n\n * requiredDuringSchedulingIgnoredDuringExecution： 调度器只有在规则被满足的时候才能执行调度。此功能类似于 nodeSelector， 但其语法表达能力更强。\n * preferredDuringSchedulingIgnoredDuringExecution： 调度器会尝试寻找满足对应规则的节点。如果找不到匹配的节点，调度器仍然会调度该 Pod。\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: with-node-affinity\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: kubernetes.io/os\n            operator: In\n            values:\n            - linux\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        preference:\n          matchExpressions:\n          - key: another-node-label-key\n            operator: In\n            values:\n            - another-node-label-value\n  containers:\n  - name: with-node-affinity\n    image: k8s.gcr.io/pause:2.0\n\n\n在上面的配置中：\n\n * 节点必须包含键名为 kubernetes.io/os 的标签，并且其取值为 linux\n * 节点 最好 具有键名为 another-node-label-key 且取值为 another-node-label-value 的标签\n\n可以使用 operator 字段来为 Kubernetes 设置在解释规则时要使用的逻辑操作符。 可以使用 In、NotIn、Exists、DoesNotExist、Gt 和 Lt 之一作为操作符。\n\nNotIn 和 DoesNotExist 可用来实现节点反亲和性行为\n\n * 如果同时指定了 nodeSelector 和 nodeAffinity，两者 必须都要满足， 才能将 Pod 调度到候选节点上。\n\n * 如果指定了多个与 nodeAffinity 类型关联的 nodeSelectorTerms， 只要其中一个 nodeSelectorTerms 满足的话，Pod 就可以被调度到节点上。\n\n * 如果指定了多个与同一 nodeSelectorTerms 关联的 matchExpressions， 则只有当所有 matchExpressions 都满足时 Pod 才可以被调度到节点上。\n\n# 节点亲和性权重\n\n> 可以为 preferredDuringSchedulingIgnoredDuringExecution 亲和性类型的每个实例设置 weight 字段，其取值范围是 1 到 100。 当调度器找到能够满足 Pod 的其他调度请求的节点时，调度器会遍历节点满足的所有的偏好性规则， 并将对应表达式的 weight 值加和。最终的加和值会添加到该节点的其他优先级函数的评分之上。 在调度器为 Pod 作出调度决定时，总分最高的节点的优先级也最高。\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: with-affinity-anti-affinity\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: kubernetes.io/os\n            operator: In\n            values:\n            - linux\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        preference:\n          matchExpressions:\n          - key: label-1\n            operator: In\n            values:\n            - key-1\n      - weight: 50\n        preference:\n          matchExpressions:\n          - key: label-2\n            operator: In\n            values:\n            - key-2\n  containers:\n  - name: with-node-affinity\n    image: k8s.gcr.io/pause:2.0\n\n\n如果存在两个候选节点，都满足 requiredDuringSchedulingIgnoredDuringExecution 规则， 其中一个节点具有标签 label-1:key-1，另一个节点具有标签 label-2:key-2， 调度器会考察各个节点的 weight 取值，并将该权重值添加到节点的其他得分值之上。\n\n----------------------------------------\n\n\n# nodename\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n  nodeName: kube-01\n\n\n上面的 Pod 只能运行在节点 kube-01 之上。\n\n----------------------------------------\n\n\n# 污点和容忍度\n\n> 节点亲和性 是 Pod 的一种属性，它使 Pod 被吸引到一类特定的节点 （这可能出于一种偏好，也可能是硬性要求）。 污点（Taint）则相反——它使节点能够排斥一类特定的 Pod。\n> \n> 容忍度（Toleration）是应用于 Pod 上的，允许（但并不要求）Pod 调度到带有与之匹配的污点的节点上。\n> \n> 污点和容忍度（Toleration）相互配合，可以用来避免 Pod 被分配到不合适的节点上。 每个节点上都可以应用一个或多个污点，这表示对于那些不能容忍这些污点的 Pod，是不会被该节点接受的。\n\n使用\n\nkubectl taint nodes node1 key1=value1:NoSchedule\n\n\n给节点添加一个污点\n\n给pod设置容忍度\n\ntolerations:\n- key: "key1"\n  operator: "Equal"\n  value: "value1"\n  effect: "NoSchedule"\n\n\ntolerations:\n- key: "key1"\n  operator: "Exists"\n  effect: "NoSchedule"\n\n\n这两个容忍度都与上面的污点相匹配，pod拥有任意一个既能够被分配给node1\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  labels:\n    env: test\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    imagePullPolicy: IfNotPresent\n  tolerations:\n  - key: "example-key"\n    operator: "Exists"\n    effect: "NoSchedule"\n\n\n\noperator 的默认值是 Equal\n\n一个容忍度和一个污点相“匹配”是指它们有一样的键名和效果，并且：\n\n * operator 是 Exists （此时容忍度不能指定 value）\n * operator 是 Equal ，它们的 value 应该相等',normalizedContent:'[toc]\n\n\n# pod\n\n\n# 镜像拉取\n\n * 镜像拉取策略\n   \n   * ifnotpresent\n     \n     默认值，镜像不在宿主机上时才拉取\n   \n   * always\n     \n     每次创建pod都会重新拉取镜像\n   \n   * never\n     \n     pod永远不会主动拉取镜像\n   \n   spec:\n         containers:\n         - image: nginx\n           name: nginx\n           imagepullpolicy: always\n   \n\n\n# 资源限制\n\n> cpu 资源单位 : cpu 资源的约束和请求以 “cpu” 为单位。 在 kubernetes 中，一个 cpu 等于1 个物理 cpu 核 或者 一个虚拟核， 取决于节点是一台物理主机还是运行在某物理主机上的虚拟机。\n> \n> memory 的约束和请求以字节为单位。\n\n * request\n * limit\n\napiversion: v1\nkind: pod\nmetadata:\n  name: frontend\nspec:\n  containers:\n  - name: app\n    image: images.my-company.example/app:v4\n    resources:\n      requests:\n        memory: "64mi"\n        cpu: "250m"\n      limits:\n        memory: "128mi"\n        cpu: "500m"\n  - name: log-aggregator\n    image: images.my-company.example/log-aggregator:v6\n    resources:\n      requests:\n        memory: "64mi"\n        cpu: "250m"\n      limits:\n        memory: "128mi"\n        cpu: "500m"\n\n\n\n# 重启策略\n\n * always：默认策略\n   \n   容器终止退出时，总是重启容器\n\n * onfailure\n   \n   容器异常退出时，重启容器\n\n * never\n   \n   容器终止退出时，从不重启容器\n\nspec:\n      containers:\n      - image: nginx\n        name: nginx\n      restartpolicy: never\n\n\n\n# 生命周期\n\n * pod阶段\n\n值           描述\npending     pod 已被 kubernetes 系统接受，但有一个或者多个容器尚未创建亦未运行。此阶段包括等待 pod\n            被调度的时间和通过网络下载镜像的时间。\nrunning     pod 已经绑定到了某个节点，pod 中所有的容器都已被创建。至少有一个容器仍在运行，或者正处于启动或重启状态。\nsucceeded   pod 中的所有容器都已成功终止，并且不会再重启。\nfailed      pod 中的所有容器都已终止，并且至少有一个容器是因为失败终止。也就是说，容器以非 0 状态退出或者被系统终止\nunknown     因为某些原因无法取得 pod 的状态。这种情况通常是因为与 pod 所在主机通信失败。\n\n * 容器状态\n   \n   * waiting\n     \n     容器正在完成启动所需要的操作：拉取镜像、向容器应用 secret 数据\n   \n   * running\n     \n     表明容器正在执行状态并且没有问题发生。 如果配置了 poststart 回调，那么该回调已经执行且已完成\n   \n   * terminated\n     \n     正常结束或者因为某些原因失败\n\n\n# 容器探针\n\n\n# 检查机制\n\n * exec\n   \n   在容器内执行指定命令。如果命令退出时返回码为 0 则认为诊断成功。\n\n * grpc\n   \n   使用 grpc 执行一个远程过程调用。 目标应该实现 grpc健康检查。 如果响应的状态是 "serving"，则认为诊断成功。 grpc 探针是一个 alpha 特性，只有在启用了 "grpccontainerprobe" 特性门控时才能使用。\n\n * httpget\n   \n   对容器的 ip 地址上指定端口和路径执行 http get 请求。如果响应的状态码大于等于 200 且小于 400，则诊断被认为是成功的。\n\n * tcpsocket\n   \n   对容器的 ip 地址上的指定端口执行 tcp 检查。如果端口打开，则诊断被认为是成功的。 如果远程系统（容器）在打开连接后立即将其关闭，也算作是健康的\n   \n   \n   # 探测结果\n\n * success：容器通过了诊断\n\n * failure：容器未通过诊断\n\n * unknown：诊断失败，因此不会采取任何行动\n\n\n# 探测类型\n\n * livenessprobe\n   \n   指示容器是否正在运行。如果存活态探测失败，则 kubelet 会杀死容器， 并且容器将根据其重启策略决定未来。如果容器不提供存活探针， 则默认状态为 success。\n\n * readinessprobe\n   \n   指示容器是否准备好为请求提供服务。如果就绪态探测失败， 端点控制器将从与 pod 匹配的所有服务的端点列表中删除该 pod 的 ip 地址。 初始延迟之前的就绪态的状态值默认为 failure。 如果容器不提供就绪态探针，则默认状态为 success。\n\n * startupprobe\n   \n   指示容器中的应用是否已经启动。如果提供了启动探针，则所有其他探针都会被 禁用，直到此探针成功为止。如果启动探测失败，kubelet 将杀死容器，而容器依其 重启策略进行重启。 如果容器没有提供启动探测，则默认状态为 success。\n\n\n# 调度\n\n> 在 kubernetes 中，调度 是指将 pod 放置到合适的 node 上，然后对应 node 上的 kubelet 才能够运行这些 pod\n\n调度器通过 kubernetes 的监测（watch）机制来发现集群中新创建且尚未被调度到 node 上的 pod。 调度器会将发现的每一个未调度的 pod 调度到一个合适的 node 上来运行。 调度器会依据下文的调度原则来做出调度选择。\n\n\n# kube-scheduler\n\nkube-scheduler 是 kubernetes 集群的默认调度器，对每一个新创建的 pod 或者是未被调度的 pod，kube-scheduler 会选择一个最优的 node 去运行这个 pod。在一个集群中，满足一个 pod 调度请求的所有 node 称之为 可调度节点。 如果没有任何一个 node 能满足 pod 的资源请求，那么这个 pod 将一直停留在 未调度状态直到调度器能够找到合适的 node。\n\n调度器先在集群中找到一个 pod 的所有可调度节点，然后根据一系列函数对这些可调度节点打分， 选出其中得分最高的 node 来运行 pod。之后，调度器将这个调度决定通知给 kube-apiserver，这个过程叫做 绑定\n\n在做调度决定时需要考虑的因素包括：单独和整体的资源请求、硬件/软件/策略限制、 亲和以及反亲和要求、数据局域性、负载间的干扰等等\n\n\n# kube-scheduler 调度流程\n\nkube-scheduler 给一个 pod 做调度选择分为两步：\n\n * 过滤\n * 打分\n\n过滤阶段会将所有满足 pod 调度需求的 node 选出来。\n\n打分阶段，调度器会为 pod 从所有可调度节点中选取一个最合适的 node。 根据当前启用的打分规则，调度器会给每一个可调度节点进行打分。\n\n可以通过调度策略和调度配置来配置调度器的过滤和打分行为：\n\n 1. 调度策略 允许配置过滤的 断言(predicates) 和打分的 优先级(priorities)\n 2. 调度配置 允许配置实现不同调度阶段的插件， 包括：queuesort, filter, score, bind, reserve, permit 等等。 也可以配置 kube-scheduler 运行不同的配置文件。\n\n\n# 为pod指派节点\n\n> 可以约束一个 pod 只能在特定的节点上运行\n\n * 节点标签和节点标签选择符\n\n * 亲和性和反亲和性\n\n * nodename\n\n\n# 节点标签\n\n通过手动给节点添加标签，以使创建的pod调度到所选择的节点上\n\n# 给节点添加标签\n\n 1. 添加标签\n    \n    kubectl label nodes <your-node-name> disktype=ssd\n    \n    \n    \n\n 2. 验证\n    \n    kubectl get nodes --show-labels\n    \n    \n    \n    \n    \n\n# 创建一个调度到特定节点上的pod\n\n此配置文件描述了一个拥有节点选择器(nodeselector)disktype=ssd的pod，该pod将被调度到存在``disktype=ssd`的节点上\n\napiversion: v1\nkind: pod\nmetadata:\n  name: nginx\n  labels:\n    env: test\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    imagepullpolicy: ifnotpresent\n  nodeselector:\n    disktype: ssd\n\n\n\n 1. 使用该配置文件创建一个pod\n    \n    kubectl create -f nodeselector.yaml\n    \n\n 2. 验证 pod 是不是运行在所选择的节点上\n    \n    kubectl get pods --output=wide\n    \n\n----------------------------------------\n\n\n# 亲和性与反亲和性\n\n> nodeselector 提供了一种最简单的方法来将 pod 约束到具有特定标签的节点上。 亲和性和反亲和性扩展了你可以定义的约束类型\n\n选择亲和性与反亲和性的理由：\n\n * 亲和性、反亲和性语言的表达能力更强。nodeselector 只能选择拥有所有指定标签的节点。 亲和性、反亲和性为你提供对选择逻辑的更强控制能力。\n * 你可以标明某规则是“软需求”或者“偏好”，这样调度器在无法找到匹配节点时仍然调度该 pod。\n * 你可以使用节点上（或其他拓扑域中）运行的其他 pod 的标签来实施调度约束， 而不是只能使用节点本身的标签。这个能力让你能够定义规则允许哪些 pod 可以被放置在一起。\n\n# 节点亲和性\n\n节点亲和性概念上类似于 nodeselector， 它可以根据节点上的标签来约束 pod 可以调度到哪些节点上。\n\n节点亲和性有两种：\n\n * requiredduringschedulingignoredduringexecution： 调度器只有在规则被满足的时候才能执行调度。此功能类似于 nodeselector， 但其语法表达能力更强。\n * preferredduringschedulingignoredduringexecution： 调度器会尝试寻找满足对应规则的节点。如果找不到匹配的节点，调度器仍然会调度该 pod。\n\napiversion: v1\nkind: pod\nmetadata:\n  name: with-node-affinity\nspec:\n  affinity:\n    nodeaffinity:\n      requiredduringschedulingignoredduringexecution:\n        nodeselectorterms:\n        - matchexpressions:\n          - key: kubernetes.io/os\n            operator: in\n            values:\n            - linux\n      preferredduringschedulingignoredduringexecution:\n      - weight: 1\n        preference:\n          matchexpressions:\n          - key: another-node-label-key\n            operator: in\n            values:\n            - another-node-label-value\n  containers:\n  - name: with-node-affinity\n    image: k8s.gcr.io/pause:2.0\n\n\n在上面的配置中：\n\n * 节点必须包含键名为 kubernetes.io/os 的标签，并且其取值为 linux\n * 节点 最好 具有键名为 another-node-label-key 且取值为 another-node-label-value 的标签\n\n可以使用 operator 字段来为 kubernetes 设置在解释规则时要使用的逻辑操作符。 可以使用 in、notin、exists、doesnotexist、gt 和 lt 之一作为操作符。\n\nnotin 和 doesnotexist 可用来实现节点反亲和性行为\n\n * 如果同时指定了 nodeselector 和 nodeaffinity，两者 必须都要满足， 才能将 pod 调度到候选节点上。\n\n * 如果指定了多个与 nodeaffinity 类型关联的 nodeselectorterms， 只要其中一个 nodeselectorterms 满足的话，pod 就可以被调度到节点上。\n\n * 如果指定了多个与同一 nodeselectorterms 关联的 matchexpressions， 则只有当所有 matchexpressions 都满足时 pod 才可以被调度到节点上。\n\n# 节点亲和性权重\n\n> 可以为 preferredduringschedulingignoredduringexecution 亲和性类型的每个实例设置 weight 字段，其取值范围是 1 到 100。 当调度器找到能够满足 pod 的其他调度请求的节点时，调度器会遍历节点满足的所有的偏好性规则， 并将对应表达式的 weight 值加和。最终的加和值会添加到该节点的其他优先级函数的评分之上。 在调度器为 pod 作出调度决定时，总分最高的节点的优先级也最高。\n\napiversion: v1\nkind: pod\nmetadata:\n  name: with-affinity-anti-affinity\nspec:\n  affinity:\n    nodeaffinity:\n      requiredduringschedulingignoredduringexecution:\n        nodeselectorterms:\n        - matchexpressions:\n          - key: kubernetes.io/os\n            operator: in\n            values:\n            - linux\n      preferredduringschedulingignoredduringexecution:\n      - weight: 1\n        preference:\n          matchexpressions:\n          - key: label-1\n            operator: in\n            values:\n            - key-1\n      - weight: 50\n        preference:\n          matchexpressions:\n          - key: label-2\n            operator: in\n            values:\n            - key-2\n  containers:\n  - name: with-node-affinity\n    image: k8s.gcr.io/pause:2.0\n\n\n如果存在两个候选节点，都满足 requiredduringschedulingignoredduringexecution 规则， 其中一个节点具有标签 label-1:key-1，另一个节点具有标签 label-2:key-2， 调度器会考察各个节点的 weight 取值，并将该权重值添加到节点的其他得分值之上。\n\n----------------------------------------\n\n\n# nodename\n\napiversion: v1\nkind: pod\nmetadata:\n  name: nginx\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n  nodename: kube-01\n\n\n上面的 pod 只能运行在节点 kube-01 之上。\n\n----------------------------------------\n\n\n# 污点和容忍度\n\n> 节点亲和性 是 pod 的一种属性，它使 pod 被吸引到一类特定的节点 （这可能出于一种偏好，也可能是硬性要求）。 污点（taint）则相反——它使节点能够排斥一类特定的 pod。\n> \n> 容忍度（toleration）是应用于 pod 上的，允许（但并不要求）pod 调度到带有与之匹配的污点的节点上。\n> \n> 污点和容忍度（toleration）相互配合，可以用来避免 pod 被分配到不合适的节点上。 每个节点上都可以应用一个或多个污点，这表示对于那些不能容忍这些污点的 pod，是不会被该节点接受的。\n\n使用\n\nkubectl taint nodes node1 key1=value1:noschedule\n\n\n给节点添加一个污点\n\n给pod设置容忍度\n\ntolerations:\n- key: "key1"\n  operator: "equal"\n  value: "value1"\n  effect: "noschedule"\n\n\ntolerations:\n- key: "key1"\n  operator: "exists"\n  effect: "noschedule"\n\n\n这两个容忍度都与上面的污点相匹配，pod拥有任意一个既能够被分配给node1\n\napiversion: v1\nkind: pod\nmetadata:\n  name: nginx\n  labels:\n    env: test\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    imagepullpolicy: ifnotpresent\n  tolerations:\n  - key: "example-key"\n    operator: "exists"\n    effect: "noschedule"\n\n\n\noperator 的默认值是 equal\n\n一个容忍度和一个污点相“匹配”是指它们有一样的键名和效果，并且：\n\n * operator 是 exists （此时容忍度不能指定 value）\n * operator 是 equal ，它们的 value 应该相等',charsets:{cjk:!0}},{title:"Service",frontmatter:{title:"Service",date:"2022-04-25T21:30:18.000Z",permalink:"/pages/48d106/",categories:["k8s"],tags:[null]},regularPath:"/09.k8s/06.Service.html",relativePath:"09.k8s/06.Service.md",key:"v-223c1c3d",path:"/pages/48d106/",headers:[{level:2,title:"定义Service",slug:"定义service",normalizedTitle:"定义service",charIndex:225},{level:2,title:"Service的四种类型",slug:"service的四种类型",normalizedTitle:"service的四种类型",charIndex:599},{level:3,title:"ClusterIP",slug:"clusterip",normalizedTitle:"clusterip",charIndex:616},{level:3,title:"NodePort",slug:"nodeport",normalizedTitle:"nodeport",charIndex:911},{level:3,title:"LoadBalancer",slug:"loadbalancer",normalizedTitle:"loadbalancer",charIndex:1350},{level:3,title:"ExternalName",slug:"externalname",normalizedTitle:"externalname",charIndex:1748}],headersStr:"定义Service Service的四种类型 ClusterIP NodePort LoadBalancer ExternalName",content:'# Service\n\nkubernetes的pod是存在生命周期的，可以被创建或销毁，如果使用Deployment，则可以动态创建或销毁Pod。\n\n每个Pod都拥有自己的IP地址，但是在升级、扩容缩容等操作后，pod的ip地址将发生变化。\n\nk8s的Service是一种抽象，它定义了一组Pod的逻辑集合，和访问他们的策略 —— 通常称为微服务\n\nservice和pod通过label-selector关联在一起，类似于Controller\n\n\n# 定义Service\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: MyApp\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 9376\n\n\n上面的配置文件创建了一个名为my-service的Service，它会将请求代理到使用 TCP 端口 9376，并且具有标签 "app=MyApp" 的 Pod 上。Kubernetes 为该服务分配一个 IP 地址（有时称为 "集群IP"），该 IP 地址由服务代理使用\n\nspec.ports.port为集群内访问使用的端口，spec.port.targetPort为pod及容器暴露出的端口\n\n\n# Service的四种类型\n\n\n# ClusterIP\n\n通过集群的内部 IP 暴露服务，选择该值时服务只能够在集群内部访问。 这也是默认的 ServiceType\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: MyApp\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 9376\n\n\n该配置没有显式的生命serviceType，即为ClusterIP，创建该服务时，Kubernetes将为其分配一个虚拟IP\n\n\n\n\n# NodePort\n\n通过每个节点上的 IP 和静态端口（NodePort）暴露服务。 NodePort 服务会路由到自动创建的 ClusterIP 服务。 通过请求 <节点 IP>:<节点端口>，可以从集群的外部访问一个 NodePort 服务\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  type: NodePort\n  selector:\n    app: MyApp\n  ports:\n      # 默认情况下，为了方便起见，`targetPort` 被设置为与 `port` 字段相同的值。\n    - port: 80\n      targetPort: 80\n      # 可选字段\n      # 默认情况下，为了方便起见，Kubernetes 控制平面会从某个范围内分配一个端口号（默认：30000-32767）\n      nodePort: 30007\n\n\n\n# LoadBalancer\n\n使用云提供商的负载均衡器向外部暴露服务。 外部负载均衡器可以将流量路由到自动创建的 NodePort 服务和 ClusterIP 服务上。\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: MyApp\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 9376\n  clusterIP: 10.0.171.239\n  type: LoadBalancer\nstatus:\n  loadBalancer:\n    ingress:\n      - ip: 192.0.2.127\n\n\n并不是所有的k8s集群都支持loadbalancer，具体需要看云提供商是否支持\n\n\n# ExternalName\n\n通过返回 CNAME 和对应值，可以将服务映射到 externalName 字段的内容（例如，foo.bar.example.com）。 无需创建任何类型代理。\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\n  namespace: prod\nspec:\n  type: ExternalName\n  externalName: my.database.example.com\n',normalizedContent:'# service\n\nkubernetes的pod是存在生命周期的，可以被创建或销毁，如果使用deployment，则可以动态创建或销毁pod。\n\n每个pod都拥有自己的ip地址，但是在升级、扩容缩容等操作后，pod的ip地址将发生变化。\n\nk8s的service是一种抽象，它定义了一组pod的逻辑集合，和访问他们的策略 —— 通常称为微服务\n\nservice和pod通过label-selector关联在一起，类似于controller\n\n\n# 定义service\n\napiversion: v1\nkind: service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: myapp\n  ports:\n    - protocol: tcp\n      port: 80\n      targetport: 9376\n\n\n上面的配置文件创建了一个名为my-service的service，它会将请求代理到使用 tcp 端口 9376，并且具有标签 "app=myapp" 的 pod 上。kubernetes 为该服务分配一个 ip 地址（有时称为 "集群ip"），该 ip 地址由服务代理使用\n\nspec.ports.port为集群内访问使用的端口，spec.port.targetport为pod及容器暴露出的端口\n\n\n# service的四种类型\n\n\n# clusterip\n\n通过集群的内部 ip 暴露服务，选择该值时服务只能够在集群内部访问。 这也是默认的 servicetype\n\napiversion: v1\nkind: service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: myapp\n  ports:\n    - protocol: tcp\n      port: 80\n      targetport: 9376\n\n\n该配置没有显式的生命servicetype，即为clusterip，创建该服务时，kubernetes将为其分配一个虚拟ip\n\n\n\n\n# nodeport\n\n通过每个节点上的 ip 和静态端口（nodeport）暴露服务。 nodeport 服务会路由到自动创建的 clusterip 服务。 通过请求 <节点 ip>:<节点端口>，可以从集群的外部访问一个 nodeport 服务\n\napiversion: v1\nkind: service\nmetadata:\n  name: my-service\nspec:\n  type: nodeport\n  selector:\n    app: myapp\n  ports:\n      # 默认情况下，为了方便起见，`targetport` 被设置为与 `port` 字段相同的值。\n    - port: 80\n      targetport: 80\n      # 可选字段\n      # 默认情况下，为了方便起见，kubernetes 控制平面会从某个范围内分配一个端口号（默认：30000-32767）\n      nodeport: 30007\n\n\n\n# loadbalancer\n\n使用云提供商的负载均衡器向外部暴露服务。 外部负载均衡器可以将流量路由到自动创建的 nodeport 服务和 clusterip 服务上。\n\napiversion: v1\nkind: service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: myapp\n  ports:\n    - protocol: tcp\n      port: 80\n      targetport: 9376\n  clusterip: 10.0.171.239\n  type: loadbalancer\nstatus:\n  loadbalancer:\n    ingress:\n      - ip: 192.0.2.127\n\n\n并不是所有的k8s集群都支持loadbalancer，具体需要看云提供商是否支持\n\n\n# externalname\n\n通过返回 cname 和对应值，可以将服务映射到 externalname 字段的内容（例如，foo.bar.example.com）。 无需创建任何类型代理。\n\napiversion: v1\nkind: service\nmetadata:\n  name: my-service\n  namespace: prod\nspec:\n  type: externalname\n  externalname: my.database.example.com\n',charsets:{cjk:!0}},{title:"Jobs&CronJob",frontmatter:{title:"Jobs&CronJob",date:"2022-04-25T21:30:18.000Z",permalink:"/pages/5ac46f/",categories:["k8s"],tags:[null]},regularPath:"/09.k8s/07.Jobs&CronJob.html",relativePath:"09.k8s/07.Jobs&CronJob.md",key:"v-0d152759",path:"/pages/5ac46f/",headers:[{level:2,title:"Jobs",slug:"jobs",normalizedTitle:"jobs",charIndex:10},{level:2,title:"CronJob",slug:"cronjob",normalizedTitle:"cronjob",charIndex:17},{level:3,title:"Cron语法",slug:"cron语法",normalizedTitle:"cron语法",charIndex:1342}],headersStr:"Jobs CronJob Cron语法",content:'[toc]\n\n\n# Jobs & CronJob\n\n\n# Jobs\n\n> Job 会创建一个或者多个 Pods，并将继续重试 Pods 的执行，直到指定数量的 Pods 成功终止。 随着 Pods 成功结束，Job 跟踪记录成功完成的 Pods 个数。 当数量达到指定的成功个数阈值时，任务（即 Job）结束。 删除 Job 的操作会清除所创建的全部 Pods。 挂起 Job 的操作会删除 Job 的所有活跃 Pod，直到 Job 被再次恢复执行。\n\n示例：计算圆周率\n\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: pi\nspec:\n  template:\n    spec:\n      containers:\n      - name: pi\n        image: perl\n        command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]\n      restartPolicy: Never\n  backoffLimit: 4\n\n\n\n\nkubectl apply -f job.yaml\n\n\n检查Job的状态\n\nkubectl describe jobs/pi\n\n\n\n\n可执行kubectl get pods来查看Job对应的已完成的Pods，可执行以下命令来获取属于某Jobs的所有Pods\n\npods=$(kubectl get pods --selector=job-name=pi --output=jsonpath=\'{.items[*].metadata.name}\')\necho $pods\n\n\n查看其中一个Pod的输出：\n\nkubectl logs $pods\n\n\n\n\n\n# CronJob\n\n> CronJob 创建基于时隔重复调度的 Jobs。\n> \n> CronJob 用于执行周期性的动作，例如备份、报告生成等。 这些任务中的每一个都应该配置为周期性重复的（例如：每天/每周/每月一次）； 可以定义任务开始执行的时间间隔。\n\n示例：每分钟打印出当前时间和问候消息\n\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: hello\nspec:\n  schedule: "* * * * *"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: hello\n            image: busybox:1.28\n            imagePullPolicy: IfNotPresent\n            command:\n            - /bin/sh\n            - -c\n            - date; echo Hello from the Kubernetes cluster\n          restartPolicy: OnFailure\n\n\n\n\n# Cron语法\n\n# ┌───────────── 分钟 (0 - 59)\n# │ ┌───────────── 小时 (0 - 23)\n# │ │ ┌───────────── 月的某天 (1 - 31)\n# │ │ │ ┌───────────── 月份 (1 - 12)\n# │ │ │ │ ┌───────────── 周的某天 (0 - 6)（周日到周一；在某些系统上，7 也是星期日）\n# │ │ │ │ │                          或者是 sun，mon，tue，web，thu，fri，sat\n# │ │ │ │ │\n# │ │ │ │ │\n# * * * * *\n\n\n输入                       描述                  相当于\n@yearly (or @annually)   每年 1 月 1 日的午夜运行一次   0 0 1 1 *\n@monthly                 每月第一天的午夜运行一次        0 0 1 * *\n@weekly                  每周的周日午夜运行一次         0 0 * * 0\n@daily (or @midnight)    每天午夜运行一次            0 0 * * *\n@hourly                  每小时的开始一次            0 * * * *',normalizedContent:'[toc]\n\n\n# jobs & cronjob\n\n\n# jobs\n\n> job 会创建一个或者多个 pods，并将继续重试 pods 的执行，直到指定数量的 pods 成功终止。 随着 pods 成功结束，job 跟踪记录成功完成的 pods 个数。 当数量达到指定的成功个数阈值时，任务（即 job）结束。 删除 job 的操作会清除所创建的全部 pods。 挂起 job 的操作会删除 job 的所有活跃 pod，直到 job 被再次恢复执行。\n\n示例：计算圆周率\n\napiversion: batch/v1\nkind: job\nmetadata:\n  name: pi\nspec:\n  template:\n    spec:\n      containers:\n      - name: pi\n        image: perl\n        command: ["perl",  "-mbignum=bpi", "-wle", "print bpi(2000)"]\n      restartpolicy: never\n  backofflimit: 4\n\n\n\n\nkubectl apply -f job.yaml\n\n\n检查job的状态\n\nkubectl describe jobs/pi\n\n\n\n\n可执行kubectl get pods来查看job对应的已完成的pods，可执行以下命令来获取属于某jobs的所有pods\n\npods=$(kubectl get pods --selector=job-name=pi --output=jsonpath=\'{.items[*].metadata.name}\')\necho $pods\n\n\n查看其中一个pod的输出：\n\nkubectl logs $pods\n\n\n\n\n\n# cronjob\n\n> cronjob 创建基于时隔重复调度的 jobs。\n> \n> cronjob 用于执行周期性的动作，例如备份、报告生成等。 这些任务中的每一个都应该配置为周期性重复的（例如：每天/每周/每月一次）； 可以定义任务开始执行的时间间隔。\n\n示例：每分钟打印出当前时间和问候消息\n\napiversion: batch/v1\nkind: cronjob\nmetadata:\n  name: hello\nspec:\n  schedule: "* * * * *"\n  jobtemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: hello\n            image: busybox:1.28\n            imagepullpolicy: ifnotpresent\n            command:\n            - /bin/sh\n            - -c\n            - date; echo hello from the kubernetes cluster\n          restartpolicy: onfailure\n\n\n\n\n# cron语法\n\n# ┌───────────── 分钟 (0 - 59)\n# │ ┌───────────── 小时 (0 - 23)\n# │ │ ┌───────────── 月的某天 (1 - 31)\n# │ │ │ ┌───────────── 月份 (1 - 12)\n# │ │ │ │ ┌───────────── 周的某天 (0 - 6)（周日到周一；在某些系统上，7 也是星期日）\n# │ │ │ │ │                          或者是 sun，mon，tue，web，thu，fri，sat\n# │ │ │ │ │\n# │ │ │ │ │\n# * * * * *\n\n\n输入                       描述                  相当于\n@yearly (or @annually)   每年 1 月 1 日的午夜运行一次   0 0 1 1 *\n@monthly                 每月第一天的午夜运行一次        0 0 1 * *\n@weekly                  每周的周日午夜运行一次         0 0 * * 0\n@daily (or @midnight)    每天午夜运行一次            0 0 * * *\n@hourly                  每小时的开始一次            0 * * * *',charsets:{cjk:!0}},{title:"其他",frontmatter:{title:"其他",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/777b8e/",categories:["k8s"],tags:[null]},regularPath:"/09.k8s/99.%E5%85%B6%E4%BB%96.html",relativePath:"09.k8s/99.其他.md",key:"v-5cb7a644",path:"/pages/777b8e/",headers:[{level:2,title:"重新k8s初始化",slug:"重新k8s初始化",normalizedTitle:"重新k8s初始化",charIndex:17},{level:2,title:"DNS子域名",slug:"dns子域名",normalizedTitle:"dns子域名",charIndex:319}],headersStr:"重新k8s初始化 DNS子域名",content:"[toc]\n\n\n# 其他\n\n\n# 重新k8s初始化\n\n1、移除所有工作节点\n\nkubectl delete node [name]\n\n\n2、所有工作节点删除工作目录，并重置kubeadm\n\nrm -rf /etc/kubernetes/*\nkubeadm reset\n\n\n3、Master节点删除工作目录，并重置kubeadm\n\nrm -rf /etc/kubernetes/*\nrm -rf ~/.kube/*\nrm -rf /var/lib/etcd/*\n\nrm -rf /var/lib/cni/\n\nrm -fr /etc/cni/net.d\n\nkubeadm reset -f\n\n\n4、重新init kubernetes\n\n\n# DNS子域名\n\n很多资源类型需要可以用作 DNS 子域名的名称。 DNS 子域名的定义可参见 RFC 1123。 这一要求意味着名称必须满足如下规则：\n\n * 不能超过253个字符\n * 只能包含小写字母、数字，以及'-' 和 '.'\n * 须以字母数字开头\n * 须以字母数字结尾",normalizedContent:"[toc]\n\n\n# 其他\n\n\n# 重新k8s初始化\n\n1、移除所有工作节点\n\nkubectl delete node [name]\n\n\n2、所有工作节点删除工作目录，并重置kubeadm\n\nrm -rf /etc/kubernetes/*\nkubeadm reset\n\n\n3、master节点删除工作目录，并重置kubeadm\n\nrm -rf /etc/kubernetes/*\nrm -rf ~/.kube/*\nrm -rf /var/lib/etcd/*\n\nrm -rf /var/lib/cni/\n\nrm -fr /etc/cni/net.d\n\nkubeadm reset -f\n\n\n4、重新init kubernetes\n\n\n# dns子域名\n\n很多资源类型需要可以用作 dns 子域名的名称。 dns 子域名的定义可参见 rfc 1123。 这一要求意味着名称必须满足如下规则：\n\n * 不能超过253个字符\n * 只能包含小写字母、数字，以及'-' 和 '.'\n * 须以字母数字开头\n * 须以字母数字结尾",charsets:{cjk:!0}},{title:"随笔",frontmatter:{title:"随笔",date:"2022-01-27T12:47:47.000Z",permalink:"/pages/bfe5e8/",categories:["other"],tags:[null]},regularPath:"/51.other/01.%E9%9A%8F%E7%AC%94.html",relativePath:"51.other/01.随笔.md",key:"v-68b5e90a",path:"/pages/bfe5e8/",headersStr:null,content:'# 随笔\n\n 1. idea配置\n    \n    -server\n    -Dfile.encoding=utf-8\n    -Xms512m\n    -Xmx1024m\n    -XX:ReservedCodeCacheSize=300m\n    -XX:+UseConcMarkSweepGC\n    -XX:+CMSParallelRemarkEnabled\n    -XX:ConcGCThreads=4\n    -XX:SoftRefLRUPolicyMSPerMB=50\n    -XX:+TieredCompilation\n    -XX:+UseCompressedOops\n    -XX:+AlwaysPreTouch\n    -Dsun.io.useCanonCaches=false\n    -Dsun.awt.keepWorkingSetOnMinimize=true\n    -Djava.net.preferIPv4Stack=true\n    -Djsse.enablesSNIExtension=false\n    -Djdk.http.auth.tunneling.disabledSchemes=""\n    -Djdk.attach.allowAttachSelf=true\n    -Djdk.module.illegalAccess.silent=true\n    -Dkotlinx.coroutines.debug=off\n    -XX:+HeapDumpOnOutOfMemoryError\n    -XX:-OmitStackTraceInFastThrow\n    -Dfile.encoding=UTF-8\n    -ea\n    -javaagent:G:\\tools\\ja-netfilter-v2.2.3\\ja-netfilter\\ja-netfilter.jar\n    ',normalizedContent:'# 随笔\n\n 1. idea配置\n    \n    -server\n    -dfile.encoding=utf-8\n    -xms512m\n    -xmx1024m\n    -xx:reservedcodecachesize=300m\n    -xx:+useconcmarksweepgc\n    -xx:+cmsparallelremarkenabled\n    -xx:concgcthreads=4\n    -xx:softreflrupolicymspermb=50\n    -xx:+tieredcompilation\n    -xx:+usecompressedoops\n    -xx:+alwayspretouch\n    -dsun.io.usecanoncaches=false\n    -dsun.awt.keepworkingsetonminimize=true\n    -djava.net.preferipv4stack=true\n    -djsse.enablessniextension=false\n    -djdk.http.auth.tunneling.disabledschemes=""\n    -djdk.attach.allowattachself=true\n    -djdk.module.illegalaccess.silent=true\n    -dkotlinx.coroutines.debug=off\n    -xx:+heapdumponoutofmemoryerror\n    -xx:-omitstacktraceinfastthrow\n    -dfile.encoding=utf-8\n    -ea\n    -javaagent:g:\\tools\\ja-netfilter-v2.2.3\\ja-netfilter\\ja-netfilter.jar\n    ',charsets:{cjk:!0}},{title:"杂记",frontmatter:{title:"杂记",date:"2022-04-22T09:40:28.000Z",permalink:"/pages/f58086/",categories:["other"],tags:[null]},regularPath:"/51.other/02.%E6%9D%82%E8%AE%B0.html",relativePath:"51.other/02.杂记.md",key:"v-c2d1e070",path:"/pages/f58086/",headers:[{level:2,title:"ffmpeg",slug:"ffmpeg",normalizedTitle:"ffmpeg",charIndex:12}],headersStr:"ffmpeg",content:'# other\n\n\n# ffmpeg\n\n 1. 音频添加封面：\n    \n    ffmpeg -i audio.flac -i image.png -map 0:a -map 1 -codec copy -metadata:s:v title="Album cover" -metadata:s:v comment="Cover (front)" -disposition:v attached_pic output.flac\n    \n\n 2. 音频截取\n    \n    ffmpeg -i audio.flac -ss 0 -t 10:50 -acodec copy out.flac\n    ',normalizedContent:'# other\n\n\n# ffmpeg\n\n 1. 音频添加封面：\n    \n    ffmpeg -i audio.flac -i image.png -map 0:a -map 1 -codec copy -metadata:s:v title="album cover" -metadata:s:v comment="cover (front)" -disposition:v attached_pic output.flac\n    \n\n 2. 音频截取\n    \n    ffmpeg -i audio.flac -ss 0 -t 10:50 -acodec copy out.flac\n    ',charsets:{cjk:!0}},{title:"Reactor",frontmatter:{title:"Reactor",date:"2022-04-11T09:39:12.000Z",permalink:"/pages/5fd56a/",categories:["设计模式"],tags:[null]},regularPath:"/99.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.Reactor.html",relativePath:"99.设计模式/01.Reactor.md",key:"v-55050ab4",path:"/pages/5fd56a/",headersStr:null,content:"[toc]\n\n\n# Reactor design pattern\n\n> reactor设计模式是一种事件处理模式，用于处理将一个或多个输入并发地传递给服务处理程序。然后服务处理程序将传入的请求复用，并将他们同步的分派给相应的请求处理程序\n\nScalable IO in Java",normalizedContent:"[toc]\n\n\n# reactor design pattern\n\n> reactor设计模式是一种事件处理模式，用于处理将一个或多个输入并发地传递给服务处理程序。然后服务处理程序将传入的请求复用，并将他们同步的分派给相应的请求处理程序\n\nscalable io in java",charsets:{cjk:!0}},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-2f18dbfd",path:"/archives/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2021/12/12, 22:33:36",lastUpdatedTimestamp:1639319616e3},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-6b9fdb5d",path:"/categories/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2021/12/12, 22:33:36",lastUpdatedTimestamp:1639319616e3},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-5c32397d",path:"/tags/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2021/12/12, 22:33:36",lastUpdatedTimestamp:1639319616e3},{title:"Home",frontmatter:{home:!0,heroText:"Ciallo～(∠・ω< )⌒★",tagline:null,actionText:"立刻进入 →",actionLink:"/Java/",bannerBg:"none",features:[{title:"Java",details:"Java",link:"/Java/",imgUrl:"/img/web.png"},{title:"Spring",details:"Spring",link:"/Spring/",imgUrl:"/img/ui.png"},{title:"SpringCloud",details:"SpringCloud全家桶",link:"/SpringCloud/",imgUrl:"/img/other.png"}]},regularPath:"/",relativePath:"index.md",key:"v-75b04329",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2021/12/12, 22:44:07",lastUpdatedTimestamp:1639320247e3},{title:"面试题",frontmatter:{title:"面试题",date:"2022-03-09T08:49:36.000Z",permalink:"/pages/7d1775/",categories:["other"],tags:[null]},regularPath:"/51.other/99.%E9%9D%A2%E8%AF%95%E9%A2%98.html",relativePath:"51.other/99.面试题.md",key:"v-5cfae26a",path:"/pages/7d1775/",headers:[{level:2,title:"一、Java 基础",slug:"一、java-基础",normalizedTitle:"一、java 基础",charIndex:18},{level:2,title:"二、容器",slug:"二、容器",normalizedTitle:"二、容器",charIndex:1850},{level:2,title:"四、反射",slug:"四、反射",normalizedTitle:"四、反射",charIndex:4587},{level:2,title:"八、网络",slug:"八、网络",normalizedTitle:"八、网络",charIndex:5616},{level:2,title:"十三、Mybatis",slug:"十三、mybatis",normalizedTitle:"十三、mybatis",charIndex:7476},{level:2,title:"十五、Kafka",slug:"十五、kafka",normalizedTitle:"十五、kafka",charIndex:9379},{level:2,title:"十六、Zookeeper",slug:"十六、zookeeper",normalizedTitle:"十六、zookeeper",charIndex:9563},{level:2,title:"十七、MySql",slug:"十七、mysql",normalizedTitle:"十七、mysql",charIndex:9764}],headersStr:"一、Java 基础 二、容器 四、反射 八、网络 十三、Mybatis 十五、Kafka 十六、Zookeeper 十七、MySql",content:'[toc]\n\n\n# 面试题\n\n\n# 一、Java 基础\n\n1.JDK 和 JRE 有什么区别？\n\n\n\tJDK: JAVA开发者工具包\n\tJRE: JAVA运行环境\n\t\n\n2.== 和 equals 的区别是什么？\n\n\n\t==为比较运算符，在基础数据类型中，==直接比较值，在引用类型中，== 比较的是对象的地址，equals是Object类中的方法，使用时依赖类的具体实现\n\t在比较int和Integer时，会出现一些其他状况,由于IntegerCache的存在，在比较 Integer a = 5 与 Integer b = 5时 a == b,a.equals(b))的结果都为true,是因为IntegerCache缓存了 -128 ~ 127 范围内的数，a 和 b指向 IntegerCache中的同一块地址\n\t\n\n3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？\n\n\n\thashCode()相同时，equals()不一定相同，存在撞hash的可能\n\t\n\n4.final 在 java 中有什么作用？\n\n\n\tfinal可以修饰 类、方法、变量；\n\tfinal修饰类时，类不可被继承；\n\tfinal修饰方法时，方法不可以被重写\n\tfinal修饰属性时，属性为常量，初始化后不可更改\n\t\n\n5.java 中的 Math.round(-1.5) 等于多少？\n\n\n\tMath.round()中 首先给原来的数 +0.5,然后向下取整\n\t如-1.5，-1.5+0.5 = -1.0，向下取整后为-1.0\n\t-1.6，-1.6+0.5= -1.1， 向下取整后为-2.0\n\t1.5， 1.5+0.5 = 2.0，向下取整为2.0\n\t1.4， 1.4+0.5 = 1.9，向下取整为1.0\n\t\n\n6.String 属于基础的数据类型吗？\n\n\n\tString是引用类型，不属于基本类型\n\t基础类型：byte,boolean,short,int,long,float,double,char\n\t对应的包装类：Byte,Boolean,Short,Integer,Long,Float,Double,Character\n\t\n\n7.java 中操作字符串都有哪些类？它们之间有什么区别？\n\n\n\t有String,StringBuffer,StringBuilder三种\n\tString为不可变的，每次进行更改都需要重新分配内存，StringBuffer与StringBuilder则不需要\n\tStringBuffer为线程安全的，StringBuilder是线程不安全的\n\t\n\n8.String str="i"与 String str=new String(“i”)一样吗？\n\n\n\t不一样，String str="i" i存在常量池中，str指向其地址，而String str=new String(“i”)则重新分配了内存\n\t\n\n9.如何将字符串反转？\n\n\n\t1. 使用StringBuffer和StringBuilder的reverse()\n\t2. 通过charat()进行交换\n\t3. 通过collects类中的reversse()\n\t\n\n10.String 类的常用方法都有那些？\n\n\n\t1. toString()\n\t2. charAt()\n\t3. indexOf()\n\t4. length()\n\t5. replace()\n\t6. replaceAll()\n\t7. lastIndexOf()\n\t8. split()\n\t9. substring()\n\t9. equals()\n\t\n\n11.抽象类必须要有抽象方法吗？\n\n\n\t不需要，但是有抽象方法的一定是抽象类\n\t\n\n12.普通类和抽象类有哪些区别？\n\n\n\t抽象类不可以被实例化\n\t\n\n13.抽象类能使用 final 修饰吗？\n\n\n\t不能，抽象类需要被子类实现，不能用final修饰\n\t\n\n14.接口和抽象类有什么区别？\n\n\n\t接口中的变量为public static 类变量，抽象类中的变量可以是普通成员变量\n\t接口可以被实现多个，抽象类只能被继承一个\n\t\n\n15.java 中 IO 流分为几种？\n\n\n\t字节流：InputStream,OutputStream\n\t字符流：Writer,Reader\n\t\n\n16.BIO、NIO、AIO 有什么区别？\n\n\n\t\n\n17.Files的常用方法都有哪些？\n\n\n\t\n\n\n# 二、容器\n\n18.java 容器都有哪些？\n\n\n    Collection: \n    \tList: Vector, ArrayList,LinkedList\n    \tSet: HashSet,LinkedHashSet,TreeSet\n    Map:\n    \tHashMap, LinkedHashMap, TreeMap, ConcurrentHashMap,HashTable,\n    \n\n19.Collection 和 Collections 有什么区别？\n\n\n    Collection是一个接口，是Set,List 的父接口；Collections是工具类，提供了一系列工具用于集合，如排序，搜索\n    \n\n20.List、Set、Map 之间的区别是什么？\n\n\n    List是有序集合，元素可重复；Set是无序集合，元素不可重复，LinkedHashSet按照插入顺序排序\n    Map是键值对映射，Key 无序，不可重复\n    \n\n21.HashMap 和 Hashtable 有什么区别？\n\n\n    HashMap是线程不安全的，允许key和value为 null\n    HashTable是线程安全的，不允许为空\n    \n\n22.如何决定使用 HashMap 还是 TreeMap？\n\n\n    TreeMap要求key实现compareable接口，默认按升序排序\n    需要得到有序的结果时使用treemap\n    \n\n23.说一下 HashMap 的实现原理？\n\n\n    HashMap使用数组加链表实现，进行put时，对key进行两次hash，然后与数组大小进行取模。如果两个key映射到同一个数组位置，则通过链表进行存储，在jdk1.8中，链表的长度大于8时，链表将转换为红黑树\n    \n\n24.说一下 HashSet 的实现原理？\n\n\n    HashSet封装了一个HashMap\n    \n\n25.ArrayList 和 LinkedList 的区别是什么？\n\n\n    ArrayList使用数组实现，随机访问效率高，插入删除效率低；LinkedList使用双向链表实现，随机访问效率低，增删效率高\n    \n\n26.如何实现数组和 List 之间的转换？\n\n\n    Arrays.asList(),List.toArray\n    \n\n27.ArrayList 和 Vector 的区别是什么？\n\n\n    Vector是线程安全的\n    \n\n28.Array 和 ArrayList 有何区别？\n\n\n    Array不可扩容，ArrayList是动态数组\n    \n\n29.在 Queue 中 poll()和 remove()有什么区别？\n\n\n    \n\n30.哪些集合类是线程安全的？\n\n\n    Vector,HashTable,ConcurrentHashMap\n    \n\n31.迭代器 Iterator 是什么？\n\n\n    \n\n32.Iterator 怎么使用？有什么特点？\n\n\n    \n\n33.Iterator 和 ListIterator 有什么区别？\n\n\n    \n\n34.怎么确保一个集合不能被修改？\n\n\n    \n\n## 三、多线程 35.并行和并发有什么区别？\n\n\n    \n\n36.线程和进程的区别？\n\n\n    进程是计算机分配资源的最小单位，线程是cpu执行的最小单位\n    \n\n37.守护线程是什么？\n\n\n    thread在start之前，SetDeamon(true),守护线程在有其他线程存在时一直存活，在其他线程都结束后，守护线程将被关闭，如jvm的垃圾回收\n    \n\n38.创建线程有哪几种方式？\n\n\n    继承thread类，实现callable,runnable接口，使用线程池\n    \n\n39.说一下 runnable 和 callable 有什么区别？\n\n\n    runable没有返回值，callable有返回值，允许抛出异常\n    \n\n40.线程有哪些状态？\n\n\n    \tnew,runnable,running,waiting,block\n    \n\n41.sleep() 和 wait() 有什么区别？\n\n\n    sleep不会放开锁，属于Thread类的方法\n    wait会防开锁，可进行线程通信，属于Object类的方法\n    \n\n42.notify()和 notifyAll()有什么区别？\n\n\n    notify()随机唤醒一个wait的线程，可能导致死锁发生；\n    notifyAll()唤醒所有线程\n    \n\n43.线程的 run()和 start()有什么区别？\n\n\n    run()在当前线程执行方法，start()创建一个新线程执行方法\n    \n\n44.创建线程池有哪几种方式？\n\n\n    Executors工具类，new threadpoolexcutor()\n    \n\n45.线程池都有哪些状态？\n\n\n    running,shutdown,stop,terminated\n    \n\n46.线程池中 submit()和 execute()方法有什么区别？\n\n\n    executor()返回类型为void,submit()返回future\n    \n\n47.在 java 程序中怎么保证多线程的运行安全？\n\n\n    使用原子类，synchronized,volatile,Lock\n    \n\n48.多线程锁的升级原理是什么？\n\n\n    无锁->偏向锁->轻量锁->重量级锁\n    \n\n49.什么是死锁？\n\n\n    两个线程分别请求对方拥有的资源\n    \n\n50.怎么防止死锁？\n\n\n    一段时间没有获取到锁后放弃自己的锁\n    \n\n51.ThreadLocal 是什么？有哪些使用场景？\n\n\n    线程独有的空间，可以用来存放session\n    \n\n52.说一下 synchronized 底层实现原理？\n\n\n    \n\n53.synchronized 和 volatile 的区别是什么？\n\n\n    synchronized是锁，volation保证可见性及避免代码重排\n    \n\n54.synchronized 和 Lock 有什么区别？\n\n\n    \n\n55.synchronized 和 ReentrantLock 区别是什么？\n\n\n    \n\n56.说一下 atomic 的原理？\n\n\n    cas自旋\n    \n\n\n# 四、反射\n\n57.什么是反射？\n\n\n    \n\n58.什么是 java 序列化？什么情况下需要序列化？\n\n\n    序列化：java对象转换为字节流\n    在需要将java对象通过网络等介质传输到另一个地方时\n    \n\n59.动态代理是什么？有哪些应用？\n\n\n    可以扩展目标类的方法，可以用于日志记录，性能统计\n    \n\n60.怎么实现动态代理？\n\n\n    \n\n## 五、对象拷贝 61.为什么要使用克隆？\n\n\n    \n\n62.如何实现对象克隆？\n\n\n    \n\n63.深拷贝和浅拷贝区别是什么？\n\n\n    \n\n## 六、Java Web 64.jsp 和 servlet 有什么区别？\n\n\n    \n\n65.jsp 有哪些内置对象？作用分别是什么？\n\n\n    \n\n66.说一下 jsp 的 4 种作用域？\n\n\n    \n\n67.session 和 cookie 有什么区别？\n\n\n    session存在服务器上，cookie存在客户端上\n    \n\n68.说一下 session 的工作原理？\n\n\n    \n\n69.如果客户端禁止 cookie 能实现 session 还能用吗？\n\n\n    \n\n70.spring mvc 和 struts 的区别是什么？\n\n\n    \n\n71.如何避免 sql 注入？\n\n\n    \n\n72.什么是 XSS 攻击，如何避免？\n\n\n    \n\n73.什么是 CSRF 攻击，如何避免？\n\n\n    \n\n## 七、异常 74.throw 和 throws 的区别？\n\n\n    \n\n75.final、finally、finalize 有什么区别？\n\n\n    \n\n76.try-catch-finally 中哪个部分可以省略？\n\n\n    \n\n77.try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？\n\n\n    \n\n78.常见的异常类有哪些？\n\n\n    nullpointerexception\n    classnotfoundexception\n    arrayindexoutofboundsexception\n    ClassCastException\n    EOFException\n    FileNotFoundException\n    SQLException\n    IOException\n    \n\n\n# 八、网络\n\n79.http 响应码 301 和 302 代表的是什么？有什么区别？\n\n\n    \n\n80.forward 和 redirect 的区别？\n\n\n    forward是服务器转发，redirect是浏览器重定向\n    \n\n81.简述 tcp 和 udp的区别？\n\n\n    \n\n82.tcp 为什么要三次握手，两次不行吗？为什么？\n\n\n    \n\n83.说一下 tcp 粘包是怎么产生的？\n\n\n    \n\n84.OSI 的七层模型都有哪些？\n\n\n    应用层\n    表示层\n    会话层\n    传输层\n    网络层\n    数据链路层\n    物理层\n    \n\n85.get 和 post 请求有哪些区别？\n\n\n    \n\n86.如何实现跨域？\n\n\n    \n\n87.说一下 JSONP 实现原理？\n\n\n    \n\n## 九、设计模式 88.说一下你熟悉的设计模式？\n\n\n    \n\n89.简单工厂和抽象工厂有什么区别？\n\n\n    \n\n## 十、Spring/Spring MVC 90.为什么要使用 spring？\n\n\n    \n\n91.解释一下什么是 aop？\n\n\n    在不修改源代码的情况下增强功能，底层实现是动态代理\n    · 连接点：可以被增强的方法\n    · 切入点：被增强的方法\n    · 通知：\n    · 目标\n    · 织入\n    \n\n92.解释一下什么是 ioc？\n\n\n    Spring容器，控制反转，将对象的创建、管理交给spring\n    \n\n93.spring 有哪些主要模块？\n\n\n    \n\n94.spring 常用的注入方式有哪些？\n\n\n    构造器注入、set注入、注解注入（@Autowired,@Resource）\n    \n\n95.spring 中的 bean 是线程安全的吗？\n\n\n    spring的bean默认是单实例的，不是线程安全的\n    \n\n96.spring 支持几种 bean 的作用域？\n\n\n    request,session,singletiin,prorotype,gloableSession\n    \n\n97.spring 自动装配 bean 有哪些方式？\n\n\n    \n\n98.spring 事务实现方式有哪些？\n\n\n    \n\n99.说一下 spring 的事务隔离？\n\n\n    \n\n100.说一下 spring mvc 运行流程？\n\n\n    \n\n101.spring mvc 有哪些组件？\n\n\n    \n\n102.@RequestMapping 的作用是什么？\n\n\n    \n\n103.@Autowired 的作用是什么？\n\n\n    \n\n## 十一、Spring Boot/Spring Cloud 104.什么是 spring boot？\n\n\n    \n\n105.为什么要用 spring boot？\n\n\n    \n\n106.spring boot 核心配置文件是什么？\n\n\n    \n\n107.spring boot 配置文件有哪几种类型？它们有什么区别？\n\n\n    \n\n108.spring boot 有哪些方式可以实现热部署？\n\n\n    \n\n109.jpa 和 hibernate 有什么区别？\n\n\n    \n\n110.什么是 spring cloud？\n\n\n    \n\n111.spring cloud 断路器的作用是什么？\n\n\n    \n\n112.spring cloud 的核心组件有哪些？\n\n\n    \n\n## 十二、Hibernate 113.为什么要使用 hibernate？ 114.什么是 ORM 框架？ 115.hibernate 中如何在控制台查看打印的 sql 语句？ 116.hibernate 有几种查询方式？ 117.hibernate 实体类可以被定义为 final 吗？ 118.在 hibernate 中使用 Integer 和 int 做映射有什么区别？ 119.hibernate 是如何工作的？ 120.get()和 load()的区别？ 121.说一下 hibernate 的缓存机制？ 122.hibernate 对象有哪些状态？ 123.在 hibernate 中 getCurrentSession 和 openSession 的区别是什么？ 124.hibernate 实体类必须要有无参构造函数吗？为什么？\n\n\n# 十三、Mybatis\n\n125.mybatis 中 #{}和 ${}的区别是什么？\n\n\n    #{}是占位符，${}是拼接字符串\n    \n\n125.mybatis 中 #{}和 ${}的区别是什么？\n\n\n    #{}占位符\n    \n\n127.RowBounds 是一次性查询全部结果吗？为什么？\n\n\n    \n\n128.mybatis 逻辑分页和物理分页的区别是什么？\n\n\n    \n\n129.mybatis 是否支持延迟加载？延迟加载的原理是什么？\n\n\n    \n\n130.说一下 mybatis 的一级缓存和二级缓存？\n\n\n    \n\n131.mybatis 和 hibernate 的区别有哪些？\n\n\n    \n\n132.mybatis 有哪些执行器（Executor）？\n\n\n    Simple,batch,reuse\n    \n\n133.mybatis 分页插件的实现原理是什么？\n\n\n    通过拦截器，重写sql，加上limit\n    \n\n134.mybatis 如何编写一个自定义插件？\n\n\n    \n\n## 十四、RabbitMQ 135.rabbitmq 的使用场景有哪些？\n\n\n    解耦，流量削峰\n    \n\n136.rabbitmq 有哪些重要的角色？\n\n\n    生产者，消费者，代理\n    \n\n137.rabbitmq 有哪些重要的组件？\n\n\n    ConnectionFactory，channel,Exchange,Queue,RoutingKey,BindingKey\n    \n\n138.rabbitmq 中 vhost 的作用是什么？\n\n\n    vhost,可以视为rabbitmq的虚拟机，里面有着独立的Exchange、Queue等，拥有者独立的权限控制和用户管理\n    \n\n139.rabbitmq 的消息是怎么发送的？\n\n\n    \n\n140.rabbitmq 怎么保证消息的稳定性？\n\n\n    1. 消息持久化\n    2. Ack机制\n    3. 集群镜像\n    4. 消息补偿\n    \n\n141.rabbitmq 怎么避免消息丢失？\n\n\n    \n\n142.要保证消息持久化成功的条件有哪些？\n\n\n    Exchange设置持久化\n    Queue设置持久化\n    Message 设置持久化\n    \n\n143.rabbitmq 持久化有什么缺点？\n\n\n    降低吞吐量\n    \n\n144.rabbitmq 有几种广播类型？\n\n\n    1. direct:默认消息发送方式，直接将消息发送给对方，如果有多个订阅者就轮询进行消息发送。消息中的路由键（routing key）如果和 Binding 中的 binding key 一致， 交换器就将消息发到对应的队列中，路由键与队列名完全匹配\n    2. fanout:分发给与Exchange绑定的的队列上，不处理路由键\n    3. topic: 通过对路由键进行模式匹配分发消息\n    \n\n145.rabbitmq 怎么实现延迟消息队列？\n\n\n    TTL\n    给quene和message设置x-message-tt，来控制消息生存时间，超时后，消息会变成dead letter\n    DLX\n    Queue可以配置x-dead-letter-exchange 和x-dead-letter-routing-key（可选）两个参数,如果队列内出现了dead letter，则按照这两个参数重新路由\n    1. x-dead-letter-exchange：出现dead letter之后将dead letter重新发送到指定exchange\n\t2. x-dead-letter-routing-key：指定routing-key发送\n    \n\n146.rabbitmq 集群有什么用？\n\n\n    高可用，高容量\n    \n\n147.rabbitmq 节点的类型有哪些？\n\n\n    磁盘节点，内存节点\n    \n\n148.rabbitmq 集群搭建需要注意哪些问题？\n\n\n    \n\n149.rabbitmq 每个节点是其他节点的完整拷贝吗？为什么？\n\n\n    不是\n    \n\n150.rabbitmq 集群中唯一一个磁盘节点崩溃了会发生什么情况？\n\n\n    可以正常运行，但是不能改变任何东西\n    \n\n151.rabbitmq 对集群节点停止顺序有要求吗？\n\n\n    先关闭内存节点，再关闭磁盘节点\n    \n\n\n# 十五、Kafka\n\n152.kafka 可以脱离 zookeeper 单独使用吗？为什么？ 153.kafka 有几种数据保留的策略？ 154.kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？ 155.什么情况会导致 kafka 运行变慢？ 156.使用 kafka 集群需要注意什么？\n\n\n# 十六、Zookeeper\n\n157.zookeeper 是什么？ 158.zookeeper 都有哪些功能？ 159.zookeeper 有几种部署模式？ 160.zookeeper 怎么保证主从节点的状态同步？ 161.集群中为什么要有主节点？ 162.集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？ 163.说一下 zookeeper 的通知机制？\n\n\n# 十七、MySql\n\n164.数据库的三范式是什么？\n\n\n    \n\n165.一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？\n\n\n    \n\n166.如何获取当前数据库版本？\n\n\n    \n\n167.说一下 ACID 是什么？\n\n\n    \n\n168.char 和 varchar 的区别是什么？\n\n\n    \n\n169.float 和 double 的区别是什么？\n\n\n    \n\n170.mysql 的内连接、左连接、右连接有什么区别？\n\n\n    \n\n171.mysql 索引是怎么实现的？\n\n\n    \n\n172.怎么验证 mysql 的索引是否满足需求？\n\n\n    \n\n173.说一下数据库的事务隔离？\n\n\n    \n\n174.说一下 mysql 常用的引擎？\n\n\n    \n\n175.说一下 mysql 的行锁和表锁？\n\n\n    \n\n176.说一下乐观锁和悲观锁？\n\n\n    \n\n177.mysql 问题排查都有哪些手段？\n\n\n    \n\n178.如何做 mysql 的性能优化？\n\n\n    \n\n## 十八、Redis 179.redis 是什么？都有哪些使用场景？\n\n\n    \n\n180.redis 有哪些功能？\n\n\n    \n\n181.redis 和 memecache 有什么区别？\n\n\n    \n\n182.redis 为什么是单线程的？\n\n\n    \n\n183.什么是缓存穿透？怎么解决？\n\n\n    \n\n184.redis 支持的数据类型有哪些？\n\n\n    set,list,hash,string,sorted set\n    \n\n185.redis 支持的 java 客户端都有哪些？\n\n\n    \n\n186.jedis 和 redisson 有哪些区别？\n\n\n    \n\n187.怎么保证缓存和数据库数据的一致性？\n\n\n    1.双删\n    2. 设置有效期\n    3. mysql的binlog\n    \n\n188.redis 持久化有几种方式？\n\n\n    rdb,aof\n    \n\n189.redis 怎么实现分布式锁？\n\n\n    \n\n190.redis 分布式锁有什么缺陷？\n\n\n    \n\n191.redis 如何做内存优化？\n\n\n    \n\n192.redis 淘汰策略有哪些？\n\n\n    \n\n193.redis 常见的性能问题有哪些？该如何解决？\n\n\n    \n\n## 十九、JVM 194.说一下 jvm 的主要组成部分？及其作用？ 195.说一下 jvm 运行时数据区？ 196.说一下堆栈的区别？ 197.队列和栈是什么？有什么区别？ 198.什么是双亲委派模型？ 199.说一下类加载的执行过程？ 200.怎么判断对象是否可以被回收？ 201.java 中都有哪些引用类型？ 202.说一下 jvm 有哪些垃圾回收算法？ 203.说一下 jvm 有哪些垃圾回收器？ 204.详细介绍一下 CMS 垃圾回收器？ 205.新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？ 206.简述分代垃圾回收器是怎么工作的？ 207.说一下 jvm 调优的工具？ 208.常用的 jvm 调优的参数都有哪些？',normalizedContent:'[toc]\n\n\n# 面试题\n\n\n# 一、java 基础\n\n1.jdk 和 jre 有什么区别？\n\n\n\tjdk: java开发者工具包\n\tjre: java运行环境\n\t\n\n2.== 和 equals 的区别是什么？\n\n\n\t==为比较运算符，在基础数据类型中，==直接比较值，在引用类型中，== 比较的是对象的地址，equals是object类中的方法，使用时依赖类的具体实现\n\t在比较int和integer时，会出现一些其他状况,由于integercache的存在，在比较 integer a = 5 与 integer b = 5时 a == b,a.equals(b))的结果都为true,是因为integercache缓存了 -128 ~ 127 范围内的数，a 和 b指向 integercache中的同一块地址\n\t\n\n3.两个对象的 hashcode()相同，则 equals()也一定为 true，对吗？\n\n\n\thashcode()相同时，equals()不一定相同，存在撞hash的可能\n\t\n\n4.final 在 java 中有什么作用？\n\n\n\tfinal可以修饰 类、方法、变量；\n\tfinal修饰类时，类不可被继承；\n\tfinal修饰方法时，方法不可以被重写\n\tfinal修饰属性时，属性为常量，初始化后不可更改\n\t\n\n5.java 中的 math.round(-1.5) 等于多少？\n\n\n\tmath.round()中 首先给原来的数 +0.5,然后向下取整\n\t如-1.5，-1.5+0.5 = -1.0，向下取整后为-1.0\n\t-1.6，-1.6+0.5= -1.1， 向下取整后为-2.0\n\t1.5， 1.5+0.5 = 2.0，向下取整为2.0\n\t1.4， 1.4+0.5 = 1.9，向下取整为1.0\n\t\n\n6.string 属于基础的数据类型吗？\n\n\n\tstring是引用类型，不属于基本类型\n\t基础类型：byte,boolean,short,int,long,float,double,char\n\t对应的包装类：byte,boolean,short,integer,long,float,double,character\n\t\n\n7.java 中操作字符串都有哪些类？它们之间有什么区别？\n\n\n\t有string,stringbuffer,stringbuilder三种\n\tstring为不可变的，每次进行更改都需要重新分配内存，stringbuffer与stringbuilder则不需要\n\tstringbuffer为线程安全的，stringbuilder是线程不安全的\n\t\n\n8.string str="i"与 string str=new string(“i”)一样吗？\n\n\n\t不一样，string str="i" i存在常量池中，str指向其地址，而string str=new string(“i”)则重新分配了内存\n\t\n\n9.如何将字符串反转？\n\n\n\t1. 使用stringbuffer和stringbuilder的reverse()\n\t2. 通过charat()进行交换\n\t3. 通过collects类中的reversse()\n\t\n\n10.string 类的常用方法都有那些？\n\n\n\t1. tostring()\n\t2. charat()\n\t3. indexof()\n\t4. length()\n\t5. replace()\n\t6. replaceall()\n\t7. lastindexof()\n\t8. split()\n\t9. substring()\n\t9. equals()\n\t\n\n11.抽象类必须要有抽象方法吗？\n\n\n\t不需要，但是有抽象方法的一定是抽象类\n\t\n\n12.普通类和抽象类有哪些区别？\n\n\n\t抽象类不可以被实例化\n\t\n\n13.抽象类能使用 final 修饰吗？\n\n\n\t不能，抽象类需要被子类实现，不能用final修饰\n\t\n\n14.接口和抽象类有什么区别？\n\n\n\t接口中的变量为public static 类变量，抽象类中的变量可以是普通成员变量\n\t接口可以被实现多个，抽象类只能被继承一个\n\t\n\n15.java 中 io 流分为几种？\n\n\n\t字节流：inputstream,outputstream\n\t字符流：writer,reader\n\t\n\n16.bio、nio、aio 有什么区别？\n\n\n\t\n\n17.files的常用方法都有哪些？\n\n\n\t\n\n\n# 二、容器\n\n18.java 容器都有哪些？\n\n\n    collection: \n    \tlist: vector, arraylist,linkedlist\n    \tset: hashset,linkedhashset,treeset\n    map:\n    \thashmap, linkedhashmap, treemap, concurrenthashmap,hashtable,\n    \n\n19.collection 和 collections 有什么区别？\n\n\n    collection是一个接口，是set,list 的父接口；collections是工具类，提供了一系列工具用于集合，如排序，搜索\n    \n\n20.list、set、map 之间的区别是什么？\n\n\n    list是有序集合，元素可重复；set是无序集合，元素不可重复，linkedhashset按照插入顺序排序\n    map是键值对映射，key 无序，不可重复\n    \n\n21.hashmap 和 hashtable 有什么区别？\n\n\n    hashmap是线程不安全的，允许key和value为 null\n    hashtable是线程安全的，不允许为空\n    \n\n22.如何决定使用 hashmap 还是 treemap？\n\n\n    treemap要求key实现compareable接口，默认按升序排序\n    需要得到有序的结果时使用treemap\n    \n\n23.说一下 hashmap 的实现原理？\n\n\n    hashmap使用数组加链表实现，进行put时，对key进行两次hash，然后与数组大小进行取模。如果两个key映射到同一个数组位置，则通过链表进行存储，在jdk1.8中，链表的长度大于8时，链表将转换为红黑树\n    \n\n24.说一下 hashset 的实现原理？\n\n\n    hashset封装了一个hashmap\n    \n\n25.arraylist 和 linkedlist 的区别是什么？\n\n\n    arraylist使用数组实现，随机访问效率高，插入删除效率低；linkedlist使用双向链表实现，随机访问效率低，增删效率高\n    \n\n26.如何实现数组和 list 之间的转换？\n\n\n    arrays.aslist(),list.toarray\n    \n\n27.arraylist 和 vector 的区别是什么？\n\n\n    vector是线程安全的\n    \n\n28.array 和 arraylist 有何区别？\n\n\n    array不可扩容，arraylist是动态数组\n    \n\n29.在 queue 中 poll()和 remove()有什么区别？\n\n\n    \n\n30.哪些集合类是线程安全的？\n\n\n    vector,hashtable,concurrenthashmap\n    \n\n31.迭代器 iterator 是什么？\n\n\n    \n\n32.iterator 怎么使用？有什么特点？\n\n\n    \n\n33.iterator 和 listiterator 有什么区别？\n\n\n    \n\n34.怎么确保一个集合不能被修改？\n\n\n    \n\n## 三、多线程 35.并行和并发有什么区别？\n\n\n    \n\n36.线程和进程的区别？\n\n\n    进程是计算机分配资源的最小单位，线程是cpu执行的最小单位\n    \n\n37.守护线程是什么？\n\n\n    thread在start之前，setdeamon(true),守护线程在有其他线程存在时一直存活，在其他线程都结束后，守护线程将被关闭，如jvm的垃圾回收\n    \n\n38.创建线程有哪几种方式？\n\n\n    继承thread类，实现callable,runnable接口，使用线程池\n    \n\n39.说一下 runnable 和 callable 有什么区别？\n\n\n    runable没有返回值，callable有返回值，允许抛出异常\n    \n\n40.线程有哪些状态？\n\n\n    \tnew,runnable,running,waiting,block\n    \n\n41.sleep() 和 wait() 有什么区别？\n\n\n    sleep不会放开锁，属于thread类的方法\n    wait会防开锁，可进行线程通信，属于object类的方法\n    \n\n42.notify()和 notifyall()有什么区别？\n\n\n    notify()随机唤醒一个wait的线程，可能导致死锁发生；\n    notifyall()唤醒所有线程\n    \n\n43.线程的 run()和 start()有什么区别？\n\n\n    run()在当前线程执行方法，start()创建一个新线程执行方法\n    \n\n44.创建线程池有哪几种方式？\n\n\n    executors工具类，new threadpoolexcutor()\n    \n\n45.线程池都有哪些状态？\n\n\n    running,shutdown,stop,terminated\n    \n\n46.线程池中 submit()和 execute()方法有什么区别？\n\n\n    executor()返回类型为void,submit()返回future\n    \n\n47.在 java 程序中怎么保证多线程的运行安全？\n\n\n    使用原子类，synchronized,volatile,lock\n    \n\n48.多线程锁的升级原理是什么？\n\n\n    无锁->偏向锁->轻量锁->重量级锁\n    \n\n49.什么是死锁？\n\n\n    两个线程分别请求对方拥有的资源\n    \n\n50.怎么防止死锁？\n\n\n    一段时间没有获取到锁后放弃自己的锁\n    \n\n51.threadlocal 是什么？有哪些使用场景？\n\n\n    线程独有的空间，可以用来存放session\n    \n\n52.说一下 synchronized 底层实现原理？\n\n\n    \n\n53.synchronized 和 volatile 的区别是什么？\n\n\n    synchronized是锁，volation保证可见性及避免代码重排\n    \n\n54.synchronized 和 lock 有什么区别？\n\n\n    \n\n55.synchronized 和 reentrantlock 区别是什么？\n\n\n    \n\n56.说一下 atomic 的原理？\n\n\n    cas自旋\n    \n\n\n# 四、反射\n\n57.什么是反射？\n\n\n    \n\n58.什么是 java 序列化？什么情况下需要序列化？\n\n\n    序列化：java对象转换为字节流\n    在需要将java对象通过网络等介质传输到另一个地方时\n    \n\n59.动态代理是什么？有哪些应用？\n\n\n    可以扩展目标类的方法，可以用于日志记录，性能统计\n    \n\n60.怎么实现动态代理？\n\n\n    \n\n## 五、对象拷贝 61.为什么要使用克隆？\n\n\n    \n\n62.如何实现对象克隆？\n\n\n    \n\n63.深拷贝和浅拷贝区别是什么？\n\n\n    \n\n## 六、java web 64.jsp 和 servlet 有什么区别？\n\n\n    \n\n65.jsp 有哪些内置对象？作用分别是什么？\n\n\n    \n\n66.说一下 jsp 的 4 种作用域？\n\n\n    \n\n67.session 和 cookie 有什么区别？\n\n\n    session存在服务器上，cookie存在客户端上\n    \n\n68.说一下 session 的工作原理？\n\n\n    \n\n69.如果客户端禁止 cookie 能实现 session 还能用吗？\n\n\n    \n\n70.spring mvc 和 struts 的区别是什么？\n\n\n    \n\n71.如何避免 sql 注入？\n\n\n    \n\n72.什么是 xss 攻击，如何避免？\n\n\n    \n\n73.什么是 csrf 攻击，如何避免？\n\n\n    \n\n## 七、异常 74.throw 和 throws 的区别？\n\n\n    \n\n75.final、finally、finalize 有什么区别？\n\n\n    \n\n76.try-catch-finally 中哪个部分可以省略？\n\n\n    \n\n77.try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？\n\n\n    \n\n78.常见的异常类有哪些？\n\n\n    nullpointerexception\n    classnotfoundexception\n    arrayindexoutofboundsexception\n    classcastexception\n    eofexception\n    filenotfoundexception\n    sqlexception\n    ioexception\n    \n\n\n# 八、网络\n\n79.http 响应码 301 和 302 代表的是什么？有什么区别？\n\n\n    \n\n80.forward 和 redirect 的区别？\n\n\n    forward是服务器转发，redirect是浏览器重定向\n    \n\n81.简述 tcp 和 udp的区别？\n\n\n    \n\n82.tcp 为什么要三次握手，两次不行吗？为什么？\n\n\n    \n\n83.说一下 tcp 粘包是怎么产生的？\n\n\n    \n\n84.osi 的七层模型都有哪些？\n\n\n    应用层\n    表示层\n    会话层\n    传输层\n    网络层\n    数据链路层\n    物理层\n    \n\n85.get 和 post 请求有哪些区别？\n\n\n    \n\n86.如何实现跨域？\n\n\n    \n\n87.说一下 jsonp 实现原理？\n\n\n    \n\n## 九、设计模式 88.说一下你熟悉的设计模式？\n\n\n    \n\n89.简单工厂和抽象工厂有什么区别？\n\n\n    \n\n## 十、spring/spring mvc 90.为什么要使用 spring？\n\n\n    \n\n91.解释一下什么是 aop？\n\n\n    在不修改源代码的情况下增强功能，底层实现是动态代理\n    · 连接点：可以被增强的方法\n    · 切入点：被增强的方法\n    · 通知：\n    · 目标\n    · 织入\n    \n\n92.解释一下什么是 ioc？\n\n\n    spring容器，控制反转，将对象的创建、管理交给spring\n    \n\n93.spring 有哪些主要模块？\n\n\n    \n\n94.spring 常用的注入方式有哪些？\n\n\n    构造器注入、set注入、注解注入（@autowired,@resource）\n    \n\n95.spring 中的 bean 是线程安全的吗？\n\n\n    spring的bean默认是单实例的，不是线程安全的\n    \n\n96.spring 支持几种 bean 的作用域？\n\n\n    request,session,singletiin,prorotype,gloablesession\n    \n\n97.spring 自动装配 bean 有哪些方式？\n\n\n    \n\n98.spring 事务实现方式有哪些？\n\n\n    \n\n99.说一下 spring 的事务隔离？\n\n\n    \n\n100.说一下 spring mvc 运行流程？\n\n\n    \n\n101.spring mvc 有哪些组件？\n\n\n    \n\n102.@requestmapping 的作用是什么？\n\n\n    \n\n103.@autowired 的作用是什么？\n\n\n    \n\n## 十一、spring boot/spring cloud 104.什么是 spring boot？\n\n\n    \n\n105.为什么要用 spring boot？\n\n\n    \n\n106.spring boot 核心配置文件是什么？\n\n\n    \n\n107.spring boot 配置文件有哪几种类型？它们有什么区别？\n\n\n    \n\n108.spring boot 有哪些方式可以实现热部署？\n\n\n    \n\n109.jpa 和 hibernate 有什么区别？\n\n\n    \n\n110.什么是 spring cloud？\n\n\n    \n\n111.spring cloud 断路器的作用是什么？\n\n\n    \n\n112.spring cloud 的核心组件有哪些？\n\n\n    \n\n## 十二、hibernate 113.为什么要使用 hibernate？ 114.什么是 orm 框架？ 115.hibernate 中如何在控制台查看打印的 sql 语句？ 116.hibernate 有几种查询方式？ 117.hibernate 实体类可以被定义为 final 吗？ 118.在 hibernate 中使用 integer 和 int 做映射有什么区别？ 119.hibernate 是如何工作的？ 120.get()和 load()的区别？ 121.说一下 hibernate 的缓存机制？ 122.hibernate 对象有哪些状态？ 123.在 hibernate 中 getcurrentsession 和 opensession 的区别是什么？ 124.hibernate 实体类必须要有无参构造函数吗？为什么？\n\n\n# 十三、mybatis\n\n125.mybatis 中 #{}和 ${}的区别是什么？\n\n\n    #{}是占位符，${}是拼接字符串\n    \n\n125.mybatis 中 #{}和 ${}的区别是什么？\n\n\n    #{}占位符\n    \n\n127.rowbounds 是一次性查询全部结果吗？为什么？\n\n\n    \n\n128.mybatis 逻辑分页和物理分页的区别是什么？\n\n\n    \n\n129.mybatis 是否支持延迟加载？延迟加载的原理是什么？\n\n\n    \n\n130.说一下 mybatis 的一级缓存和二级缓存？\n\n\n    \n\n131.mybatis 和 hibernate 的区别有哪些？\n\n\n    \n\n132.mybatis 有哪些执行器（executor）？\n\n\n    simple,batch,reuse\n    \n\n133.mybatis 分页插件的实现原理是什么？\n\n\n    通过拦截器，重写sql，加上limit\n    \n\n134.mybatis 如何编写一个自定义插件？\n\n\n    \n\n## 十四、rabbitmq 135.rabbitmq 的使用场景有哪些？\n\n\n    解耦，流量削峰\n    \n\n136.rabbitmq 有哪些重要的角色？\n\n\n    生产者，消费者，代理\n    \n\n137.rabbitmq 有哪些重要的组件？\n\n\n    connectionfactory，channel,exchange,queue,routingkey,bindingkey\n    \n\n138.rabbitmq 中 vhost 的作用是什么？\n\n\n    vhost,可以视为rabbitmq的虚拟机，里面有着独立的exchange、queue等，拥有者独立的权限控制和用户管理\n    \n\n139.rabbitmq 的消息是怎么发送的？\n\n\n    \n\n140.rabbitmq 怎么保证消息的稳定性？\n\n\n    1. 消息持久化\n    2. ack机制\n    3. 集群镜像\n    4. 消息补偿\n    \n\n141.rabbitmq 怎么避免消息丢失？\n\n\n    \n\n142.要保证消息持久化成功的条件有哪些？\n\n\n    exchange设置持久化\n    queue设置持久化\n    message 设置持久化\n    \n\n143.rabbitmq 持久化有什么缺点？\n\n\n    降低吞吐量\n    \n\n144.rabbitmq 有几种广播类型？\n\n\n    1. direct:默认消息发送方式，直接将消息发送给对方，如果有多个订阅者就轮询进行消息发送。消息中的路由键（routing key）如果和 binding 中的 binding key 一致， 交换器就将消息发到对应的队列中，路由键与队列名完全匹配\n    2. fanout:分发给与exchange绑定的的队列上，不处理路由键\n    3. topic: 通过对路由键进行模式匹配分发消息\n    \n\n145.rabbitmq 怎么实现延迟消息队列？\n\n\n    ttl\n    给quene和message设置x-message-tt，来控制消息生存时间，超时后，消息会变成dead letter\n    dlx\n    queue可以配置x-dead-letter-exchange 和x-dead-letter-routing-key（可选）两个参数,如果队列内出现了dead letter，则按照这两个参数重新路由\n    1. x-dead-letter-exchange：出现dead letter之后将dead letter重新发送到指定exchange\n\t2. x-dead-letter-routing-key：指定routing-key发送\n    \n\n146.rabbitmq 集群有什么用？\n\n\n    高可用，高容量\n    \n\n147.rabbitmq 节点的类型有哪些？\n\n\n    磁盘节点，内存节点\n    \n\n148.rabbitmq 集群搭建需要注意哪些问题？\n\n\n    \n\n149.rabbitmq 每个节点是其他节点的完整拷贝吗？为什么？\n\n\n    不是\n    \n\n150.rabbitmq 集群中唯一一个磁盘节点崩溃了会发生什么情况？\n\n\n    可以正常运行，但是不能改变任何东西\n    \n\n151.rabbitmq 对集群节点停止顺序有要求吗？\n\n\n    先关闭内存节点，再关闭磁盘节点\n    \n\n\n# 十五、kafka\n\n152.kafka 可以脱离 zookeeper 单独使用吗？为什么？ 153.kafka 有几种数据保留的策略？ 154.kafka 同时设置了 7 天和 10g 清除数据，到第五天的时候消息达到了 10g，这个时候 kafka 将如何处理？ 155.什么情况会导致 kafka 运行变慢？ 156.使用 kafka 集群需要注意什么？\n\n\n# 十六、zookeeper\n\n157.zookeeper 是什么？ 158.zookeeper 都有哪些功能？ 159.zookeeper 有几种部署模式？ 160.zookeeper 怎么保证主从节点的状态同步？ 161.集群中为什么要有主节点？ 162.集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？ 163.说一下 zookeeper 的通知机制？\n\n\n# 十七、mysql\n\n164.数据库的三范式是什么？\n\n\n    \n\n165.一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？\n\n\n    \n\n166.如何获取当前数据库版本？\n\n\n    \n\n167.说一下 acid 是什么？\n\n\n    \n\n168.char 和 varchar 的区别是什么？\n\n\n    \n\n169.float 和 double 的区别是什么？\n\n\n    \n\n170.mysql 的内连接、左连接、右连接有什么区别？\n\n\n    \n\n171.mysql 索引是怎么实现的？\n\n\n    \n\n172.怎么验证 mysql 的索引是否满足需求？\n\n\n    \n\n173.说一下数据库的事务隔离？\n\n\n    \n\n174.说一下 mysql 常用的引擎？\n\n\n    \n\n175.说一下 mysql 的行锁和表锁？\n\n\n    \n\n176.说一下乐观锁和悲观锁？\n\n\n    \n\n177.mysql 问题排查都有哪些手段？\n\n\n    \n\n178.如何做 mysql 的性能优化？\n\n\n    \n\n## 十八、redis 179.redis 是什么？都有哪些使用场景？\n\n\n    \n\n180.redis 有哪些功能？\n\n\n    \n\n181.redis 和 memecache 有什么区别？\n\n\n    \n\n182.redis 为什么是单线程的？\n\n\n    \n\n183.什么是缓存穿透？怎么解决？\n\n\n    \n\n184.redis 支持的数据类型有哪些？\n\n\n    set,list,hash,string,sorted set\n    \n\n185.redis 支持的 java 客户端都有哪些？\n\n\n    \n\n186.jedis 和 redisson 有哪些区别？\n\n\n    \n\n187.怎么保证缓存和数据库数据的一致性？\n\n\n    1.双删\n    2. 设置有效期\n    3. mysql的binlog\n    \n\n188.redis 持久化有几种方式？\n\n\n    rdb,aof\n    \n\n189.redis 怎么实现分布式锁？\n\n\n    \n\n190.redis 分布式锁有什么缺陷？\n\n\n    \n\n191.redis 如何做内存优化？\n\n\n    \n\n192.redis 淘汰策略有哪些？\n\n\n    \n\n193.redis 常见的性能问题有哪些？该如何解决？\n\n\n    \n\n## 十九、jvm 194.说一下 jvm 的主要组成部分？及其作用？ 195.说一下 jvm 运行时数据区？ 196.说一下堆栈的区别？ 197.队列和栈是什么？有什么区别？ 198.什么是双亲委派模型？ 199.说一下类加载的执行过程？ 200.怎么判断对象是否可以被回收？ 201.java 中都有哪些引用类型？ 202.说一下 jvm 有哪些垃圾回收算法？ 203.说一下 jvm 有哪些垃圾回收器？ 204.详细介绍一下 cms 垃圾回收器？ 205.新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？ 206.简述分代垃圾回收器是怎么工作的？ 207.说一下 jvm 调优的工具？ 208.常用的 jvm 调优的参数都有哪些？',charsets:{cjk:!0}}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"Java",link:"/Java/",items:[]},{text:"Spring",link:"/Spring/"},{text:"SpringCloud",link:"/SpringCloud/",items:[{text:"服务治理",link:"/pages/6d3e7e/"}]},{text:"索引",link:"/archives/",items:[{text:"分类",link:"/categories/"},{text:"标签",link:"/tags/"},{text:"归档",link:"/archives/"}]}],sidebarDepth:2,logo:"/img/logo.png",searchMaxSuggestions:10,lastUpdated:"上次更新",docsDir:"docs",editLinks:!1,editLinkText:"编辑",sidebar:{"/00.目录页/":[["01.Java.md","Java","/Java"],["02.Spring.md","Spring","/Spring"],["03.SpringCloud.md","SpringCloud","/SpringCloud"],["06.密码学.md","密码学","/密码学"]],catalogue:{Java:"/Java",Spring:"/Spring",SpringCloud:"/SpringCloud","密码学":"/密码学"},"/01.Java/":[["01.final关键字.md","final关键字","/pages/88c5f2/"],{title:"IO",collapsable:!0,children:[["02.IO/1.first.md","first","/pages/90bb0f/"]]},{title:"Other",collapsable:!0,children:[["03.Other/1.Mybatis.md","Mybatis","/pages/fb2fde/"]]},{title:"多线程",collapsable:!0,children:[["04.多线程/01.线程.md","线程","/pages/fbfd38/"],["04.多线程/02.线程池.md","线程池","/pages/7eb1e2/"]]}],"/02.Spring/":[["1.事务.md","Spring","/pages/6c093d/"],["2.Spring.md","Spring","/pages/9e7171/"]],"/03.SpringCloud/":[["01.服务治理.md","服务治理","/pages/6d3e7e/"],["02.服务消费.md","服务消费","/pages/cc1465/"],["03.服务消费Ribbon.md","服务消费Ribbon","/pages/e51ccb/"],["04.服务消费Feign.md","服务消费Feign","/pages/e27e3e/"],["05.配置中心.md","配置中心","/pages/e3f7fb/"],["06.服务网关.md","服务网关","/pages/e610d6/"],["07.服务容错保护.md","服务容错保护","/pages/de500c/"],["08.消息驱动的微服务.md","消息驱动的微服务","/pages/d2881b/"],{title:"SpringCloud Alibaba",collapsable:!0,children:[]}],"/04.SpringMvc/":[["01.SpringMvc.md","SpringMvc","/pages/8e2a17/"]],"/06.密码学/":[["01.基本概念.md","基本概念","/pages/0a5fd0/"],["02.DES.md","DES","/pages/632cd0/"],["03.AES.md","AES","/pages/a8ace8/"],["04.SM4.md","SM4","/pages/4271c7/"],["05.公钥密码.md","公钥密码","/pages/7f359a/"],["06.数字签名.md","数字签名","/pages/6c426c/"]],"/07.服务器/":[["01.SSL协议.md","SSL协议","/pages/59ddb2/"],["02.生成证书.md","生成证书","/pages/1f9026/"]],"/08.docker/":[["00.安装.md","安装","/pages/e461a5/"],["01.常用命令.md","常用命令","/pages/3d5d30/"],["02.镜像.md","镜像","/pages/7bcbbc/"],["03.搭建私服.md","搭建私服","/pages/21041c/"],["04.常用软件安装.md","常用软件安装","/pages/bb3e9a/"],["05.DockerFile.md","DockerFile","/pages/17d707/"],["07.docker compose.md","docker compose","/pages/d0fb24/"]],"/09.k8s/":[["01.基本概念.md","基本概念","/pages/8149aa/"],["02.安装部署.md","安装部署","/pages/566d32/"],["03.资源编排.md","资源编排","/pages/ec9bd7/"],["04.pod.md","pod","/pages/bb4118/"],["05.controller.md","controller","/pages/892142/"],["06.Service.md","Service","/pages/48d106/"],["07.Jobs&CronJob.md","Jobs&CronJob","/pages/5ac46f/"],["99.其他.md","其他","/pages/777b8e/"]],"/51.other/":[["01.随笔.md","随笔","/pages/bfe5e8/"],["02.杂记.md","杂记","/pages/f58086/"],["99.面试题.md","面试题","/pages/7d1775/"]],"/99.设计模式/":[["01.Reactor.md","Reactor","/pages/5fd56a/"]]},author:{name:"nanami",link:"https://github.com/gevikhn"},footer:{createYear:2021,copyrightInfo:'Evan Xu | <a href="https://github.com/xugaoyi/vuepress-theme-vdoing/blob/master/LICENSE" target="_blank">MIT License</a>'}}},Ys=(t(198),t(199),t(138),t(209)),Qs=t(210),nc=(t(364),t(223),t(40));var ec={computed:{$filterPosts:function(){return this.$site.pages.filter((function(n){var e=n.frontmatter,t=e.pageComponent,r=e.article,o=e.home;return!(t||!1===r||!0===o)}))},$sortPosts:function(){return(n=this.$filterPosts).sort((function(n,e){var t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(nc.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(nc.a)(n,e)})),n;var n},$sortPostsByDate:function(){return(n=this.$filterPosts).sort((function(n,e){return Object(nc.a)(n,e)})),n;var n},$groupPosts:function(){return function(n){for(var e={},t={},r=function(r,o){var i=n[r].frontmatter,a=i.categories,s=i.tags;"array"===Object(nc.n)(a)&&a.forEach((function(t){t&&(e[t]||(e[t]=[]),e[t].push(n[r]))})),"array"===Object(nc.n)(s)&&s.forEach((function(e){e&&(t[e]||(t[e]=[]),t[e].push(n[r]))}))},o=0,i=n.length;o<i;o++)r(o);return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags:function(){return function(n){var e=[],t=[];for(var r in n.categories)e.push({key:r,length:n.categories[r].length});for(var o in n.tags)t.push({key:o,length:n.tags[o].length});return{categories:e,tags:t}}(this.$groupPosts)}}};qo.component(Ys.default),qo.component(Qs.default);function tc(n){return n.toString().padStart(2,"0")}t(369);qo.component("Badge",(function(){return Promise.all([t.e(0),t.e(3)]).then(t.bind(null,513))})),qo.component("CodeBlock",(function(){return Promise.resolve().then(t.bind(null,209))})),qo.component("CodeGroup",(function(){return Promise.resolve().then(t.bind(null,210))}));t(370);var rc=[function(n){n.Vue,n.options,n.router,n.siteData},function(n){var e=n.Vue,t=(n.options,n.router,n.siteData);t.pages.map((function(n){var e=n.frontmatter,r=e.date,o=e.author;"string"==typeof r&&"Z"===r.charAt(r.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return"".concat(n.getUTCFullYear(),"-").concat(tc(n.getUTCMonth()+1),"-").concat(tc(n.getUTCDate())," ").concat(tc(n.getUTCHours()),":").concat(tc(n.getUTCMinutes()),":").concat(tc(n.getUTCSeconds()))}(r)),o?n.author=o:t.themeConfig.author&&(n.author=t.themeConfig.author)})),e.mixin(ec)},{},function(n){n.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{}],oc=[];t(128);t(202);function ic(n,e){return(ic=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}t(203),t(204);function ac(n){return(ac=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function sc(n,e){if(e&&("object"===Aa(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n)}function cc(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var t,r=ac(n);if(e){var o=ac(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return sc(this,t)}}var lc=function(n){!function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&ic(n,e)}(t,n);var e=cc(t);function t(){return ps(this,t),e.apply(this,arguments)}return fs(t)}(function(){function n(){ps(this,n),this.store=new qo({data:{state:{}}})}return fs(n,[{key:"$get",value:function(n){return this.store.state[n]}},{key:"$set",value:function(n,e){qo.set(this.store.state,n,e)}},{key:"$emit",value:function(){var n;(n=this.store).$emit.apply(n,arguments)}},{key:"$on",value:function(){var n;(n=this.store).$on.apply(n,arguments)}}]),n}());Object.assign(lc.prototype,{getPageAsyncComponent:Ha,getLayoutAsyncComponent:Ua,getAsyncComponent:Va,getVueComponent:Ja});var uc={install:function(n){var e=new lc;n.$vuepress=e,n.prototype.$vuepress=e}};function pc(n){n.beforeEach((function(e,t,r){if(dc(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){var o=e.path.replace(/\/$/,"")+".html";dc(n,o)?r(o):r()}else r();else{var i=e.path+"/",a=e.path+".html";dc(n,a)?r(a):dc(n,i)?r(i):r()}}))}function dc(n,e){var t=e.toLowerCase();return n.options.routes.some((function(n){return n.path.toLowerCase()===t}))}var fc={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(n){var e=this.pageKey||this.$parent.$page.key;return Ga("pageKey",e),qo.component(e)||qo.component(e,Ha(e)),qo.component(e)?n(e):n("")}},mc={functional:!0,props:{slotKey:String,required:!0},render:function(n,e){var t=e.props,r=e.slots;return n("div",{class:["content__".concat(t.slotKey)]},r()[t.slotKey])}},gc={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},hc=(t(372),t(373),Object(Gs.a)(gc,(function(){var n=this.$createElement,e=this._self._c||n;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function vc(){return(vc=o(regeneratorRuntime.mark((function n(e){var t,r,o,i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:Xs.routerBase||Xs.base,pc(r=new _a({base:t,mode:"history",fallback:!1,routes:Zs,scrollBehavior:function(n,e,t){return t||(n.hash?!qo.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})}})),o={},n.prev=4,n.next=7,Promise.all(rc.filter((function(n){return"function"==typeof n})).map((function(n){return n({Vue:qo,options:o,router:r,siteData:Xs,isServer:e})})));case 7:n.next=12;break;case 9:n.prev=9,n.t0=n.catch(4),console.error(n.t0);case 12:return i=new qo(Object.assign(o,{router:r,render:function(n){return n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},oc.map((function(e){return n(e)})))])}})),n.abrupt("return",{app:i,router:r});case 14:case"end":return n.stop()}}),n,null,[[4,9]])})))).apply(this,arguments)}qo.config.productionTip=!1,qo.use(_a),qo.use(uc),qo.mixin(function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:qo;Ea(e),t.$vuepress.$set("siteData",e);var r=n(t.$vuepress.$get("siteData")),o=new r,i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),a={};return Object.keys(i).reduce((function(n,e){return e.startsWith("$")&&(n[e]=i[e].get),n}),a),{computed:a}}((function(n){return function(){function e(){ps(this,e)}return fs(e,[{key:"setPage",value:function(n){this.__page=n}},{key:"$site",get:function(){return n}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var n,e,t=this.$site.locales,r=void 0===t?{}:t;for(var o in r)"/"===o?e=r[o]:0===this.$page.path.indexOf(o)&&(n=r[o]);return n||e||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var n=this.$page.frontmatter.canonicalUrl;return"string"==typeof n&&n}},{key:"$title",get:function(){var n=this.$page,e=this.$page.frontmatter.metaTitle;if("string"==typeof e)return e;var t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}},{key:"$description",get:function(){var n=function(n){if(n){var e=n.filter((function(n){return"description"===n.name}))[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(n,e){for(var t=0;t<n.length;t++){var r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),e}()}),Xs)),qo.component("Content",fc),qo.component("ContentSlotsDistributor",mc),qo.component("OutboundLink",hc),qo.component("ClientOnly",{functional:!0,render:function(n,e){var t=e.parent,r=e.children;if(t._isMounted)return r;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),qo.component("Layout",Ua("Layout")),qo.component("NotFound",Ua("NotFound")),qo.prototype.$withBase=function(n){var e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.5",hash:"11fcdf9"},function(n){return vc.apply(this,arguments)}(!1).then((function(n){var e=n.app;n.router.onReady((function(){e.$mount("#app")}))}))}]);