(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{469:function(t,a,e){"use strict";e.r(a);var n=e(29),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("[toc]")]),t._v(" "),e("h1",{attrs:{id:"spring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[t._v("#")]),t._v(" Spring")]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"bean作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bean作用域"}},[t._v("#")]),t._v(" bean作用域")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Spring 中 bean 默认是单实例 singleton")]),t._v(" "),e("ul",[e("li",[t._v("在单例模式中时，在加载Spring配置文件时就会创建bean对象")])])]),t._v(" "),e("li",[e("p",[t._v("另外还有 多实例 prototype")]),t._v(" "),e("ul",[e("li",[t._v("在调用getbean()方法时才创建对象")]),t._v(" "),e("li",[t._v("每次调用getbean()时都创建一个新的对象")])])]),t._v(" "),e("li",[e("p",[t._v("request")]),t._v(" "),e("ul",[e("li",[t._v("在每次请求时创建对象")])])]),t._v(" "),e("li",[e("p",[t._v("session")]),t._v(" "),e("ul",[e("li",[t._v("在一次会话中创建对象")])])])]),t._v(" "),e("h2",{attrs:{id:"bean生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bean生命周期"}},[t._v("#")]),t._v(" bean生命周期")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("1. bean实例化\n2. 注入属性\n3. 后置处理器\n4. 初始化\n5. 使用bean\n6. 后置处理器\n7. 销毁")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);