(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{476:function(e,r,t){"use strict";t.r(r);var n=t(29),a=Object(n.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("[toc]")]),e._v(" "),t("h1",{attrs:{id:"springmvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springmvc"}},[e._v("#")]),e._v(" SpringMvc")]),e._v(" "),t("h2",{attrs:{id:"springmvc流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springmvc流程"}},[e._v("#")]),e._v(" SpringMvc流程")]),e._v(" "),t("p",[e._v("（1）用户发送请求至前端控制器DispatcherServlet；\n（2）DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handler；\n（3）处理器映射器根据请求url找到具体的处理器Handler，生成处理器对象及处理器拦截器(如果有则生成)，一并返回给DispatcherServlet；\n（4）DispatcherServlet 调用 HandlerAdapter处理器适配器，请求执行Handler；\n（5）HandlerAdapter 经过适配调用 具体处理器进行处理业务逻辑；\n（6）Handler执行完成返回ModelAndView；\n（7）HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet；\n（8）DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析；\n（9）ViewResolver解析后返回具体View；\n（10）DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）\n（11）DispatcherServlet响应用户。")])])}),[],!1,null,null,null);r.default=a.exports}}]);